
/Users/hannahscomputer/Downloads/ECE413_final_project/heart_rate_sensor/target/6.1.0/argon/heart_rate_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003a5c  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000b7a7c  000b7a7c  00007a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .note.gnu.build-id 00000024  000b7a84  000b7a84  00007a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000078  2003e5b0  000b7aa8  0000e5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001d0  2003e628  2003e628  0001e628  2**3
                  ALLOC
  7 .backup       00000004  2003f400  000b7b20  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_product 00000006  000b7b24  000b7b24  00017b24  2**0
                  ALLOC
  9 .module_info_suffix 00000024  000b7b2a  000b7b2a  00017b2a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .module_info_crc 00000004  000b7b4e  000b7b4e  00017b4e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .debug_info   0016862f  00000000  00000000  00017b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0001529b  00000000  00000000  00180181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    00043e91  00000000  00000000  0019541c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e80  00000000  00000000  001d92ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 0000c348  00000000  00000000  001dc12d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c579  00000000  00000000  001e8475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000490e4  00000000  00000000  002249ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00168c37  00000000  00000000  0026dad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  000088f4  00000000  00000000  003d670c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_dcmpun>:
   b48cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d4:	d102      	bne.n	b48dc <__aeabi_dcmpun+0x10>
   b48d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48da:	d10a      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e4:	d102      	bne.n	b48ec <__aeabi_dcmpun+0x20>
   b48e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48ea:	d102      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48ec:	f04f 0000 	mov.w	r0, #0
   b48f0:	4770      	bx	lr
   b48f2:	f04f 0001 	mov.w	r0, #1
   b48f6:	4770      	bx	lr

000b48f8 <__aeabi_d2iz>:
   b48f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4900:	d215      	bcs.n	b492e <__aeabi_d2iz+0x36>
   b4902:	d511      	bpl.n	b4928 <__aeabi_d2iz+0x30>
   b4904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b490c:	d912      	bls.n	b4934 <__aeabi_d2iz+0x3c>
   b490e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b491a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b491e:	fa23 f002 	lsr.w	r0, r3, r2
   b4922:	bf18      	it	ne
   b4924:	4240      	negne	r0, r0
   b4926:	4770      	bx	lr
   b4928:	f04f 0000 	mov.w	r0, #0
   b492c:	4770      	bx	lr
   b492e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4932:	d105      	bne.n	b4940 <__aeabi_d2iz+0x48>
   b4934:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b4938:	bf08      	it	eq
   b493a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b493e:	4770      	bx	lr
   b4940:	f04f 0000 	mov.w	r0, #0
   b4944:	4770      	bx	lr
   b4946:	bf00      	nop

000b4948 <__aeabi_d2uiz>:
   b4948:	004a      	lsls	r2, r1, #1
   b494a:	d211      	bcs.n	b4970 <__aeabi_d2uiz+0x28>
   b494c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4950:	d211      	bcs.n	b4976 <__aeabi_d2uiz+0x2e>
   b4952:	d50d      	bpl.n	b4970 <__aeabi_d2uiz+0x28>
   b4954:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4958:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b495c:	d40e      	bmi.n	b497c <__aeabi_d2uiz+0x34>
   b495e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4966:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b496a:	fa23 f002 	lsr.w	r0, r3, r2
   b496e:	4770      	bx	lr
   b4970:	f04f 0000 	mov.w	r0, #0
   b4974:	4770      	bx	lr
   b4976:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b497a:	d102      	bne.n	b4982 <__aeabi_d2uiz+0x3a>
   b497c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4980:	4770      	bx	lr
   b4982:	f04f 0000 	mov.w	r0, #0
   b4986:	4770      	bx	lr

000b4988 <__aeabi_d2f>:
   b4988:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b498c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4990:	bf24      	itt	cs
   b4992:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b4996:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b499a:	d90d      	bls.n	b49b8 <__aeabi_d2f+0x30>
   b499c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b49a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b49a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b49a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b49ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b49b0:	bf08      	it	eq
   b49b2:	f020 0001 	biceq.w	r0, r0, #1
   b49b6:	4770      	bx	lr
   b49b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b49bc:	d121      	bne.n	b4a02 <__aeabi_d2f+0x7a>
   b49be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b49c2:	bfbc      	itt	lt
   b49c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b49c8:	4770      	bxlt	lr
   b49ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b49ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b49d2:	f1c2 0218 	rsb	r2, r2, #24
   b49d6:	f1c2 0c20 	rsb	ip, r2, #32
   b49da:	fa10 f30c 	lsls.w	r3, r0, ip
   b49de:	fa20 f002 	lsr.w	r0, r0, r2
   b49e2:	bf18      	it	ne
   b49e4:	f040 0001 	orrne.w	r0, r0, #1
   b49e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b49ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b49f0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b49f4:	ea40 000c 	orr.w	r0, r0, ip
   b49f8:	fa23 f302 	lsr.w	r3, r3, r2
   b49fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4a00:	e7cc      	b.n	b499c <__aeabi_d2f+0x14>
   b4a02:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b4a06:	d107      	bne.n	b4a18 <__aeabi_d2f+0x90>
   b4a08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b4a0c:	bf1e      	ittt	ne
   b4a0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4a12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b4a16:	4770      	bxne	lr
   b4a18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b4a1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b4a20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4a24:	4770      	bx	lr
   b4a26:	bf00      	nop

000b4a28 <__aeabi_uldivmod>:
   b4a28:	b953      	cbnz	r3, b4a40 <__aeabi_uldivmod+0x18>
   b4a2a:	b94a      	cbnz	r2, b4a40 <__aeabi_uldivmod+0x18>
   b4a2c:	2900      	cmp	r1, #0
   b4a2e:	bf08      	it	eq
   b4a30:	2800      	cmpeq	r0, #0
   b4a32:	bf1c      	itt	ne
   b4a34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b4a38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b4a3c:	f000 b9c6 	b.w	b4dcc <__aeabi_idiv0>
   b4a40:	f1ad 0c08 	sub.w	ip, sp, #8
   b4a44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b4a48:	f000 f858 	bl	b4afc <__udivmoddi4>
   b4a4c:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4a50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4a54:	b004      	add	sp, #16
   b4a56:	4770      	bx	lr

000b4a58 <__aeabi_f2lz>:
   b4a58:	ee07 0a90 	vmov	s15, r0
   b4a5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b4a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4a64:	d401      	bmi.n	b4a6a <__aeabi_f2lz+0x12>
   b4a66:	f000 b80b 	b.w	b4a80 <__aeabi_f2ulz>
   b4a6a:	eef1 7a67 	vneg.f32	s15, s15
   b4a6e:	b508      	push	{r3, lr}
   b4a70:	ee17 0a90 	vmov	r0, s15
   b4a74:	f000 f804 	bl	b4a80 <__aeabi_f2ulz>
   b4a78:	4240      	negs	r0, r0
   b4a7a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4a7e:	bd08      	pop	{r3, pc}

000b4a80 <__aeabi_f2ulz>:
   b4a80:	b5d0      	push	{r4, r6, r7, lr}
   b4a82:	f7ff fc31 	bl	b42e8 <__aeabi_f2d>
   b4a86:	4b0c      	ldr	r3, [pc, #48]	; (b4ab8 <__aeabi_f2ulz+0x38>)
   b4a88:	2200      	movs	r2, #0
   b4a8a:	4606      	mov	r6, r0
   b4a8c:	460f      	mov	r7, r1
   b4a8e:	f7ff fc83 	bl	b4398 <__aeabi_dmul>
   b4a92:	f7ff ff59 	bl	b4948 <__aeabi_d2uiz>
   b4a96:	4604      	mov	r4, r0
   b4a98:	f7ff fc04 	bl	b42a4 <__aeabi_ui2d>
   b4a9c:	4b07      	ldr	r3, [pc, #28]	; (b4abc <__aeabi_f2ulz+0x3c>)
   b4a9e:	2200      	movs	r2, #0
   b4aa0:	f7ff fc7a 	bl	b4398 <__aeabi_dmul>
   b4aa4:	4602      	mov	r2, r0
   b4aa6:	460b      	mov	r3, r1
   b4aa8:	4630      	mov	r0, r6
   b4aaa:	4639      	mov	r1, r7
   b4aac:	f7ff fabc 	bl	b4028 <__aeabi_dsub>
   b4ab0:	f7ff ff4a 	bl	b4948 <__aeabi_d2uiz>
   b4ab4:	4621      	mov	r1, r4
   b4ab6:	bdd0      	pop	{r4, r6, r7, pc}
   b4ab8:	3df00000 	.word	0x3df00000
   b4abc:	41f00000 	.word	0x41f00000

000b4ac0 <__aeabi_d2ulz>:
   b4ac0:	b5d0      	push	{r4, r6, r7, lr}
   b4ac2:	4b0c      	ldr	r3, [pc, #48]	; (b4af4 <__aeabi_d2ulz+0x34>)
   b4ac4:	2200      	movs	r2, #0
   b4ac6:	4606      	mov	r6, r0
   b4ac8:	460f      	mov	r7, r1
   b4aca:	f7ff fc65 	bl	b4398 <__aeabi_dmul>
   b4ace:	f7ff ff3b 	bl	b4948 <__aeabi_d2uiz>
   b4ad2:	4604      	mov	r4, r0
   b4ad4:	f7ff fbe6 	bl	b42a4 <__aeabi_ui2d>
   b4ad8:	4b07      	ldr	r3, [pc, #28]	; (b4af8 <__aeabi_d2ulz+0x38>)
   b4ada:	2200      	movs	r2, #0
   b4adc:	f7ff fc5c 	bl	b4398 <__aeabi_dmul>
   b4ae0:	4602      	mov	r2, r0
   b4ae2:	460b      	mov	r3, r1
   b4ae4:	4630      	mov	r0, r6
   b4ae6:	4639      	mov	r1, r7
   b4ae8:	f7ff fa9e 	bl	b4028 <__aeabi_dsub>
   b4aec:	f7ff ff2c 	bl	b4948 <__aeabi_d2uiz>
   b4af0:	4621      	mov	r1, r4
   b4af2:	bdd0      	pop	{r4, r6, r7, pc}
   b4af4:	3df00000 	.word	0x3df00000
   b4af8:	41f00000 	.word	0x41f00000

000b4afc <__udivmoddi4>:
   b4afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4b00:	9d08      	ldr	r5, [sp, #32]
   b4b02:	4604      	mov	r4, r0
   b4b04:	468e      	mov	lr, r1
   b4b06:	2b00      	cmp	r3, #0
   b4b08:	d14d      	bne.n	b4ba6 <__udivmoddi4+0xaa>
   b4b0a:	428a      	cmp	r2, r1
   b4b0c:	4694      	mov	ip, r2
   b4b0e:	d969      	bls.n	b4be4 <__udivmoddi4+0xe8>
   b4b10:	fab2 f282 	clz	r2, r2
   b4b14:	b152      	cbz	r2, b4b2c <__udivmoddi4+0x30>
   b4b16:	fa01 f302 	lsl.w	r3, r1, r2
   b4b1a:	f1c2 0120 	rsb	r1, r2, #32
   b4b1e:	fa20 f101 	lsr.w	r1, r0, r1
   b4b22:	fa0c fc02 	lsl.w	ip, ip, r2
   b4b26:	ea41 0e03 	orr.w	lr, r1, r3
   b4b2a:	4094      	lsls	r4, r2
   b4b2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b4b30:	0c21      	lsrs	r1, r4, #16
   b4b32:	fbbe f6f8 	udiv	r6, lr, r8
   b4b36:	fa1f f78c 	uxth.w	r7, ip
   b4b3a:	fb08 e316 	mls	r3, r8, r6, lr
   b4b3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b4b42:	fb06 f107 	mul.w	r1, r6, r7
   b4b46:	4299      	cmp	r1, r3
   b4b48:	d90a      	bls.n	b4b60 <__udivmoddi4+0x64>
   b4b4a:	eb1c 0303 	adds.w	r3, ip, r3
   b4b4e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   b4b52:	f080 811f 	bcs.w	b4d94 <__udivmoddi4+0x298>
   b4b56:	4299      	cmp	r1, r3
   b4b58:	f240 811c 	bls.w	b4d94 <__udivmoddi4+0x298>
   b4b5c:	3e02      	subs	r6, #2
   b4b5e:	4463      	add	r3, ip
   b4b60:	1a5b      	subs	r3, r3, r1
   b4b62:	b2a4      	uxth	r4, r4
   b4b64:	fbb3 f0f8 	udiv	r0, r3, r8
   b4b68:	fb08 3310 	mls	r3, r8, r0, r3
   b4b6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b4b70:	fb00 f707 	mul.w	r7, r0, r7
   b4b74:	42a7      	cmp	r7, r4
   b4b76:	d90a      	bls.n	b4b8e <__udivmoddi4+0x92>
   b4b78:	eb1c 0404 	adds.w	r4, ip, r4
   b4b7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b4b80:	f080 810a 	bcs.w	b4d98 <__udivmoddi4+0x29c>
   b4b84:	42a7      	cmp	r7, r4
   b4b86:	f240 8107 	bls.w	b4d98 <__udivmoddi4+0x29c>
   b4b8a:	4464      	add	r4, ip
   b4b8c:	3802      	subs	r0, #2
   b4b8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b4b92:	1be4      	subs	r4, r4, r7
   b4b94:	2600      	movs	r6, #0
   b4b96:	b11d      	cbz	r5, b4ba0 <__udivmoddi4+0xa4>
   b4b98:	40d4      	lsrs	r4, r2
   b4b9a:	2300      	movs	r3, #0
   b4b9c:	e9c5 4300 	strd	r4, r3, [r5]
   b4ba0:	4631      	mov	r1, r6
   b4ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4ba6:	428b      	cmp	r3, r1
   b4ba8:	d909      	bls.n	b4bbe <__udivmoddi4+0xc2>
   b4baa:	2d00      	cmp	r5, #0
   b4bac:	f000 80ef 	beq.w	b4d8e <__udivmoddi4+0x292>
   b4bb0:	2600      	movs	r6, #0
   b4bb2:	e9c5 0100 	strd	r0, r1, [r5]
   b4bb6:	4630      	mov	r0, r6
   b4bb8:	4631      	mov	r1, r6
   b4bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4bbe:	fab3 f683 	clz	r6, r3
   b4bc2:	2e00      	cmp	r6, #0
   b4bc4:	d14a      	bne.n	b4c5c <__udivmoddi4+0x160>
   b4bc6:	428b      	cmp	r3, r1
   b4bc8:	d302      	bcc.n	b4bd0 <__udivmoddi4+0xd4>
   b4bca:	4282      	cmp	r2, r0
   b4bcc:	f200 80f9 	bhi.w	b4dc2 <__udivmoddi4+0x2c6>
   b4bd0:	1a84      	subs	r4, r0, r2
   b4bd2:	eb61 0303 	sbc.w	r3, r1, r3
   b4bd6:	2001      	movs	r0, #1
   b4bd8:	469e      	mov	lr, r3
   b4bda:	2d00      	cmp	r5, #0
   b4bdc:	d0e0      	beq.n	b4ba0 <__udivmoddi4+0xa4>
   b4bde:	e9c5 4e00 	strd	r4, lr, [r5]
   b4be2:	e7dd      	b.n	b4ba0 <__udivmoddi4+0xa4>
   b4be4:	b902      	cbnz	r2, b4be8 <__udivmoddi4+0xec>
   b4be6:	deff      	udf	#255	; 0xff
   b4be8:	fab2 f282 	clz	r2, r2
   b4bec:	2a00      	cmp	r2, #0
   b4bee:	f040 8092 	bne.w	b4d16 <__udivmoddi4+0x21a>
   b4bf2:	eba1 010c 	sub.w	r1, r1, ip
   b4bf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b4bfa:	fa1f fe8c 	uxth.w	lr, ip
   b4bfe:	2601      	movs	r6, #1
   b4c00:	0c20      	lsrs	r0, r4, #16
   b4c02:	fbb1 f3f7 	udiv	r3, r1, r7
   b4c06:	fb07 1113 	mls	r1, r7, r3, r1
   b4c0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b4c0e:	fb0e f003 	mul.w	r0, lr, r3
   b4c12:	4288      	cmp	r0, r1
   b4c14:	d908      	bls.n	b4c28 <__udivmoddi4+0x12c>
   b4c16:	eb1c 0101 	adds.w	r1, ip, r1
   b4c1a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   b4c1e:	d202      	bcs.n	b4c26 <__udivmoddi4+0x12a>
   b4c20:	4288      	cmp	r0, r1
   b4c22:	f200 80cb 	bhi.w	b4dbc <__udivmoddi4+0x2c0>
   b4c26:	4643      	mov	r3, r8
   b4c28:	1a09      	subs	r1, r1, r0
   b4c2a:	b2a4      	uxth	r4, r4
   b4c2c:	fbb1 f0f7 	udiv	r0, r1, r7
   b4c30:	fb07 1110 	mls	r1, r7, r0, r1
   b4c34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b4c38:	fb0e fe00 	mul.w	lr, lr, r0
   b4c3c:	45a6      	cmp	lr, r4
   b4c3e:	d908      	bls.n	b4c52 <__udivmoddi4+0x156>
   b4c40:	eb1c 0404 	adds.w	r4, ip, r4
   b4c44:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   b4c48:	d202      	bcs.n	b4c50 <__udivmoddi4+0x154>
   b4c4a:	45a6      	cmp	lr, r4
   b4c4c:	f200 80bb 	bhi.w	b4dc6 <__udivmoddi4+0x2ca>
   b4c50:	4608      	mov	r0, r1
   b4c52:	eba4 040e 	sub.w	r4, r4, lr
   b4c56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b4c5a:	e79c      	b.n	b4b96 <__udivmoddi4+0x9a>
   b4c5c:	f1c6 0720 	rsb	r7, r6, #32
   b4c60:	40b3      	lsls	r3, r6
   b4c62:	fa22 fc07 	lsr.w	ip, r2, r7
   b4c66:	ea4c 0c03 	orr.w	ip, ip, r3
   b4c6a:	fa20 f407 	lsr.w	r4, r0, r7
   b4c6e:	fa01 f306 	lsl.w	r3, r1, r6
   b4c72:	431c      	orrs	r4, r3
   b4c74:	40f9      	lsrs	r1, r7
   b4c76:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b4c7a:	fa00 f306 	lsl.w	r3, r0, r6
   b4c7e:	fbb1 f8f9 	udiv	r8, r1, r9
   b4c82:	0c20      	lsrs	r0, r4, #16
   b4c84:	fa1f fe8c 	uxth.w	lr, ip
   b4c88:	fb09 1118 	mls	r1, r9, r8, r1
   b4c8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b4c90:	fb08 f00e 	mul.w	r0, r8, lr
   b4c94:	4288      	cmp	r0, r1
   b4c96:	fa02 f206 	lsl.w	r2, r2, r6
   b4c9a:	d90b      	bls.n	b4cb4 <__udivmoddi4+0x1b8>
   b4c9c:	eb1c 0101 	adds.w	r1, ip, r1
   b4ca0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   b4ca4:	f080 8088 	bcs.w	b4db8 <__udivmoddi4+0x2bc>
   b4ca8:	4288      	cmp	r0, r1
   b4caa:	f240 8085 	bls.w	b4db8 <__udivmoddi4+0x2bc>
   b4cae:	f1a8 0802 	sub.w	r8, r8, #2
   b4cb2:	4461      	add	r1, ip
   b4cb4:	1a09      	subs	r1, r1, r0
   b4cb6:	b2a4      	uxth	r4, r4
   b4cb8:	fbb1 f0f9 	udiv	r0, r1, r9
   b4cbc:	fb09 1110 	mls	r1, r9, r0, r1
   b4cc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b4cc4:	fb00 fe0e 	mul.w	lr, r0, lr
   b4cc8:	458e      	cmp	lr, r1
   b4cca:	d908      	bls.n	b4cde <__udivmoddi4+0x1e2>
   b4ccc:	eb1c 0101 	adds.w	r1, ip, r1
   b4cd0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   b4cd4:	d26c      	bcs.n	b4db0 <__udivmoddi4+0x2b4>
   b4cd6:	458e      	cmp	lr, r1
   b4cd8:	d96a      	bls.n	b4db0 <__udivmoddi4+0x2b4>
   b4cda:	3802      	subs	r0, #2
   b4cdc:	4461      	add	r1, ip
   b4cde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b4ce2:	fba0 9402 	umull	r9, r4, r0, r2
   b4ce6:	eba1 010e 	sub.w	r1, r1, lr
   b4cea:	42a1      	cmp	r1, r4
   b4cec:	46c8      	mov	r8, r9
   b4cee:	46a6      	mov	lr, r4
   b4cf0:	d356      	bcc.n	b4da0 <__udivmoddi4+0x2a4>
   b4cf2:	d053      	beq.n	b4d9c <__udivmoddi4+0x2a0>
   b4cf4:	b15d      	cbz	r5, b4d0e <__udivmoddi4+0x212>
   b4cf6:	ebb3 0208 	subs.w	r2, r3, r8
   b4cfa:	eb61 010e 	sbc.w	r1, r1, lr
   b4cfe:	fa01 f707 	lsl.w	r7, r1, r7
   b4d02:	fa22 f306 	lsr.w	r3, r2, r6
   b4d06:	40f1      	lsrs	r1, r6
   b4d08:	431f      	orrs	r7, r3
   b4d0a:	e9c5 7100 	strd	r7, r1, [r5]
   b4d0e:	2600      	movs	r6, #0
   b4d10:	4631      	mov	r1, r6
   b4d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4d16:	f1c2 0320 	rsb	r3, r2, #32
   b4d1a:	40d8      	lsrs	r0, r3
   b4d1c:	fa0c fc02 	lsl.w	ip, ip, r2
   b4d20:	fa21 f303 	lsr.w	r3, r1, r3
   b4d24:	4091      	lsls	r1, r2
   b4d26:	4301      	orrs	r1, r0
   b4d28:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b4d2c:	fa1f fe8c 	uxth.w	lr, ip
   b4d30:	fbb3 f0f7 	udiv	r0, r3, r7
   b4d34:	fb07 3610 	mls	r6, r7, r0, r3
   b4d38:	0c0b      	lsrs	r3, r1, #16
   b4d3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b4d3e:	fb00 f60e 	mul.w	r6, r0, lr
   b4d42:	429e      	cmp	r6, r3
   b4d44:	fa04 f402 	lsl.w	r4, r4, r2
   b4d48:	d908      	bls.n	b4d5c <__udivmoddi4+0x260>
   b4d4a:	eb1c 0303 	adds.w	r3, ip, r3
   b4d4e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   b4d52:	d22f      	bcs.n	b4db4 <__udivmoddi4+0x2b8>
   b4d54:	429e      	cmp	r6, r3
   b4d56:	d92d      	bls.n	b4db4 <__udivmoddi4+0x2b8>
   b4d58:	3802      	subs	r0, #2
   b4d5a:	4463      	add	r3, ip
   b4d5c:	1b9b      	subs	r3, r3, r6
   b4d5e:	b289      	uxth	r1, r1
   b4d60:	fbb3 f6f7 	udiv	r6, r3, r7
   b4d64:	fb07 3316 	mls	r3, r7, r6, r3
   b4d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b4d6c:	fb06 f30e 	mul.w	r3, r6, lr
   b4d70:	428b      	cmp	r3, r1
   b4d72:	d908      	bls.n	b4d86 <__udivmoddi4+0x28a>
   b4d74:	eb1c 0101 	adds.w	r1, ip, r1
   b4d78:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   b4d7c:	d216      	bcs.n	b4dac <__udivmoddi4+0x2b0>
   b4d7e:	428b      	cmp	r3, r1
   b4d80:	d914      	bls.n	b4dac <__udivmoddi4+0x2b0>
   b4d82:	3e02      	subs	r6, #2
   b4d84:	4461      	add	r1, ip
   b4d86:	1ac9      	subs	r1, r1, r3
   b4d88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b4d8c:	e738      	b.n	b4c00 <__udivmoddi4+0x104>
   b4d8e:	462e      	mov	r6, r5
   b4d90:	4628      	mov	r0, r5
   b4d92:	e705      	b.n	b4ba0 <__udivmoddi4+0xa4>
   b4d94:	4606      	mov	r6, r0
   b4d96:	e6e3      	b.n	b4b60 <__udivmoddi4+0x64>
   b4d98:	4618      	mov	r0, r3
   b4d9a:	e6f8      	b.n	b4b8e <__udivmoddi4+0x92>
   b4d9c:	454b      	cmp	r3, r9
   b4d9e:	d2a9      	bcs.n	b4cf4 <__udivmoddi4+0x1f8>
   b4da0:	ebb9 0802 	subs.w	r8, r9, r2
   b4da4:	eb64 0e0c 	sbc.w	lr, r4, ip
   b4da8:	3801      	subs	r0, #1
   b4daa:	e7a3      	b.n	b4cf4 <__udivmoddi4+0x1f8>
   b4dac:	4646      	mov	r6, r8
   b4dae:	e7ea      	b.n	b4d86 <__udivmoddi4+0x28a>
   b4db0:	4620      	mov	r0, r4
   b4db2:	e794      	b.n	b4cde <__udivmoddi4+0x1e2>
   b4db4:	4640      	mov	r0, r8
   b4db6:	e7d1      	b.n	b4d5c <__udivmoddi4+0x260>
   b4db8:	46d0      	mov	r8, sl
   b4dba:	e77b      	b.n	b4cb4 <__udivmoddi4+0x1b8>
   b4dbc:	3b02      	subs	r3, #2
   b4dbe:	4461      	add	r1, ip
   b4dc0:	e732      	b.n	b4c28 <__udivmoddi4+0x12c>
   b4dc2:	4630      	mov	r0, r6
   b4dc4:	e709      	b.n	b4bda <__udivmoddi4+0xde>
   b4dc6:	4464      	add	r4, ip
   b4dc8:	3802      	subs	r0, #2
   b4dca:	e742      	b.n	b4c52 <__udivmoddi4+0x156>

000b4dcc <__aeabi_idiv0>:
   b4dcc:	4770      	bx	lr
   b4dce:	bf00      	nop

000b4dd0 <strlen>:
   b4dd0:	4603      	mov	r3, r0
   b4dd2:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4dd6:	2a00      	cmp	r2, #0
   b4dd8:	d1fb      	bne.n	b4dd2 <strlen+0x2>
   b4dda:	1a18      	subs	r0, r3, r0
   b4ddc:	3801      	subs	r0, #1
   b4dde:	4770      	bx	lr

000b4de0 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4de0:	4809      	ldr	r0, [pc, #36]	; (b4e08 <module_user_pre_init+0x28>)
   b4de2:	490a      	ldr	r1, [pc, #40]	; (b4e0c <module_user_pre_init+0x2c>)
   b4de4:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4de6:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4de8:	d005      	beq.n	b4df6 <module_user_pre_init+0x16>
   b4dea:	4a09      	ldr	r2, [pc, #36]	; (b4e10 <module_user_pre_init+0x30>)
   b4dec:	4282      	cmp	r2, r0
   b4dee:	d002      	beq.n	b4df6 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4df0:	1a12      	subs	r2, r2, r0
   b4df2:	f002 fb17 	bl	b7424 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4df6:	4807      	ldr	r0, [pc, #28]	; (b4e14 <module_user_pre_init+0x34>)
   b4df8:	4a07      	ldr	r2, [pc, #28]	; (b4e18 <module_user_pre_init+0x38>)
   b4dfa:	2100      	movs	r1, #0
   b4dfc:	1a12      	subs	r2, r2, r0
   b4dfe:	f002 fb39 	bl	b7474 <memset>
    return &link_global_data_start;
}
   b4e02:	4801      	ldr	r0, [pc, #4]	; (b4e08 <module_user_pre_init+0x28>)
   b4e04:	bd08      	pop	{r3, pc}
   b4e06:	bf00      	nop
   b4e08:	2003e5b0 	.word	0x2003e5b0
   b4e0c:	000b7aa8 	.word	0x000b7aa8
   b4e10:	2003e628 	.word	0x2003e628
   b4e14:	2003e628 	.word	0x2003e628
   b4e18:	2003e7f8 	.word	0x2003e7f8

000b4e1c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4e1c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4e1e:	4e07      	ldr	r6, [pc, #28]	; (b4e3c <module_user_init+0x20>)
   b4e20:	4c07      	ldr	r4, [pc, #28]	; (b4e40 <module_user_init+0x24>)
    module_user_init_hook();
   b4e22:	f002 fa3f 	bl	b72a4 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4e26:	1ba4      	subs	r4, r4, r6
   b4e28:	08a4      	lsrs	r4, r4, #2
   b4e2a:	2500      	movs	r5, #0
   b4e2c:	42ac      	cmp	r4, r5
   b4e2e:	d100      	bne.n	b4e32 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4e30:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4e32:	f856 3b04 	ldr.w	r3, [r6], #4
   b4e36:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4e38:	3501      	adds	r5, #1
   b4e3a:	e7f7      	b.n	b4e2c <module_user_init+0x10>
   b4e3c:	000b7a58 	.word	0x000b7a58
   b4e40:	000b7a7c 	.word	0x000b7a7c

000b4e44 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4e44:	f000 b81c 	b.w	b4e80 <setup>

000b4e48 <module_user_loop>:
}

void module_user_loop() {
   b4e48:	b508      	push	{r3, lr}
    loop();
   b4e4a:	f000 fbc1 	bl	b55d0 <loop>
    _post_loop();
}
   b4e4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4e52:	f002 b9df 	b.w	b7214 <_post_loop>

000b4e56 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4e56:	f001 b8df 	b.w	b6018 <malloc>

000b4e5a <_Znaj>:
   b4e5a:	f001 b8dd 	b.w	b6018 <malloc>

000b4e5e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4e5e:	f001 b8e3 	b.w	b6028 <free>

000b4e62 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4e62:	7800      	ldrb	r0, [r0, #0]
   b4e64:	fab0 f080 	clz	r0, r0
   b4e68:	0940      	lsrs	r0, r0, #5
   b4e6a:	4770      	bx	lr

000b4e6c <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4e6c:	2301      	movs	r3, #1
   b4e6e:	7003      	strb	r3, [r0, #0]
   b4e70:	4770      	bx	lr

000b4e72 <_Z6handlePKcS0_>:
int hourEnd = 24;
int timeFrequency = 30;

void handle(const char *event, const char *data) {
  // Add functionality here
}
   b4e72:	4770      	bx	lr

000b4e74 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b4e74:	2200      	movs	r2, #0
   b4e76:	6840      	ldr	r0, [r0, #4]
   b4e78:	4611      	mov	r1, r2
   b4e7a:	f001 b875 	b.w	b5f68 <network_ready>
	...

000b4e80 <setup>:

int led = D7; // The on-board LED

void setup() {
   b4e80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  Serial.begin(9600);
   b4e82:	f002 f90f 	bl	b70a4 <_Z16_fetch_usbserialv>
   b4e86:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4e8a:	f002 f8ff 	bl	b708c <_ZN9USBSerial5beginEl>
    virtual bool listening();
    virtual NetworkClass& prefer(bool prefer = true);
    virtual bool isPreferred();

    operator network_interface_t() const {
        return iface_;
   b4e8e:	4d49      	ldr	r5, [pc, #292]	; (b4fb4 <setup+0x134>)
  Serial.println("Initializing...");
   b4e90:	f002 f908 	bl	b70a4 <_Z16_fetch_usbserialv>
   b4e94:	4948      	ldr	r1, [pc, #288]	; (b4fb8 <setup+0x138>)
   b4e96:	f001 fe3a 	bl	b6b0e <_ZN5Print7printlnEPKc>
        network_on(*this, 0, 0, NULL);
   b4e9a:	2300      	movs	r3, #0
   b4e9c:	461a      	mov	r2, r3
   b4e9e:	4619      	mov	r1, r3
   b4ea0:	6868      	ldr	r0, [r5, #4]
   b4ea2:	f001 f869 	bl	b5f78 <network_on>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4ea6:	f000 fe9b 	bl	b5be0 <HAL_Timer_Get_Milli_Seconds>
        network_connect(*this, flags, 0, NULL);
   b4eaa:	2300      	movs	r3, #0
   b4eac:	4604      	mov	r4, r0
   b4eae:	461a      	mov	r2, r3
   b4eb0:	6868      	ldr	r0, [r5, #4]
   b4eb2:	4619      	mov	r1, r3
   b4eb4:	f001 f840 	bl	b5f38 <network_connect>
  // Non-blocking Wi-Fi connection with timeout
    WiFi.on();
    unsigned long wifiStartTime = millis();
    WiFi.connect();

    while (!WiFi.ready() && (millis() - wifiStartTime) < 10000) { // 10-second timeout
   b4eb8:	f242 760f 	movw	r6, #9999	; 0x270f
   b4ebc:	4628      	mov	r0, r5
   b4ebe:	f7ff ffd9 	bl	b4e74 <_ZN5spark9WiFiClass5readyEv>
   b4ec2:	b940      	cbnz	r0, b4ed6 <setup+0x56>
   b4ec4:	f000 fe8c 	bl	b5be0 <HAL_Timer_Get_Milli_Seconds>
   b4ec8:	1b00      	subs	r0, r0, r4
   b4eca:	42b0      	cmp	r0, r6
   b4ecc:	d803      	bhi.n	b4ed6 <setup+0x56>
        delay(100);
   b4ece:	2064      	movs	r0, #100	; 0x64
   b4ed0:	f001 f8e2 	bl	b6098 <delay>
    while (!WiFi.ready() && (millis() - wifiStartTime) < 10000) { // 10-second timeout
   b4ed4:	e7f2      	b.n	b4ebc <setup+0x3c>
    }

    if (WiFi.ready()) {
   b4ed6:	4837      	ldr	r0, [pc, #220]	; (b4fb4 <setup+0x134>)
   b4ed8:	f7ff ffcc 	bl	b4e74 <_ZN5spark9WiFiClass5readyEv>
   b4edc:	b1e8      	cbz	r0, b4f1a <setup+0x9a>
        Serial.println("Wi-Fi connected.");
   b4ede:	f002 f8e1 	bl	b70a4 <_Z16_fetch_usbserialv>
   b4ee2:	4936      	ldr	r1, [pc, #216]	; (b4fbc <setup+0x13c>)
   b4ee4:	f001 fe13 	bl	b6b0e <_ZN5Print7printlnEPKc>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(const spark::NetworkClass& network = spark::Network) {
        spark_set_connection_property(SPARK_CLOUD_BIND_NETWORK_INTERFACE, static_cast<network_interface_t>(network), nullptr, nullptr);
   b4ee8:	4935      	ldr	r1, [pc, #212]	; (b4fc0 <setup+0x140>)
   b4eea:	2300      	movs	r3, #0
   b4eec:	6849      	ldr	r1, [r1, #4]
   b4eee:	461a      	mov	r2, r3
   b4ef0:	2006      	movs	r0, #6
   b4ef2:	f001 f811 	bl	b5f18 <spark_set_connection_property>
        spark_cloud_flag_connect();
   b4ef6:	f000 ffdf 	bl	b5eb8 <spark_cloud_flag_connect>
   b4efa:	f000 fe71 	bl	b5be0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4efe:	4d31      	ldr	r5, [pc, #196]	; (b4fc4 <setup+0x144>)
   b4f00:	4604      	mov	r4, r0
        Serial.println("Wi-Fi connection failed. Operating offline.");
    }

    // Non-blocking Particle Cloud connection
    unsigned long particleStartTime = millis();
    while (!Particle.connected() && (millis() - particleStartTime) < 5000) { // 5-second timeout
   b4f02:	f241 3687 	movw	r6, #4999	; 0x1387
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4f06:	f000 ffdf 	bl	b5ec8 <spark_cloud_flag_connected>
   b4f0a:	b160      	cbz	r0, b4f26 <setup+0xa6>
   b4f0c:	f000 ffdc 	bl	b5ec8 <spark_cloud_flag_connected>
        Particle.process(); // Allow background tasks
    }

    if (Particle.connected()) {
   b4f10:	b9a0      	cbnz	r0, b4f3c <setup+0xbc>
        Serial.println("Particle Cloud connected.");
    } else {
        Serial.println("Particle Cloud connection failed. Operating offline.");
   b4f12:	f002 f8c7 	bl	b70a4 <_Z16_fetch_usbserialv>
   b4f16:	492c      	ldr	r1, [pc, #176]	; (b4fc8 <setup+0x148>)
   b4f18:	e013      	b.n	b4f42 <setup+0xc2>
        Serial.println("Wi-Fi connection failed. Operating offline.");
   b4f1a:	f002 f8c3 	bl	b70a4 <_Z16_fetch_usbserialv>
   b4f1e:	492b      	ldr	r1, [pc, #172]	; (b4fcc <setup+0x14c>)
   b4f20:	f001 fdf5 	bl	b6b0e <_ZN5Print7printlnEPKc>
   b4f24:	e7e9      	b.n	b4efa <setup+0x7a>
   b4f26:	f000 fe5b 	bl	b5be0 <HAL_Timer_Get_Milli_Seconds>
    while (!Particle.connected() && (millis() - particleStartTime) < 5000) { // 5-second timeout
   b4f2a:	1b00      	subs	r0, r0, r4
   b4f2c:	42b0      	cmp	r0, r6
   b4f2e:	d8ed      	bhi.n	b4f0c <setup+0x8c>
		return HAL_Timer_Get_Milli_Seconds();
   b4f30:	f000 fe56 	bl	b5be0 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b4f34:	6028      	str	r0, [r5, #0]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static bool process(void) {
            application_checkin();
            return spark_process();
   b4f36:	f000 ffb7 	bl	b5ea8 <spark_process>
   b4f3a:	e7e4      	b.n	b4f06 <setup+0x86>
        Serial.println("Particle Cloud connected.");
   b4f3c:	f002 f8b2 	bl	b70a4 <_Z16_fetch_usbserialv>
   b4f40:	4923      	ldr	r1, [pc, #140]	; (b4fd0 <setup+0x150>)
        Serial.println("Particle Cloud connection failed. Operating offline.");
   b4f42:	f001 fde4 	bl	b6b0e <_ZN5Print7printlnEPKc>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4f46:	f000 ffbf 	bl	b5ec8 <spark_cloud_flag_connected>
        if (!connected()) {
   b4f4a:	b110      	cbz	r0, b4f52 <setup+0xd2>
        return spark_sync_time(NULL);
   b4f4c:	2000      	movs	r0, #0
   b4f4e:	f000 ffd3 	bl	b5ef8 <spark_sync_time>
    }

  Particle.syncTime();
  Time.zone(-7); //Arizona Time
   b4f52:	eeb9 0a0c 	vmov.f32	s0, #156	; 0xc0e00000 -7.0
   b4f56:	f001 ff91 	bl	b6e7c <_ZN9TimeClass4zoneEf>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4f5a:	2300      	movs	r3, #0
   b4f5c:	461a      	mov	r2, r3
   b4f5e:	e9cd 3300 	strd	r3, r3, [sp]
   b4f62:	491c      	ldr	r1, [pc, #112]	; (b4fd4 <setup+0x154>)
   b4f64:	481c      	ldr	r0, [pc, #112]	; (b4fd8 <setup+0x158>)
   b4f66:	f000 ffbf 	bl	b5ee8 <spark_subscribe>
  // Subscriptions to Particle Webhooks
  Particle.subscribe("hook-response/testData", handle, MY_DEVICES);

  // Initialize sensor
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) { // Use default I2C port, 400kHz speed
   b4f6a:	f002 f9e9 	bl	b7340 <_Z19__fetch_global_Wirev>
   b4f6e:	4a1b      	ldr	r2, [pc, #108]	; (b4fdc <setup+0x15c>)
   b4f70:	4601      	mov	r1, r0
   b4f72:	2357      	movs	r3, #87	; 0x57
   b4f74:	481a      	ldr	r0, [pc, #104]	; (b4fe0 <setup+0x160>)
   b4f76:	f000 fcb3 	bl	b58e0 <_ZN8MAX301055beginER7TwoWiremh>
   b4f7a:	b928      	cbnz	r0, b4f88 <setup+0x108>
    Serial.println("MAX30105 was not found. Please check wiring/power.");
   b4f7c:	f002 f892 	bl	b70a4 <_Z16_fetch_usbserialv>
   b4f80:	4918      	ldr	r1, [pc, #96]	; (b4fe4 <setup+0x164>)
   b4f82:	f001 fdc4 	bl	b6b0e <_ZN5Print7printlnEPKc>
    while (1){
   b4f86:	e7fe      	b.n	b4f86 <setup+0x106>
    };
  }

  particleSensor.setup(); // Configure sensor with default settings
   b4f88:	f240 139b 	movw	r3, #411	; 0x19b
   b4f8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   b4f90:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b4f94:	f44f 73c8 	mov.w	r3, #400	; 0x190
   b4f98:	9300      	str	r3, [sp, #0]
   b4f9a:	4811      	ldr	r0, [pc, #68]	; (b4fe0 <setup+0x160>)
   b4f9c:	2303      	movs	r3, #3
   b4f9e:	2204      	movs	r2, #4
   b4fa0:	211f      	movs	r1, #31
   b4fa2:	f000 fd5d 	bl	b5a60 <_ZN8MAX301055setupEhhhiii>
  RGB.control(TRUE);
   b4fa6:	2001      	movs	r0, #1
}
   b4fa8:	b004      	add	sp, #16
   b4faa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  RGB.control(TRUE);
   b4fae:	f001 bdd6 	b.w	b6b5e <_ZN8RGBClass7controlEb>
   b4fb2:	bf00      	nop
   b4fb4:	2003e720 	.word	0x2003e720
   b4fb8:	000b75fc 	.word	0x000b75fc
   b4fbc:	000b760c 	.word	0x000b760c
   b4fc0:	2003e69c 	.word	0x2003e69c
   b4fc4:	2003e730 	.word	0x2003e730
   b4fc8:	000b7663 	.word	0x000b7663
   b4fcc:	000b761d 	.word	0x000b761d
   b4fd0:	000b7649 	.word	0x000b7649
   b4fd4:	000b4e73 	.word	0x000b4e73
   b4fd8:	000b7698 	.word	0x000b7698
   b4fdc:	00061a80 	.word	0x00061a80
   b4fe0:	2003e64c 	.word	0x2003e64c
   b4fe4:	000b76af 	.word	0x000b76af

000b4fe8 <_Z9checkTimev>:
            StoreData();
            break;
    }
}

bool checkTime() {
   b4fe8:	b508      	push	{r3, lr}
    int currentHour = Time.hour(); // Get the current hour (24-hour format)
   b4fea:	f001 ff95 	bl	b6f18 <_ZN9TimeClass4hourEv>
    return (currentHour >= hourStart && currentHour < hourEnd); // Between 6 AM and 10 PM
   b4fee:	4b06      	ldr	r3, [pc, #24]	; (b5008 <_Z9checkTimev+0x20>)
   b4ff0:	681b      	ldr	r3, [r3, #0]
   b4ff2:	4283      	cmp	r3, r0
   b4ff4:	dc06      	bgt.n	b5004 <_Z9checkTimev+0x1c>
   b4ff6:	4b05      	ldr	r3, [pc, #20]	; (b500c <_Z9checkTimev+0x24>)
   b4ff8:	681b      	ldr	r3, [r3, #0]
   b4ffa:	4283      	cmp	r3, r0
   b4ffc:	bfd4      	ite	le
   b4ffe:	2000      	movle	r0, #0
   b5000:	2001      	movgt	r0, #1
}
   b5002:	bd08      	pop	{r3, pc}
    return (currentHour >= hourStart && currentHour < hourEnd); // Between 6 AM and 10 PM
   b5004:	2000      	movs	r0, #0
   b5006:	e7fc      	b.n	b5002 <_Z9checkTimev+0x1a>
   b5008:	2003e5b4 	.word	0x2003e5b4
   b500c:	2003e5b0 	.word	0x2003e5b0

000b5010 <_Z9IdleStatev>:

void IdleState() {
   b5010:	b508      	push	{r3, lr}
   b5012:	f000 fde5 	bl	b5be0 <HAL_Timer_Get_Milli_Seconds>
   // Wait until it's time for the next measurement
  if ((millis() - lastMeasurementTime >= measurementInterval) && checkTime()) {
   b5016:	4b0b      	ldr	r3, [pc, #44]	; (b5044 <_Z9IdleStatev+0x34>)
   b5018:	681b      	ldr	r3, [r3, #0]
   b501a:	1ac0      	subs	r0, r0, r3
   b501c:	f247 532f 	movw	r3, #29999	; 0x752f
   b5020:	4298      	cmp	r0, r3
   b5022:	d90e      	bls.n	b5042 <_Z9IdleStatev+0x32>
   b5024:	f7ff ffe0 	bl	b4fe8 <_Z9checkTimev>
   b5028:	b158      	cbz	r0, b5042 <_Z9IdleStatev+0x32>
      Serial.println("Time for new measurement.");
   b502a:	f002 f83b 	bl	b70a4 <_Z16_fetch_usbserialv>
   b502e:	4906      	ldr	r1, [pc, #24]	; (b5048 <_Z9IdleStatev+0x38>)
   b5030:	f001 fd6d 	bl	b6b0e <_ZN5Print7printlnEPKc>
      currentState = REQUEST_MEASUREMENT;
   b5034:	4b05      	ldr	r3, [pc, #20]	; (b504c <_Z9IdleStatev+0x3c>)
   b5036:	2201      	movs	r2, #1
   b5038:	701a      	strb	r2, [r3, #0]
   b503a:	f000 fdd1 	bl	b5be0 <HAL_Timer_Get_Milli_Seconds>
      requestStartTime = millis(); // Start request timer
   b503e:	4b04      	ldr	r3, [pc, #16]	; (b5050 <_Z9IdleStatev+0x40>)
   b5040:	6018      	str	r0, [r3, #0]
  }
}
   b5042:	bd08      	pop	{r3, pc}
   b5044:	2003e5b8 	.word	0x2003e5b8
   b5048:	000b76e2 	.word	0x000b76e2
   b504c:	2003e63c 	.word	0x2003e63c
   b5050:	2003e688 	.word	0x2003e688

000b5054 <_Z18ProcessMeasurementv>:
        Serial.println("Measurement timeout. Returning to IDLE.");
        currentState = IDLE;
    }
}

void ProcessMeasurement() {
   b5054:	b508      	push	{r3, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5056:	f000 ff37 	bl	b5ec8 <spark_cloud_flag_connected>
   b505a:	4b03      	ldr	r3, [pc, #12]	; (b5068 <_Z18ProcessMeasurementv+0x14>)
  if(Particle.connected()){
    currentState = SEND_DATA;
  }
  else {
    currentState = STORE_DATA;
   b505c:	2800      	cmp	r0, #0
   b505e:	bf14      	ite	ne
   b5060:	2203      	movne	r2, #3
   b5062:	2204      	moveq	r2, #4
   b5064:	701a      	strb	r2, [r3, #0]
  }
}
   b5066:	bd08      	pop	{r3, pc}
   b5068:	2003e63c 	.word	0x2003e63c

000b506c <_Z8flashLEDmi>:

    lastMeasurementTime = millis();
    currentState = IDLE;
}

void flashLED(uint32_t color, int duration) {
   b506c:	b510      	push	{r4, lr}
   b506e:	460c      	mov	r4, r1
    RGB.color(color);
   b5070:	f001 fd98 	bl	b6ba4 <_ZN8RGBClass5colorEm>
    delay(duration);
   b5074:	4620      	mov	r0, r4
   b5076:	f001 f80f 	bl	b6098 <delay>
    RGB.color(0, 0, 0); // Turn off LED
   b507a:	2200      	movs	r2, #0
   b507c:	4610      	mov	r0, r2
   b507e:	4611      	mov	r1, r2
   b5080:	f001 fd7d 	bl	b6b7e <_ZN8RGBClass5colorEiii>
    delay(100);
}
   b5084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(100);
   b5088:	2064      	movs	r0, #100	; 0x64
   b508a:	f001 b805 	b.w	b6098 <delay>
	...

000b5090 <_Z18RequestMeasurementv>:
void RequestMeasurement() {
   b5090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5094:	ed2d 8b02 	vpush	{d8}
    Serial.println("Requesting measurement... Flashing blue LED.");
   b5098:	f002 f804 	bl	b70a4 <_Z16_fetch_usbserialv>
   b509c:	497a      	ldr	r1, [pc, #488]	; (b5288 <_Z18RequestMeasurementv+0x1f8>)
   b509e:	f001 fd36 	bl	b6b0e <_ZN5Print7printlnEPKc>
    flashLED(BLUE, 100);
   b50a2:	2164      	movs	r1, #100	; 0x64
   b50a4:	20ff      	movs	r0, #255	; 0xff
   b50a6:	f7ff ffe1 	bl	b506c <_Z8flashLEDmi>
    long irValue = particleSensor.getIR();
   b50aa:	4878      	ldr	r0, [pc, #480]	; (b528c <_Z18RequestMeasurementv+0x1fc>)
   b50ac:	f000 fc00 	bl	b58b0 <_ZN8MAX301055getIREv>
   b50b0:	4604      	mov	r4, r0
    delay(2000);
   b50b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b50b6:	f000 ffef 	bl	b6098 <delay>
    if (irValue > 10000) { // Threshold for valid input
   b50ba:	f242 7310 	movw	r3, #10000	; 0x2710
   b50be:	429c      	cmp	r4, r3
   b50c0:	f340 80c8 	ble.w	b5254 <_Z18RequestMeasurementv+0x1c4>
        beatsPerMinute = (irValue / 1831.0) + 30;
   b50c4:	4620      	mov	r0, r4
   b50c6:	f7ff f8fd 	bl	b42c4 <__aeabi_i2d>
   b50ca:	a36b      	add	r3, pc, #428	; (adr r3, b5278 <_Z18RequestMeasurementv+0x1e8>)
   b50cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b50d0:	f7ff fa8c 	bl	b45ec <__aeabi_ddiv>
   b50d4:	4b6e      	ldr	r3, [pc, #440]	; (b5290 <_Z18RequestMeasurementv+0x200>)
   b50d6:	4c6f      	ldr	r4, [pc, #444]	; (b5294 <_Z18RequestMeasurementv+0x204>)
   b50d8:	2200      	movs	r2, #0
   b50da:	f7fe ffa7 	bl	b402c <__adddf3>
   b50de:	f7ff fc53 	bl	b4988 <__aeabi_d2f>
        if (beatsPerMinute > 40 && beatsPerMinute < 200) { // Validate BPM
   b50e2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; b5298 <_Z18RequestMeasurementv+0x208>
        beatsPerMinute = (irValue / 1831.0) + 30;
   b50e6:	6020      	str	r0, [r4, #0]
   b50e8:	ee07 0a90 	vmov	s15, r0
        if (beatsPerMinute > 40 && beatsPerMinute < 200) { // Validate BPM
   b50ec:	eef4 7ac7 	vcmpe.f32	s15, s14
   b50f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b50f4:	dd27      	ble.n	b5146 <_Z18RequestMeasurementv+0xb6>
   b50f6:	ed9f 7a69 	vldr	s14, [pc, #420]	; b529c <_Z18RequestMeasurementv+0x20c>
   b50fa:	eef4 7ac7 	vcmpe.f32	s15, s14
   b50fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5102:	d520      	bpl.n	b5146 <_Z18RequestMeasurementv+0xb6>
            Serial.print("Valid BPM: ");
   b5104:	f001 ffce 	bl	b70a4 <_Z16_fetch_usbserialv>
   b5108:	4965      	ldr	r1, [pc, #404]	; (b52a0 <_Z18RequestMeasurementv+0x210>)
   b510a:	f001 fced 	bl	b6ae8 <_ZN5Print5printEPKc>
            Serial.println(beatsPerMinute);
   b510e:	f001 ffc9 	bl	b70a4 <_Z16_fetch_usbserialv>
   b5112:	ed94 8a00 	vldr	s16, [r4]
   b5116:	4682      	mov	sl, r0
        return n;
    }

#ifndef PARTICLE_WIRING_PRINT_NO_FLOAT
    size_t println(float num, int digits = FLOAT_DEFAULT_FRACTIONAL_DIGITS) {
        return println((double)num, digits);
   b5118:	ee18 0a10 	vmov	r0, s16
   b511c:	f7ff f8e4 	bl	b42e8 <__aeabi_f2d>
        if (std::isnan(number)) {
   b5120:	4602      	mov	r2, r0
   b5122:	460b      	mov	r3, r1
        return println((double)num, digits);
   b5124:	4604      	mov	r4, r0
   b5126:	460d      	mov	r5, r1
   b5128:	4606      	mov	r6, r0
   b512a:	460f      	mov	r7, r1
        if (std::isnan(number)) {
   b512c:	f7ff fbce 	bl	b48cc <__aeabi_dcmpun>
   b5130:	b168      	cbz	r0, b514e <_Z18RequestMeasurementv+0xbe>
            return print("nan");
   b5132:	495c      	ldr	r1, [pc, #368]	; (b52a4 <_Z18RequestMeasurementv+0x214>)
            return print("inf");
   b5134:	4650      	mov	r0, sl
   b5136:	f001 fcd7 	bl	b6ae8 <_ZN5Print5printEPKc>
    }

    size_t println(double num, int digits = FLOAT_DEFAULT_FRACTIONAL_DIGITS) {
        size_t n = print(num, digits);
        n += println();
   b513a:	4650      	mov	r0, sl
   b513c:	f001 fcdb 	bl	b6af6 <_ZN5Print7printlnEv>
            currentState = PROCESS_MEASUREMENT;
   b5140:	4b59      	ldr	r3, [pc, #356]	; (b52a8 <_Z18RequestMeasurementv+0x218>)
   b5142:	2202      	movs	r2, #2
        currentState = IDLE;
   b5144:	701a      	strb	r2, [r3, #0]
}
   b5146:	ecbd 8b02 	vpop	{d8}
   b514a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b514e:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
        if (std::isinf(number)) {
   b5152:	4b56      	ldr	r3, [pc, #344]	; (b52ac <_Z18RequestMeasurementv+0x21c>)
   b5154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5158:	4620      	mov	r0, r4
   b515a:	4649      	mov	r1, r9
   b515c:	f7ff fbb6 	bl	b48cc <__aeabi_dcmpun>
   b5160:	b948      	cbnz	r0, b5176 <_Z18RequestMeasurementv+0xe6>
   b5162:	4b52      	ldr	r3, [pc, #328]	; (b52ac <_Z18RequestMeasurementv+0x21c>)
   b5164:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5168:	4620      	mov	r0, r4
   b516a:	4649      	mov	r1, r9
   b516c:	f7ff fb90 	bl	b4890 <__aeabi_dcmple>
   b5170:	b908      	cbnz	r0, b5176 <_Z18RequestMeasurementv+0xe6>
            return print("inf");
   b5172:	494f      	ldr	r1, [pc, #316]	; (b52b0 <_Z18RequestMeasurementv+0x220>)
   b5174:	e7de      	b.n	b5134 <_Z18RequestMeasurementv+0xa4>
        if (number > 4294967040.0) {
   b5176:	eddf 7a4f 	vldr	s15, [pc, #316]	; b52b4 <_Z18RequestMeasurementv+0x224>
   b517a:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b517e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5182:	dd01      	ble.n	b5188 <_Z18RequestMeasurementv+0xf8>
            return print ("ovf"); // constant determined empirically
   b5184:	494c      	ldr	r1, [pc, #304]	; (b52b8 <_Z18RequestMeasurementv+0x228>)
   b5186:	e7d5      	b.n	b5134 <_Z18RequestMeasurementv+0xa4>
        if (number <-4294967040.0) {
   b5188:	eddf 7a4c 	vldr	s15, [pc, #304]	; b52bc <_Z18RequestMeasurementv+0x22c>
   b518c:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b5190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5194:	d4f6      	bmi.n	b5184 <_Z18RequestMeasurementv+0xf4>
        if (number < 0.0) {
   b5196:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b519a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b519e:	d506      	bpl.n	b51ae <_Z18RequestMeasurementv+0x11e>
            n += print('-');
   b51a0:	212d      	movs	r1, #45	; 0x2d
   b51a2:	4650      	mov	r0, sl
   b51a4:	f001 fca4 	bl	b6af0 <_ZN5Print5printEc>
            number = -number;
   b51a8:	4626      	mov	r6, r4
   b51aa:	f105 4700 	add.w	r7, r5, #2147483648	; 0x80000000
        number += rounding;
   b51ae:	a334      	add	r3, pc, #208	; (adr r3, b5280 <_Z18RequestMeasurementv+0x1f0>)
   b51b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b51b4:	4630      	mov	r0, r6
   b51b6:	4639      	mov	r1, r7
   b51b8:	f7fe ff38 	bl	b402c <__adddf3>
   b51bc:	460d      	mov	r5, r1
   b51be:	4604      	mov	r4, r0
        unsigned long int_part = (unsigned long)number;
   b51c0:	f7ff fbc2 	bl	b4948 <__aeabi_d2uiz>
   b51c4:	4606      	mov	r6, r0
        double remainder = number - (double)int_part;
   b51c6:	f7ff f86d 	bl	b42a4 <__aeabi_ui2d>
   b51ca:	460b      	mov	r3, r1
   b51cc:	4602      	mov	r2, r0
   b51ce:	4629      	mov	r1, r5
   b51d0:	4620      	mov	r0, r4
   b51d2:	f7fe ff29 	bl	b4028 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b51d6:	220a      	movs	r2, #10
        double remainder = number - (double)int_part;
   b51d8:	4604      	mov	r4, r0
   b51da:	460d      	mov	r5, r1
        return printNumber(val, base) + t;
   b51dc:	4650      	mov	r0, sl
   b51de:	4631      	mov	r1, r6
   b51e0:	f001 fc9f 	bl	b6b22 <_ZN5Print11printNumberEmh>
            n += print(".");
   b51e4:	4936      	ldr	r1, [pc, #216]	; (b52c0 <_Z18RequestMeasurementv+0x230>)
   b51e6:	4650      	mov	r0, sl
   b51e8:	f001 fc7e 	bl	b6ae8 <_ZN5Print5printEPKc>
            remainder *= 10.0;
   b51ec:	4b35      	ldr	r3, [pc, #212]	; (b52c4 <_Z18RequestMeasurementv+0x234>)
   b51ee:	2200      	movs	r2, #0
   b51f0:	4620      	mov	r0, r4
   b51f2:	4629      	mov	r1, r5
   b51f4:	f7ff f8d0 	bl	b4398 <__aeabi_dmul>
   b51f8:	4606      	mov	r6, r0
   b51fa:	460f      	mov	r7, r1
            int toPrint = int(remainder);
   b51fc:	f7ff fb7c 	bl	b48f8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b5200:	1e04      	subs	r4, r0, #0
   b5202:	db1b      	blt.n	b523c <_Z18RequestMeasurementv+0x1ac>
            val = n;
   b5204:	4621      	mov	r1, r4
        return printNumber(val, base) + t;
   b5206:	220a      	movs	r2, #10
   b5208:	4650      	mov	r0, sl
   b520a:	f001 fc8a 	bl	b6b22 <_ZN5Print11printNumberEmh>
            remainder -= toPrint;
   b520e:	4620      	mov	r0, r4
   b5210:	f7ff f858 	bl	b42c4 <__aeabi_i2d>
   b5214:	4602      	mov	r2, r0
   b5216:	460b      	mov	r3, r1
   b5218:	4630      	mov	r0, r6
   b521a:	4639      	mov	r1, r7
   b521c:	f7fe ff04 	bl	b4028 <__aeabi_dsub>
            remainder *= 10.0;
   b5220:	4b28      	ldr	r3, [pc, #160]	; (b52c4 <_Z18RequestMeasurementv+0x234>)
   b5222:	2200      	movs	r2, #0
   b5224:	f7ff f8b8 	bl	b4398 <__aeabi_dmul>
            int toPrint = int(remainder);
   b5228:	f7ff fb66 	bl	b48f8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b522c:	1e04      	subs	r4, r0, #0
   b522e:	db0b      	blt.n	b5248 <_Z18RequestMeasurementv+0x1b8>
            val = n;
   b5230:	4621      	mov	r1, r4
        return printNumber(val, base) + t;
   b5232:	220a      	movs	r2, #10
   b5234:	4650      	mov	r0, sl
   b5236:	f001 fc74 	bl	b6b22 <_ZN5Print11printNumberEmh>
        while (digits-- > 0) {
   b523a:	e77e      	b.n	b513a <_Z18RequestMeasurementv+0xaa>
            t = print('-');
   b523c:	212d      	movs	r1, #45	; 0x2d
   b523e:	4650      	mov	r0, sl
   b5240:	f001 fc56 	bl	b6af0 <_ZN5Print5printEc>
            val = -n;
   b5244:	4261      	negs	r1, r4
   b5246:	e7de      	b.n	b5206 <_Z18RequestMeasurementv+0x176>
            t = print('-');
   b5248:	212d      	movs	r1, #45	; 0x2d
   b524a:	4650      	mov	r0, sl
   b524c:	f001 fc50 	bl	b6af0 <_ZN5Print5printEc>
            val = -n;
   b5250:	4261      	negs	r1, r4
   b5252:	e7ee      	b.n	b5232 <_Z18RequestMeasurementv+0x1a2>
   b5254:	f000 fcc4 	bl	b5be0 <HAL_Timer_Get_Milli_Seconds>
    } else if (millis() - requestStartTime >= measurementTimeout) {
   b5258:	4b1b      	ldr	r3, [pc, #108]	; (b52c8 <_Z18RequestMeasurementv+0x238>)
   b525a:	681b      	ldr	r3, [r3, #0]
   b525c:	1ac0      	subs	r0, r0, r3
   b525e:	4b1b      	ldr	r3, [pc, #108]	; (b52cc <_Z18RequestMeasurementv+0x23c>)
   b5260:	4298      	cmp	r0, r3
   b5262:	f67f af70 	bls.w	b5146 <_Z18RequestMeasurementv+0xb6>
        Serial.println("Measurement timeout. Returning to IDLE.");
   b5266:	f001 ff1d 	bl	b70a4 <_Z16_fetch_usbserialv>
   b526a:	4919      	ldr	r1, [pc, #100]	; (b52d0 <_Z18RequestMeasurementv+0x240>)
   b526c:	f001 fc4f 	bl	b6b0e <_ZN5Print7printlnEPKc>
        currentState = IDLE;
   b5270:	4b0d      	ldr	r3, [pc, #52]	; (b52a8 <_Z18RequestMeasurementv+0x218>)
   b5272:	2200      	movs	r2, #0
   b5274:	e766      	b.n	b5144 <_Z18RequestMeasurementv+0xb4>
   b5276:	bf00      	nop
   b5278:	00000000 	.word	0x00000000
   b527c:	409c9c00 	.word	0x409c9c00
   b5280:	47ae147b 	.word	0x47ae147b
   b5284:	3f747ae1 	.word	0x3f747ae1
   b5288:	000b76fc 	.word	0x000b76fc
   b528c:	2003e64c 	.word	0x2003e64c
   b5290:	403e0000 	.word	0x403e0000
   b5294:	2003e638 	.word	0x2003e638
   b5298:	42200000 	.word	0x42200000
   b529c:	43480000 	.word	0x43480000
   b52a0:	000b7729 	.word	0x000b7729
   b52a4:	000b7735 	.word	0x000b7735
   b52a8:	2003e63c 	.word	0x2003e63c
   b52ac:	7fefffff 	.word	0x7fefffff
   b52b0:	000b7739 	.word	0x000b7739
   b52b4:	4f7fffff 	.word	0x4f7fffff
   b52b8:	000b773d 	.word	0x000b773d
   b52bc:	cf7fffff 	.word	0xcf7fffff
   b52c0:	000b760a 	.word	0x000b760a
   b52c4:	40240000 	.word	0x40240000
   b52c8:	2003e688 	.word	0x2003e688
   b52cc:	000493df 	.word	0x000493df
   b52d0:	000b7741 	.word	0x000b7741

000b52d4 <_ZNSt6vectorI11MeasurementSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b52d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b52d8:	e9d0 8900 	ldrd	r8, r9, [r0]
   b52dc:	4693      	mov	fp, r2

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b52de:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b52e2:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
   b52e6:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
   b52ea:	4607      	mov	r7, r0
   b52ec:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b52ee:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
   b52f2:	d102      	bne.n	b52fa <_ZNSt6vectorI11MeasurementSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b52f4:	4820      	ldr	r0, [pc, #128]	; (b5378 <_ZNSt6vectorI11MeasurementSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>)
   b52f6:	f002 f889 	bl	b740c <_ZSt20__throw_length_errorPKc>
   b52fa:	2c01      	cmp	r4, #1
   b52fc:	4622      	mov	r2, r4
   b52fe:	bf38      	it	cc
   b5300:	2201      	movcc	r2, #1
   b5302:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b5304:	eba1 0508 	sub.w	r5, r1, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5308:	d231      	bcs.n	b536e <_ZNSt6vectorI11MeasurementSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b530a:	b394      	cbz	r4, b5372 <_ZNSt6vectorI11MeasurementSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9e>
   b530c:	429c      	cmp	r4, r3
   b530e:	bf28      	it	cs
   b5310:	461c      	movcs	r4, r3
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5312:	00e0      	lsls	r0, r4, #3
   b5314:	f7ff fd9f 	bl	b4e56 <_Znwj>
   b5318:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b531a:	1973      	adds	r3, r6, r5
   b531c:	bf1c      	itt	ne
   b531e:	e9db 0100 	ldrdne	r0, r1, [fp]
   b5322:	e9c3 0100 	strdne	r0, r1, [r3]
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
   b5326:	2d00      	cmp	r5, #0
   b5328:	dd04      	ble.n	b5334 <_ZNSt6vectorI11MeasurementSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x60>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b532a:	462a      	mov	r2, r5
   b532c:	4641      	mov	r1, r8
   b532e:	4630      	mov	r0, r6
   b5330:	f002 f886 	bl	b7440 <memmove>
      ptrdiff_t __count = __last - __first;
   b5334:	eba9 090a 	sub.w	r9, r9, sl
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   b5338:	3508      	adds	r5, #8
      if (__count > 0)
   b533a:	f1b9 0f00 	cmp.w	r9, #0
   b533e:	4435      	add	r5, r6
   b5340:	dd04      	ble.n	b534c <_ZNSt6vectorI11MeasurementSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b5342:	464a      	mov	r2, r9
   b5344:	4651      	mov	r1, sl
   b5346:	4628      	mov	r0, r5
   b5348:	f002 f86c 	bl	b7424 <memcpy>
      return __result + __count;
   b534c:	444d      	add	r5, r9
	if (__p)
   b534e:	f1b8 0f00 	cmp.w	r8, #0
   b5352:	d005      	beq.n	b5360 <_ZNSt6vectorI11MeasurementSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b5354:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b5356:	4640      	mov	r0, r8
   b5358:	eba1 0108 	sub.w	r1, r1, r8
   b535c:	f7ff fd7f 	bl	b4e5e <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5360:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
   b5364:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5368:	60bc      	str	r4, [r7, #8]
    }
   b536a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b536e:	461c      	mov	r4, r3
   b5370:	e7cf      	b.n	b5312 <_ZNSt6vectorI11MeasurementSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5372:	4626      	mov	r6, r4
   b5374:	e7d1      	b.n	b531a <_ZNSt6vectorI11MeasurementSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
   b5376:	bf00      	nop
   b5378:	000b7769 	.word	0x000b7769

000b537c <_Z9StoreDatav>:
void StoreData() {
   b537c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    Measurement data = { beatsPerMinute, millis() };
   b537e:	4b46      	ldr	r3, [pc, #280]	; (b5498 <_Z9StoreDatav+0x11c>)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5380:	4c46      	ldr	r4, [pc, #280]	; (b549c <_Z9StoreDatav+0x120>)
   b5382:	681b      	ldr	r3, [r3, #0]
   b5384:	9300      	str	r3, [sp, #0]
   b5386:	f000 fc2b 	bl	b5be0 <HAL_Timer_Get_Milli_Seconds>
   b538a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   b538e:	4293      	cmp	r3, r2
   b5390:	9001      	str	r0, [sp, #4]
   b5392:	d044      	beq.n	b541e <_Z9StoreDatav+0xa2>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5394:	b123      	cbz	r3, b53a0 <_Z9StoreDatav+0x24>
   b5396:	aa02      	add	r2, sp, #8
   b5398:	e912 0003 	ldmdb	r2, {r0, r1}
   b539c:	e883 0003 	stmia.w	r3, {r0, r1}
	    ++this->_M_impl._M_finish;
   b53a0:	6863      	ldr	r3, [r4, #4]
   b53a2:	3308      	adds	r3, #8
   b53a4:	6063      	str	r3, [r4, #4]
    Serial.println("Data stored locally (offline)... Flashing yellow LED");
   b53a6:	f001 fe7d 	bl	b70a4 <_Z16_fetch_usbserialv>
   b53aa:	493d      	ldr	r1, [pc, #244]	; (b54a0 <_Z9StoreDatav+0x124>)
      typename iterator_traits<_RandomAccessIterator>::difference_type
	__trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
	{
	  if (__pred(__first))
   b53ac:	4d3d      	ldr	r5, [pc, #244]	; (b54a4 <_Z9StoreDatav+0x128>)
   b53ae:	f001 fbae 	bl	b6b0e <_ZN5Print7printlnEPKc>
    flashLED(YELLOW, 1000);
   b53b2:	483d      	ldr	r0, [pc, #244]	; (b54a8 <_Z9StoreDatav+0x12c>)
   b53b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b53b8:	f7ff fe58 	bl	b506c <_Z8flashLEDmi>
    flashLED(YELLOW, 1000);
   b53bc:	483a      	ldr	r0, [pc, #232]	; (b54a8 <_Z9StoreDatav+0x12c>)
   b53be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b53c2:	f7ff fe53 	bl	b506c <_Z8flashLEDmi>
    flashLED(YELLOW, 1000);
   b53c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b53ca:	4837      	ldr	r0, [pc, #220]	; (b54a8 <_Z9StoreDatav+0x12c>)
   b53cc:	f7ff fe4e 	bl	b506c <_Z8flashLEDmi>
   b53d0:	f000 fc06 	bl	b5be0 <HAL_Timer_Get_Milli_Seconds>
      : _M_current(__i) { }
   b53d4:	e9d4 1600 	ldrd	r1, r6, [r4]
   b53d8:	4602      	mov	r2, r0
    { return __lhs.base() - __rhs.base(); }
   b53da:	1a70      	subs	r0, r6, r1
	__trip_count = (__last - __first) >> 2;
   b53dc:	1140      	asrs	r0, r0, #5
      for (; __trip_count > 0; --__trip_count)
   b53de:	2800      	cmp	r0, #0
   b53e0:	460b      	mov	r3, r1
   b53e2:	dd32      	ble.n	b544a <_Z9StoreDatav+0xce>
                           return (currentTime - data.timestamp) > 86400000;
   b53e4:	6849      	ldr	r1, [r1, #4]
   b53e6:	1a51      	subs	r1, r2, r1
	  if (__pred(__first))
   b53e8:	42a9      	cmp	r1, r5
   b53ea:	d804      	bhi.n	b53f6 <_Z9StoreDatav+0x7a>
   b53ec:	68d9      	ldr	r1, [r3, #12]
   b53ee:	1a51      	subs	r1, r2, r1
	    return __first;
	  ++__first;

	  if (__pred(__first))
   b53f0:	42a9      	cmp	r1, r5
   b53f2:	d91a      	bls.n	b542a <_Z9StoreDatav+0xae>
	++_M_current;
   b53f4:	3308      	adds	r3, #8
    _ForwardIterator
    __remove_if(_ForwardIterator __first, _ForwardIterator __last,
		_Predicate __pred)
    {
      __first = std::__find_if(__first, __last, __pred);
      if (__first == __last)
   b53f6:	429e      	cmp	r6, r3
   b53f8:	d034      	beq.n	b5464 <_Z9StoreDatav+0xe8>
	return __first;
      _ForwardIterator __result = __first;
      ++__first;
      for (; __first != __last; ++__first)
	if (!__pred(__first))
   b53fa:	4f2a      	ldr	r7, [pc, #168]	; (b54a4 <_Z9StoreDatav+0x128>)
   b53fc:	f103 0508 	add.w	r5, r3, #8
      for (; __first != __last; ++__first)
   b5400:	42ae      	cmp	r6, r5
   b5402:	d02f      	beq.n	b5464 <_Z9StoreDatav+0xe8>
   b5404:	6869      	ldr	r1, [r5, #4]
   b5406:	1a51      	subs	r1, r2, r1
	if (!__pred(__first))
   b5408:	42b9      	cmp	r1, r7
	  {
	    *__result = _GLIBCXX_MOVE(*__first);
   b540a:	bf98      	it	ls
   b540c:	e9d5 0100 	ldrdls	r0, r1, [r5]
   b5410:	f105 0508 	add.w	r5, r5, #8
   b5414:	bf9c      	itt	ls
   b5416:	e9c3 0100 	strdls	r0, r1, [r3]
   b541a:	3308      	addls	r3, #8
	return *this;
   b541c:	e7f0      	b.n	b5400 <_Z9StoreDatav+0x84>
	  _M_realloc_insert(end(), __x);
   b541e:	466a      	mov	r2, sp
   b5420:	4619      	mov	r1, r3
   b5422:	4620      	mov	r0, r4
   b5424:	f7ff ff56 	bl	b52d4 <_ZNSt6vectorI11MeasurementSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
   b5428:	e7bd      	b.n	b53a6 <_Z9StoreDatav+0x2a>
   b542a:	6959      	ldr	r1, [r3, #20]
   b542c:	1a51      	subs	r1, r2, r1
	    return __first;
	  ++__first;

	  if (__pred(__first))
   b542e:	42a9      	cmp	r1, r5
   b5430:	d901      	bls.n	b5436 <_Z9StoreDatav+0xba>
	++_M_current;
   b5432:	3310      	adds	r3, #16
	    return __first;
   b5434:	e7df      	b.n	b53f6 <_Z9StoreDatav+0x7a>
   b5436:	69df      	ldr	r7, [r3, #28]
   b5438:	1bd7      	subs	r7, r2, r7
	  ++__first;

	  if (__pred(__first))
   b543a:	42af      	cmp	r7, r5
   b543c:	f103 0120 	add.w	r1, r3, #32
   b5440:	d901      	bls.n	b5446 <_Z9StoreDatav+0xca>
   b5442:	3318      	adds	r3, #24
	    return __first;
   b5444:	e7d7      	b.n	b53f6 <_Z9StoreDatav+0x7a>
      for (; __trip_count > 0; --__trip_count)
   b5446:	3801      	subs	r0, #1
   b5448:	e7c9      	b.n	b53de <_Z9StoreDatav+0x62>
    { return __lhs.base() - __rhs.base(); }
   b544a:	1a71      	subs	r1, r6, r1
	  ++__first;
	}

      switch (__last - __first)
   b544c:	2910      	cmp	r1, #16
   b544e:	d01c      	beq.n	b548a <_Z9StoreDatav+0x10e>
   b5450:	2918      	cmp	r1, #24
   b5452:	d014      	beq.n	b547e <_Z9StoreDatav+0x102>
   b5454:	2908      	cmp	r1, #8
   b5456:	d104      	bne.n	b5462 <_Z9StoreDatav+0xe6>
   b5458:	6859      	ldr	r1, [r3, #4]
	  if (__pred(__first))
	    return __first;
	  ++__first;
	  // FALLTHRU
	case 1:
	  if (__pred(__first))
   b545a:	4812      	ldr	r0, [pc, #72]	; (b54a4 <_Z9StoreDatav+0x128>)
   b545c:	1a51      	subs	r1, r2, r1
   b545e:	4281      	cmp	r1, r0
   b5460:	d8c9      	bhi.n	b53f6 <_Z9StoreDatav+0x7a>
void StoreData() {
   b5462:	4633      	mov	r3, r6
      if (__first != __last)
   b5464:	6862      	ldr	r2, [r4, #4]
   b5466:	429a      	cmp	r2, r3
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   b5468:	bf18      	it	ne
   b546a:	6063      	strne	r3, [r4, #4]
   b546c:	f000 fbb8 	bl	b5be0 <HAL_Timer_Get_Milli_Seconds>
    lastMeasurementTime = millis();
   b5470:	4b0e      	ldr	r3, [pc, #56]	; (b54ac <_Z9StoreDatav+0x130>)
   b5472:	6018      	str	r0, [r3, #0]
    currentState = IDLE;
   b5474:	4b0e      	ldr	r3, [pc, #56]	; (b54b0 <_Z9StoreDatav+0x134>)
   b5476:	2200      	movs	r2, #0
   b5478:	701a      	strb	r2, [r3, #0]
}
   b547a:	b003      	add	sp, #12
   b547c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                           return (currentTime - data.timestamp) > 86400000;
   b547e:	6859      	ldr	r1, [r3, #4]
	  if (__pred(__first))
   b5480:	4808      	ldr	r0, [pc, #32]	; (b54a4 <_Z9StoreDatav+0x128>)
   b5482:	1a51      	subs	r1, r2, r1
   b5484:	4281      	cmp	r1, r0
   b5486:	d8b6      	bhi.n	b53f6 <_Z9StoreDatav+0x7a>
	++_M_current;
   b5488:	3308      	adds	r3, #8
   b548a:	6859      	ldr	r1, [r3, #4]
	  if (__pred(__first))
   b548c:	4805      	ldr	r0, [pc, #20]	; (b54a4 <_Z9StoreDatav+0x128>)
   b548e:	1a51      	subs	r1, r2, r1
   b5490:	4281      	cmp	r1, r0
   b5492:	d8b0      	bhi.n	b53f6 <_Z9StoreDatav+0x7a>
   b5494:	3308      	adds	r3, #8
	return *this;
   b5496:	e7df      	b.n	b5458 <_Z9StoreDatav+0xdc>
   b5498:	2003e638 	.word	0x2003e638
   b549c:	2003e640 	.word	0x2003e640
   b54a0:	000b7783 	.word	0x000b7783
   b54a4:	05265c00 	.word	0x05265c00
   b54a8:	00ffff00 	.word	0x00ffff00
   b54ac:	2003e5b8 	.word	0x2003e5b8
   b54b0:	2003e63c 	.word	0x2003e63c

000b54b4 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb>:
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
   b54b4:	b570      	push	{r4, r5, r6, lr}
   b54b6:	4604      	mov	r4, r0
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b54b8:	2000      	movs	r0, #0
    ResultT result(ResultT defaultValue = ResultT()) const {
   b54ba:	460d      	mov	r5, r1
        return (application_thread_current(nullptr) != 0);
   b54bc:	f000 fcc8 	bl	b5e50 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b54c0:	b120      	cbz	r0, b54cc <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x18>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b54c2:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b54c4:	b913      	cbnz	r3, b54cc <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x18>
        spark_process();
   b54c6:	f000 fcef 	bl	b5ea8 <spark_process>
    }
   b54ca:	e7fa      	b.n	b54c2 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0xe>
   b54cc:	7863      	ldrb	r3, [r4, #1]
   b54ce:	f3bf 8f5b 	dmb	ish
   b54d2:	1c66      	adds	r6, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   b54d4:	b90b      	cbnz	r3, b54da <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x26>
        return std::move(defaultValue);
   b54d6:	4628      	mov	r0, r5
    }
   b54d8:	bd70      	pop	{r4, r5, r6, pc}
        return (application_thread_current(nullptr) != 0);
   b54da:	2000      	movs	r0, #0
   b54dc:	f000 fcb8 	bl	b5e50 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b54e0:	b120      	cbz	r0, b54ec <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x38>
   b54e2:	7833      	ldrb	r3, [r6, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b54e4:	b913      	cbnz	r3, b54ec <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x38>
        spark_process();
   b54e6:	f000 fcdf 	bl	b5ea8 <spark_process>
    }
   b54ea:	e7fa      	b.n	b54e2 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x2e>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b54ec:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   b54ee:	2b01      	cmp	r3, #1
   b54f0:	d1f1      	bne.n	b54d6 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x22>
            return result_;
   b54f2:	7b20      	ldrb	r0, [r4, #12]
   b54f4:	e7f0      	b.n	b54d8 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x24>
	...

000b54f8 <_Z8SendDatav>:
void SendData() {
   b54f8:	b530      	push	{r4, r5, lr}
   b54fa:	b089      	sub	sp, #36	; 0x24
    Serial.println("Sending data to server...");
   b54fc:	f001 fdd2 	bl	b70a4 <_Z16_fetch_usbserialv>
   b5500:	492b      	ldr	r1, [pc, #172]	; (b55b0 <_Z8SendDatav+0xb8>)
   b5502:	f001 fb04 	bl	b6b0e <_ZN5Print7printlnEPKc>
    if (Particle.publish("testData", String(beatsPerMinute), PRIVATE)) {
   b5506:	4b2b      	ldr	r3, [pc, #172]	; (b55b4 <_Z8SendDatav+0xbc>)
   b5508:	2106      	movs	r1, #6
   b550a:	ed93 0a00 	vldr	s0, [r3]
   b550e:	a804      	add	r0, sp, #16
   b5510:	f001 fc3d 	bl	b6d8e <_ZN6StringC1Efi>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5514:	4b28      	ldr	r3, [pc, #160]	; (b55b8 <_Z8SendDatav+0xc0>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5516:	9a04      	ldr	r2, [sp, #16]
   b5518:	781b      	ldrb	r3, [r3, #0]
   b551a:	4928      	ldr	r1, [pc, #160]	; (b55bc <_Z8SendDatav+0xc4>)
   b551c:	f88d 3000 	strb.w	r3, [sp]
   b5520:	a802      	add	r0, sp, #8
   b5522:	233c      	movs	r3, #60	; 0x3c
   b5524:	f000 ff34 	bl	b6390 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    explicit Future(ResultT result = ResultT()) :
            FutureBase<ResultT, ContextT>(std::make_shared<detail::FutureImpl<ResultT, ContextT>>(std::move(result))) {
    }

    ResultT result() const {
        return this->p_->result();
   b5528:	9802      	ldr	r0, [sp, #8]
   b552a:	2100      	movs	r1, #0
   b552c:	f7ff ffc2 	bl	b54b4 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b5530:	9c03      	ldr	r4, [sp, #12]
   b5532:	4605      	mov	r5, r0
   b5534:	b17c      	cbz	r4, b5556 <_Z8SendDatav+0x5e>
      if (--_M_use_count == 0)
   b5536:	6863      	ldr	r3, [r4, #4]
   b5538:	3b01      	subs	r3, #1
   b553a:	6063      	str	r3, [r4, #4]
   b553c:	b95b      	cbnz	r3, b5556 <_Z8SendDatav+0x5e>
          _M_dispose();
   b553e:	6823      	ldr	r3, [r4, #0]
   b5540:	4620      	mov	r0, r4
   b5542:	689b      	ldr	r3, [r3, #8]
   b5544:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5546:	68a3      	ldr	r3, [r4, #8]
   b5548:	3b01      	subs	r3, #1
   b554a:	60a3      	str	r3, [r4, #8]
   b554c:	b91b      	cbnz	r3, b5556 <_Z8SendDatav+0x5e>
            _M_destroy();
   b554e:	6823      	ldr	r3, [r4, #0]
   b5550:	4620      	mov	r0, r4
   b5552:	68db      	ldr	r3, [r3, #12]
   b5554:	4798      	blx	r3
   b5556:	a804      	add	r0, sp, #16
   b5558:	f001 fbbc 	bl	b6cd4 <_ZN6StringD1Ev>
   b555c:	4c18      	ldr	r4, [pc, #96]	; (b55c0 <_Z8SendDatav+0xc8>)
   b555e:	b1f5      	cbz	r5, b559e <_Z8SendDatav+0xa6>
        Serial.println("Data sent successfully... Flashing green LED.");
   b5560:	f001 fda0 	bl	b70a4 <_Z16_fetch_usbserialv>
   b5564:	4917      	ldr	r1, [pc, #92]	; (b55c4 <_Z8SendDatav+0xcc>)
   b5566:	f001 fad2 	bl	b6b0e <_ZN5Print7printlnEPKc>
        flashLED(GREEN, 1000);
   b556a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b556e:	f44f 407f 	mov.w	r0, #65280	; 0xff00
   b5572:	f7ff fd7b 	bl	b506c <_Z8flashLEDmi>
        flashLED(GREEN, 1000);
   b5576:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b557a:	f44f 407f 	mov.w	r0, #65280	; 0xff00
   b557e:	f7ff fd75 	bl	b506c <_Z8flashLEDmi>
        flashLED(GREEN, 1000);
   b5582:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5586:	f44f 407f 	mov.w	r0, #65280	; 0xff00
   b558a:	f7ff fd6f 	bl	b506c <_Z8flashLEDmi>
   b558e:	f000 fb27 	bl	b5be0 <HAL_Timer_Get_Milli_Seconds>
    lastMeasurementTime = millis(); // Update last measurement time
   b5592:	4b0d      	ldr	r3, [pc, #52]	; (b55c8 <_Z8SendDatav+0xd0>)
   b5594:	6018      	str	r0, [r3, #0]
    currentState = IDLE; // Return to idle state
   b5596:	2300      	movs	r3, #0
   b5598:	7023      	strb	r3, [r4, #0]
}
   b559a:	b009      	add	sp, #36	; 0x24
   b559c:	bd30      	pop	{r4, r5, pc}
        Serial.println("Failed to send data. Storing locally.");
   b559e:	f001 fd81 	bl	b70a4 <_Z16_fetch_usbserialv>
   b55a2:	490a      	ldr	r1, [pc, #40]	; (b55cc <_Z8SendDatav+0xd4>)
   b55a4:	f001 fab3 	bl	b6b0e <_ZN5Print7printlnEPKc>
        currentState = STORE_DATA;
   b55a8:	2304      	movs	r3, #4
   b55aa:	7023      	strb	r3, [r4, #0]
   b55ac:	e7ef      	b.n	b558e <_Z8SendDatav+0x96>
   b55ae:	bf00      	nop
   b55b0:	000b77b8 	.word	0x000b77b8
   b55b4:	2003e638 	.word	0x2003e638
   b55b8:	2003e634 	.word	0x2003e634
   b55bc:	000b76a6 	.word	0x000b76a6
   b55c0:	2003e63c 	.word	0x2003e63c
   b55c4:	000b77d2 	.word	0x000b77d2
   b55c8:	2003e5b8 	.word	0x2003e5b8
   b55cc:	000b7800 	.word	0x000b7800

000b55d0 <loop>:
void loop(){
   b55d0:	b570      	push	{r4, r5, r6, lr}
  if (!WiFi.ready()) {
   b55d2:	4d32      	ldr	r5, [pc, #200]	; (b569c <loop+0xcc>)
   b55d4:	4628      	mov	r0, r5
   b55d6:	f7ff fc4d 	bl	b4e74 <_ZN5spark9WiFiClass5readyEv>
   b55da:	4603      	mov	r3, r0
   b55dc:	b9d8      	cbnz	r0, b5616 <loop+0x46>
   b55de:	4602      	mov	r2, r0
   b55e0:	4601      	mov	r1, r0
   b55e2:	6868      	ldr	r0, [r5, #4]
   b55e4:	f000 fca8 	bl	b5f38 <network_connect>
        Serial.println("Wi-Fi connected.");
   b55e8:	f001 fd5c 	bl	b70a4 <_Z16_fetch_usbserialv>
   b55ec:	492c      	ldr	r1, [pc, #176]	; (b56a0 <loop+0xd0>)
   b55ee:	f001 fa8e 	bl	b6b0e <_ZN5Print7printlnEPKc>
   b55f2:	f000 faf5 	bl	b5be0 <HAL_Timer_Get_Milli_Seconds>
        while (!WiFi.ready() && (millis() - wifiTimeout) < 5000) {
   b55f6:	f241 3687 	movw	r6, #4999	; 0x1387
   b55fa:	4604      	mov	r4, r0
   b55fc:	4628      	mov	r0, r5
   b55fe:	f7ff fc39 	bl	b4e74 <_ZN5spark9WiFiClass5readyEv>
   b5602:	b940      	cbnz	r0, b5616 <loop+0x46>
   b5604:	f000 faec 	bl	b5be0 <HAL_Timer_Get_Milli_Seconds>
   b5608:	1b00      	subs	r0, r0, r4
   b560a:	42b0      	cmp	r0, r6
   b560c:	d803      	bhi.n	b5616 <loop+0x46>
            delay(100);
   b560e:	2064      	movs	r0, #100	; 0x64
   b5610:	f000 fd42 	bl	b6098 <delay>
        while (!WiFi.ready() && (millis() - wifiTimeout) < 5000) {
   b5614:	e7f2      	b.n	b55fc <loop+0x2c>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5616:	f000 fc57 	bl	b5ec8 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   b561a:	4603      	mov	r3, r0
   b561c:	bb00      	cbnz	r0, b5660 <loop+0x90>
        spark_set_connection_property(SPARK_CLOUD_BIND_NETWORK_INTERFACE, static_cast<network_interface_t>(network), nullptr, nullptr);
   b561e:	4921      	ldr	r1, [pc, #132]	; (b56a4 <loop+0xd4>)
   b5620:	4d21      	ldr	r5, [pc, #132]	; (b56a8 <loop+0xd8>)
   b5622:	6849      	ldr	r1, [r1, #4]
   b5624:	4602      	mov	r2, r0
   b5626:	2006      	movs	r0, #6
   b5628:	f000 fc76 	bl	b5f18 <spark_set_connection_property>
        spark_cloud_flag_connect();
   b562c:	f000 fc44 	bl	b5eb8 <spark_cloud_flag_connect>
        Serial.println("Particle Cloud connected.");
   b5630:	f001 fd38 	bl	b70a4 <_Z16_fetch_usbserialv>
   b5634:	491d      	ldr	r1, [pc, #116]	; (b56ac <loop+0xdc>)
   b5636:	f001 fa6a 	bl	b6b0e <_ZN5Print7printlnEPKc>
   b563a:	f000 fad1 	bl	b5be0 <HAL_Timer_Get_Milli_Seconds>
        while (!Particle.connected() && (millis() - particleTimeout) < 5000) {
   b563e:	f241 3687 	movw	r6, #4999	; 0x1387
   b5642:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5644:	f000 fc40 	bl	b5ec8 <spark_cloud_flag_connected>
   b5648:	b950      	cbnz	r0, b5660 <loop+0x90>
   b564a:	f000 fac9 	bl	b5be0 <HAL_Timer_Get_Milli_Seconds>
   b564e:	1b00      	subs	r0, r0, r4
   b5650:	42b0      	cmp	r0, r6
   b5652:	d805      	bhi.n	b5660 <loop+0x90>
		return HAL_Timer_Get_Milli_Seconds();
   b5654:	f000 fac4 	bl	b5be0 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b5658:	6028      	str	r0, [r5, #0]
            return spark_process();
   b565a:	f000 fc25 	bl	b5ea8 <spark_process>
   b565e:	e7f1      	b.n	b5644 <loop+0x74>
  switch (currentState) {
   b5660:	4b13      	ldr	r3, [pc, #76]	; (b56b0 <loop+0xe0>)
   b5662:	781b      	ldrb	r3, [r3, #0]
   b5664:	2b04      	cmp	r3, #4
   b5666:	d818      	bhi.n	b569a <loop+0xca>
   b5668:	e8df f003 	tbb	[pc, r3]
   b566c:	0f0b0703 	.word	0x0f0b0703
   b5670:	13          	.byte	0x13
   b5671:	00          	.byte	0x00
}
   b5672:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            IdleState();
   b5676:	f7ff bccb 	b.w	b5010 <_Z9IdleStatev>
}
   b567a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            RequestMeasurement();
   b567e:	f7ff bd07 	b.w	b5090 <_Z18RequestMeasurementv>
}
   b5682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ProcessMeasurement();
   b5686:	f7ff bce5 	b.w	b5054 <_Z18ProcessMeasurementv>
}
   b568a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            SendData();
   b568e:	f7ff bf33 	b.w	b54f8 <_Z8SendDatav>
}
   b5692:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            StoreData();
   b5696:	f7ff be71 	b.w	b537c <_Z9StoreDatav>
}
   b569a:	bd70      	pop	{r4, r5, r6, pc}
   b569c:	2003e720 	.word	0x2003e720
   b56a0:	000b760c 	.word	0x000b760c
   b56a4:	2003e69c 	.word	0x2003e69c
   b56a8:	2003e730 	.word	0x2003e730
   b56ac:	000b7649 	.word	0x000b7649
   b56b0:	2003e63c 	.word	0x2003e63c

000b56b4 <_GLOBAL__sub_I_SystemMode>:
        val_(val) {
   b56b4:	4b0b      	ldr	r3, [pc, #44]	; (b56e4 <_GLOBAL__sub_I_SystemMode+0x30>)
   b56b6:	2201      	movs	r2, #1
}
   b56b8:	b510      	push	{r4, lr}
   b56ba:	701a      	strb	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b56bc:	4b0a      	ldr	r3, [pc, #40]	; (b56e8 <_GLOBAL__sub_I_SystemMode+0x34>)
   b56be:	2400      	movs	r4, #0
    SleepResult() {}
   b56c0:	f1a2 1201 	sub.w	r2, r2, #65537	; 0x10001
              error_(SYSTEM_ERROR_NONE) {
   b56c4:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
   b56c8:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b56ca:	2002      	movs	r0, #2
   b56cc:	f000 fbb0 	bl	b5e30 <set_system_mode>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b56d0:	4b06      	ldr	r3, [pc, #24]	; (b56ec <_GLOBAL__sub_I_SystemMode+0x38>)
MAX30105 particleSensor;
   b56d2:	4807      	ldr	r0, [pc, #28]	; (b56f0 <_GLOBAL__sub_I_SystemMode+0x3c>)
   b56d4:	609c      	str	r4, [r3, #8]
   b56d6:	e9c3 4400 	strd	r4, r4, [r3]
}
   b56da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
MAX30105 particleSensor;
   b56de:	f000 b809 	b.w	b56f4 <_ZN8MAX30105C1Ev>
   b56e2:	bf00      	nop
   b56e4:	2003e634 	.word	0x2003e634
   b56e8:	2003e628 	.word	0x2003e628
   b56ec:	2003e640 	.word	0x2003e640
   b56f0:	2003e64c 	.word	0x2003e64c

000b56f4 <_ZN8MAX30105C1Ev>:

static const uint8_t MAX_30105_EXPECTEDPARTID = 0x15;

MAX30105::MAX30105() {
  // Constructor
}
   b56f4:	4770      	bx	lr

000b56f6 <_ZN8MAX3010513readRegister8Ehh>:
}

//
// Low-level I2C Communication
//
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
   b56f6:	b570      	push	{r4, r5, r6, lr}
   b56f8:	4604      	mov	r4, r0
  _i2cPort->beginTransmission(address);
   b56fa:	6800      	ldr	r0, [r0, #0]
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
   b56fc:	4616      	mov	r6, r2
   b56fe:	460d      	mov	r5, r1
  _i2cPort->beginTransmission(address);
   b5700:	f001 f870 	bl	b67e4 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
   b5704:	6820      	ldr	r0, [r4, #0]
   b5706:	6803      	ldr	r3, [r0, #0]
   b5708:	4631      	mov	r1, r6
   b570a:	689b      	ldr	r3, [r3, #8]
   b570c:	4798      	blx	r3
  _i2cPort->endTransmission(false);
   b570e:	2100      	movs	r1, #0
   b5710:	6820      	ldr	r0, [r4, #0]
   b5712:	f001 f86e 	bl	b67f2 <_ZN7TwoWire15endTransmissionEh>

  _i2cPort->requestFrom((uint8_t)address, (uint8_t)1); // Request 1 byte
   b5716:	6820      	ldr	r0, [r4, #0]
   b5718:	2201      	movs	r2, #1
   b571a:	4629      	mov	r1, r5
   b571c:	f001 f85f 	bl	b67de <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   b5720:	6820      	ldr	r0, [r4, #0]
   b5722:	6803      	ldr	r3, [r0, #0]
   b5724:	691b      	ldr	r3, [r3, #16]
   b5726:	4798      	blx	r3
   b5728:	b120      	cbz	r0, b5734 <_ZN8MAX3010513readRegister8Ehh+0x3e>
  {
    return(_i2cPort->read());
   b572a:	6820      	ldr	r0, [r4, #0]
   b572c:	6803      	ldr	r3, [r0, #0]
   b572e:	695b      	ldr	r3, [r3, #20]
   b5730:	4798      	blx	r3
   b5732:	b2c0      	uxtb	r0, r0
  }

  return (0); //Fail

}
   b5734:	bd70      	pop	{r4, r5, r6, pc}

000b5736 <_ZN8MAX3010515getWritePointerEv>:
  return (readRegister8(_i2caddr, MAX30105_FIFOWRITEPTR));
   b5736:	7901      	ldrb	r1, [r0, #4]
   b5738:	2204      	movs	r2, #4
   b573a:	f7ff bfdc 	b.w	b56f6 <_ZN8MAX3010513readRegister8Ehh>

000b573e <_ZN8MAX3010514getReadPointerEv>:
  return (readRegister8(_i2caddr, MAX30105_FIFOREADPTR));
   b573e:	7901      	ldrb	r1, [r0, #4]
   b5740:	2206      	movs	r2, #6
   b5742:	f7ff bfd8 	b.w	b56f6 <_ZN8MAX3010513readRegister8Ehh>

000b5746 <_ZN8MAX301055checkEv>:
{
   b5746:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b574a:	4604      	mov	r4, r0
  byte readPointer = getReadPointer();
   b574c:	f7ff fff7 	bl	b573e <_ZN8MAX3010514getReadPointerEv>
   b5750:	4605      	mov	r5, r0
  byte writePointer = getWritePointer();
   b5752:	4620      	mov	r0, r4
   b5754:	f7ff ffef 	bl	b5736 <_ZN8MAX3010515getWritePointerEv>
  if (readPointer != writePointer)
   b5758:	4285      	cmp	r5, r0
   b575a:	f000 808e 	beq.w	b587a <_ZN8MAX301055checkEv+0x134>
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
   b575e:	1b45      	subs	r5, r0, r5
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
   b5760:	f04f 0157 	mov.w	r1, #87	; 0x57
   b5764:	6820      	ldr	r0, [r4, #0]
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   b5766:	7966      	ldrb	r6, [r4, #5]
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
   b5768:	bf48      	it	mi
   b576a:	3520      	addmi	r5, #32
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
   b576c:	f001 f83e 	bl	b67ec <_ZN7TwoWire17beginTransmissionEi>
    _i2cPort->write(MAX30105_FIFODATA);
   b5770:	6820      	ldr	r0, [r4, #0]
   b5772:	6803      	ldr	r3, [r0, #0]
   b5774:	2107      	movs	r1, #7
   b5776:	689b      	ldr	r3, [r3, #8]
   b5778:	4798      	blx	r3
    _i2cPort->endTransmission();
   b577a:	6820      	ldr	r0, [r4, #0]
   b577c:	f001 f83d 	bl	b67fa <_ZN7TwoWire15endTransmissionEv>
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   b5780:	436e      	muls	r6, r5
   b5782:	eb06 0646 	add.w	r6, r6, r6, lsl #1
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   b5786:	f04f 0820 	mov.w	r8, #32
        temp[3] = 0;
   b578a:	f04f 0900 	mov.w	r9, #0
    while (bytesLeftToRead > 0)
   b578e:	2e00      	cmp	r6, #0
   b5790:	dd74      	ble.n	b587c <_ZN8MAX301055checkEv+0x136>
      if (toGet > I2C_BUFFER_LENGTH)
   b5792:	2e20      	cmp	r6, #32
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   b5794:	bfc8      	it	gt
   b5796:	7962      	ldrbgt	r2, [r4, #5]
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
   b5798:	6820      	ldr	r0, [r4, #0]
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   b579a:	bfc9      	itett	gt
   b579c:	eb02 0242 	addgt.w	r2, r2, r2, lsl #1
   b57a0:	4637      	movle	r7, r6
   b57a2:	fbb8 f7f2 	udivgt	r7, r8, r2
   b57a6:	4357      	mulgt	r7, r2
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
   b57a8:	463a      	mov	r2, r7
   b57aa:	2157      	movs	r1, #87	; 0x57
      bytesLeftToRead -= toGet;
   b57ac:	1bf6      	subs	r6, r6, r7
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
   b57ae:	f001 f816 	bl	b67de <_ZN7TwoWire11requestFromEhj>
      while (toGet > 0)
   b57b2:	2f00      	cmp	r7, #0
   b57b4:	ddeb      	ble.n	b578e <_ZN8MAX301055checkEv+0x48>
        sense.head++; //Advance the head of the storage struct
   b57b6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
        temp[2] = _i2cPort->read();
   b57ba:	6820      	ldr	r0, [r4, #0]
        temp[3] = 0;
   b57bc:	f88d 9007 	strb.w	r9, [sp, #7]
        sense.head++; //Advance the head of the storage struct
   b57c0:	3301      	adds	r3, #1
        sense.head %= STORAGE_SIZE; //Wrap condition
   b57c2:	f003 0303 	and.w	r3, r3, #3
   b57c6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        temp[2] = _i2cPort->read();
   b57ca:	6803      	ldr	r3, [r0, #0]
   b57cc:	695b      	ldr	r3, [r3, #20]
   b57ce:	4798      	blx	r3
   b57d0:	f88d 0006 	strb.w	r0, [sp, #6]
        temp[1] = _i2cPort->read();
   b57d4:	6820      	ldr	r0, [r4, #0]
   b57d6:	6803      	ldr	r3, [r0, #0]
   b57d8:	695b      	ldr	r3, [r3, #20]
   b57da:	4798      	blx	r3
   b57dc:	f88d 0005 	strb.w	r0, [sp, #5]
        temp[0] = _i2cPort->read();
   b57e0:	6820      	ldr	r0, [r4, #0]
   b57e2:	6803      	ldr	r3, [r0, #0]
   b57e4:	695b      	ldr	r3, [r3, #20]
   b57e6:	4798      	blx	r3
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   b57e8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
        temp[0] = _i2cPort->read();
   b57ec:	f88d 0004 	strb.w	r0, [sp, #4]
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b57f0:	9a01      	ldr	r2, [sp, #4]
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   b57f2:	3302      	adds	r3, #2
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b57f4:	f3c2 0211 	ubfx	r2, r2, #0, #18
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   b57f8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        if (activeLEDs > 1)
   b57fc:	7963      	ldrb	r3, [r4, #5]
   b57fe:	2b01      	cmp	r3, #1
   b5800:	d919      	bls.n	b5836 <_ZN8MAX301055checkEv+0xf0>
          temp[2] = _i2cPort->read();
   b5802:	6820      	ldr	r0, [r4, #0]
   b5804:	6803      	ldr	r3, [r0, #0]
   b5806:	695b      	ldr	r3, [r3, #20]
   b5808:	4798      	blx	r3
   b580a:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
   b580e:	6820      	ldr	r0, [r4, #0]
   b5810:	6803      	ldr	r3, [r0, #0]
   b5812:	695b      	ldr	r3, [r3, #20]
   b5814:	4798      	blx	r3
   b5816:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
   b581a:	6820      	ldr	r0, [r4, #0]
   b581c:	6803      	ldr	r3, [r0, #0]
   b581e:	695b      	ldr	r3, [r3, #20]
   b5820:	4798      	blx	r3
		  sense.IR[sense.head] = tempLong;
   b5822:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
          temp[0] = _i2cPort->read();
   b5826:	f88d 0004 	strb.w	r0, [sp, #4]
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b582a:	9a01      	ldr	r2, [sp, #4]
		  sense.IR[sense.head] = tempLong;
   b582c:	3306      	adds	r3, #6
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b582e:	f3c2 0211 	ubfx	r2, r2, #0, #18
		  sense.IR[sense.head] = tempLong;
   b5832:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        if (activeLEDs > 2)
   b5836:	7963      	ldrb	r3, [r4, #5]
   b5838:	2b02      	cmp	r3, #2
   b583a:	d919      	bls.n	b5870 <_ZN8MAX301055checkEv+0x12a>
          temp[2] = _i2cPort->read();
   b583c:	6820      	ldr	r0, [r4, #0]
   b583e:	6803      	ldr	r3, [r0, #0]
   b5840:	695b      	ldr	r3, [r3, #20]
   b5842:	4798      	blx	r3
   b5844:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
   b5848:	6820      	ldr	r0, [r4, #0]
   b584a:	6803      	ldr	r3, [r0, #0]
   b584c:	695b      	ldr	r3, [r3, #20]
   b584e:	4798      	blx	r3
   b5850:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
   b5854:	6820      	ldr	r0, [r4, #0]
   b5856:	6803      	ldr	r3, [r0, #0]
   b5858:	695b      	ldr	r3, [r3, #20]
   b585a:	4798      	blx	r3
          sense.green[sense.head] = tempLong;
   b585c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
          temp[0] = _i2cPort->read();
   b5860:	f88d 0004 	strb.w	r0, [sp, #4]
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b5864:	9a01      	ldr	r2, [sp, #4]
          sense.green[sense.head] = tempLong;
   b5866:	330a      	adds	r3, #10
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b5868:	f3c2 0211 	ubfx	r2, r2, #0, #18
          sense.green[sense.head] = tempLong;
   b586c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        toGet -= activeLEDs * 3;
   b5870:	7963      	ldrb	r3, [r4, #5]
   b5872:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   b5876:	441f      	add	r7, r3
      while (toGet > 0)
   b5878:	e79b      	b.n	b57b2 <_ZN8MAX301055checkEv+0x6c>
  int numberOfSamples = 0;
   b587a:	2500      	movs	r5, #0
}
   b587c:	b2a8      	uxth	r0, r5
   b587e:	b003      	add	sp, #12
   b5880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5884 <_ZN8MAX301059safeCheckEh>:
{
   b5884:	b570      	push	{r4, r5, r6, lr}
   b5886:	4605      	mov	r5, r0
   b5888:	460e      	mov	r6, r1
   b588a:	f000 f9a9 	bl	b5be0 <HAL_Timer_Get_Milli_Seconds>
   b588e:	4604      	mov	r4, r0
   b5890:	f000 f9a6 	bl	b5be0 <HAL_Timer_Get_Milli_Seconds>
	if(millis() - markTime > maxTimeToCheck) return(false);
   b5894:	1b00      	subs	r0, r0, r4
   b5896:	42b0      	cmp	r0, r6
   b5898:	d808      	bhi.n	b58ac <_ZN8MAX301059safeCheckEh+0x28>
	if(check() == true) //We found new data!
   b589a:	4628      	mov	r0, r5
   b589c:	f7ff ff53 	bl	b5746 <_ZN8MAX301055checkEv>
   b58a0:	2801      	cmp	r0, #1
   b58a2:	d004      	beq.n	b58ae <_ZN8MAX301059safeCheckEh+0x2a>
	delay(1);
   b58a4:	2001      	movs	r0, #1
   b58a6:	f000 fbf7 	bl	b6098 <delay>
	if(millis() - markTime > maxTimeToCheck) return(false);
   b58aa:	e7f1      	b.n	b5890 <_ZN8MAX301059safeCheckEh+0xc>
   b58ac:	2000      	movs	r0, #0
}
   b58ae:	bd70      	pop	{r4, r5, r6, pc}

000b58b0 <_ZN8MAX301055getIREv>:
{
   b58b0:	b510      	push	{r4, lr}
  if(safeCheck(250))
   b58b2:	21fa      	movs	r1, #250	; 0xfa
{
   b58b4:	4604      	mov	r4, r0
  if(safeCheck(250))
   b58b6:	f7ff ffe5 	bl	b5884 <_ZN8MAX301059safeCheckEh>
   b58ba:	b120      	cbz	r0, b58c6 <_ZN8MAX301055getIREv+0x16>
    return (sense.IR[sense.head]);
   b58bc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   b58c0:	3306      	adds	r3, #6
   b58c2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
}
   b58c6:	bd10      	pop	{r4, pc}

000b58c8 <_ZN8MAX3010510readPartIDEv>:
  return readRegister8(_i2caddr, MAX30105_PARTID);
   b58c8:	7901      	ldrb	r1, [r0, #4]
   b58ca:	22ff      	movs	r2, #255	; 0xff
   b58cc:	f7ff bf13 	b.w	b56f6 <_ZN8MAX3010513readRegister8Ehh>

000b58d0 <_ZN8MAX3010514readRevisionIDEv>:
void MAX30105::readRevisionID() {
   b58d0:	b510      	push	{r4, lr}
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
   b58d2:	22fe      	movs	r2, #254	; 0xfe
   b58d4:	7901      	ldrb	r1, [r0, #4]
void MAX30105::readRevisionID() {
   b58d6:	4604      	mov	r4, r0
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
   b58d8:	f7ff ff0d 	bl	b56f6 <_ZN8MAX3010513readRegister8Ehh>
   b58dc:	71a0      	strb	r0, [r4, #6]
}
   b58de:	bd10      	pop	{r4, pc}

000b58e0 <_ZN8MAX301055beginER7TwoWiremh>:
boolean MAX30105::begin(TwoWire &wirePort, uint32_t i2cSpeed, uint8_t i2caddr) {
   b58e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b58e2:	4604      	mov	r4, r0
   b58e4:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   b58e6:	6021      	str	r1, [r4, #0]
boolean MAX30105::begin(TwoWire &wirePort, uint32_t i2cSpeed, uint8_t i2caddr) {
   b58e8:	461d      	mov	r5, r3
   b58ea:	9201      	str	r2, [sp, #4]
  _i2cPort->begin();
   b58ec:	f000 ff48 	bl	b6780 <_ZN7TwoWire5beginEv>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b58f0:	9901      	ldr	r1, [sp, #4]
   b58f2:	6820      	ldr	r0, [r4, #0]
   b58f4:	f000 ff40 	bl	b6778 <_ZN7TwoWire8setSpeedEm>
  _i2caddr = i2caddr;
   b58f8:	7125      	strb	r5, [r4, #4]
  if (readPartID() != MAX_30105_EXPECTEDPARTID) {
   b58fa:	4620      	mov	r0, r4
   b58fc:	f7ff ffe4 	bl	b58c8 <_ZN8MAX3010510readPartIDEv>
   b5900:	2815      	cmp	r0, #21
   b5902:	d105      	bne.n	b5910 <_ZN8MAX301055beginER7TwoWiremh+0x30>
  readRevisionID();
   b5904:	4620      	mov	r0, r4
   b5906:	f7ff ffe3 	bl	b58d0 <_ZN8MAX3010514readRevisionIDEv>
  return true;
   b590a:	2001      	movs	r0, #1
}
   b590c:	b003      	add	sp, #12
   b590e:	bd30      	pop	{r4, r5, pc}
    return false;
   b5910:	2000      	movs	r0, #0
   b5912:	e7fb      	b.n	b590c <_ZN8MAX301055beginER7TwoWiremh+0x2c>

000b5914 <_ZN8MAX3010514writeRegister8Ehhh>:

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
   b5914:	b570      	push	{r4, r5, r6, lr}
   b5916:	4604      	mov	r4, r0
  _i2cPort->beginTransmission(address);
   b5918:	6800      	ldr	r0, [r0, #0]
void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
   b591a:	4616      	mov	r6, r2
   b591c:	461d      	mov	r5, r3
  _i2cPort->beginTransmission(address);
   b591e:	f000 ff61 	bl	b67e4 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
   b5922:	6820      	ldr	r0, [r4, #0]
   b5924:	6803      	ldr	r3, [r0, #0]
   b5926:	4631      	mov	r1, r6
   b5928:	689b      	ldr	r3, [r3, #8]
   b592a:	4798      	blx	r3
  _i2cPort->write(value);
   b592c:	6820      	ldr	r0, [r4, #0]
   b592e:	6803      	ldr	r3, [r0, #0]
   b5930:	4629      	mov	r1, r5
   b5932:	689b      	ldr	r3, [r3, #8]
   b5934:	4798      	blx	r3
  _i2cPort->endTransmission();
   b5936:	6820      	ldr	r0, [r4, #0]
   b5938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _i2cPort->endTransmission();
   b593c:	f000 bf5d 	b.w	b67fa <_ZN7TwoWire15endTransmissionEv>

000b5940 <_ZN8MAX3010520setPulseAmplitudeRedEh>:
void MAX30105::setPulseAmplitudeRed(uint8_t amplitude) {
   b5940:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED1_PULSEAMP, amplitude);
   b5942:	220c      	movs	r2, #12
   b5944:	7901      	ldrb	r1, [r0, #4]
   b5946:	f7ff bfe5 	b.w	b5914 <_ZN8MAX3010514writeRegister8Ehhh>

000b594a <_ZN8MAX3010519setPulseAmplitudeIREh>:
void MAX30105::setPulseAmplitudeIR(uint8_t amplitude) {
   b594a:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED2_PULSEAMP, amplitude);
   b594c:	220d      	movs	r2, #13
   b594e:	7901      	ldrb	r1, [r0, #4]
   b5950:	f7ff bfe0 	b.w	b5914 <_ZN8MAX3010514writeRegister8Ehhh>

000b5954 <_ZN8MAX3010522setPulseAmplitudeGreenEh>:
void MAX30105::setPulseAmplitudeGreen(uint8_t amplitude) {
   b5954:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED3_PULSEAMP, amplitude);
   b5956:	220e      	movs	r2, #14
   b5958:	7901      	ldrb	r1, [r0, #4]
   b595a:	f7ff bfdb 	b.w	b5914 <_ZN8MAX3010514writeRegister8Ehhh>

000b595e <_ZN8MAX3010526setPulseAmplitudeProximityEh>:
void MAX30105::setPulseAmplitudeProximity(uint8_t amplitude) {
   b595e:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED_PROX_AMP, amplitude);
   b5960:	2210      	movs	r2, #16
   b5962:	7901      	ldrb	r1, [r0, #4]
   b5964:	f7ff bfd6 	b.w	b5914 <_ZN8MAX3010514writeRegister8Ehhh>

000b5968 <_ZN8MAX301059clearFIFOEv>:
void MAX30105::clearFIFO(void) {
   b5968:	b510      	push	{r4, lr}
   b596a:	4604      	mov	r4, r0
  writeRegister8(_i2caddr, MAX30105_FIFOWRITEPTR, 0);
   b596c:	7901      	ldrb	r1, [r0, #4]
   b596e:	2300      	movs	r3, #0
   b5970:	2204      	movs	r2, #4
   b5972:	f7ff ffcf 	bl	b5914 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOOVERFLOW, 0);
   b5976:	7921      	ldrb	r1, [r4, #4]
   b5978:	4620      	mov	r0, r4
   b597a:	2300      	movs	r3, #0
   b597c:	2205      	movs	r2, #5
   b597e:	f7ff ffc9 	bl	b5914 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
   b5982:	7921      	ldrb	r1, [r4, #4]
   b5984:	4620      	mov	r0, r4
   b5986:	2300      	movs	r3, #0
}
   b5988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
   b598c:	2206      	movs	r2, #6
   b598e:	f7ff bfc1 	b.w	b5914 <_ZN8MAX3010514writeRegister8Ehhh>

000b5992 <_ZN8MAX301057bitMaskEhhh>:
{
   b5992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5996:	460d      	mov	r5, r1
   b5998:	4617      	mov	r7, r2
  uint8_t originalContents = readRegister8(_i2caddr, reg);
   b599a:	460a      	mov	r2, r1
   b599c:	7901      	ldrb	r1, [r0, #4]
{
   b599e:	4604      	mov	r4, r0
   b59a0:	461e      	mov	r6, r3
  uint8_t originalContents = readRegister8(_i2caddr, reg);
   b59a2:	f7ff fea8 	bl	b56f6 <_ZN8MAX3010513readRegister8Ehh>
  originalContents = originalContents & mask;
   b59a6:	4038      	ands	r0, r7
  writeRegister8(_i2caddr, reg, originalContents | thing);
   b59a8:	ea46 0300 	orr.w	r3, r6, r0
   b59ac:	7921      	ldrb	r1, [r4, #4]
   b59ae:	462a      	mov	r2, r5
   b59b0:	4620      	mov	r0, r4
}
   b59b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  writeRegister8(_i2caddr, reg, originalContents | thing);
   b59b6:	f7ff bfad 	b.w	b5914 <_ZN8MAX3010514writeRegister8Ehhh>

000b59ba <_ZN8MAX301059softResetEv>:
void MAX30105::softReset(void) {
   b59ba:	b538      	push	{r3, r4, r5, lr}
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   b59bc:	22bf      	movs	r2, #191	; 0xbf
   b59be:	2340      	movs	r3, #64	; 0x40
   b59c0:	2109      	movs	r1, #9
void MAX30105::softReset(void) {
   b59c2:	4604      	mov	r4, r0
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   b59c4:	f7ff ffe5 	bl	b5992 <_ZN8MAX301057bitMaskEhhh>
   b59c8:	f000 f90a 	bl	b5be0 <HAL_Timer_Get_Milli_Seconds>
   b59cc:	4605      	mov	r5, r0
   b59ce:	f000 f907 	bl	b5be0 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < 100)
   b59d2:	1b40      	subs	r0, r0, r5
   b59d4:	2863      	cmp	r0, #99	; 0x63
   b59d6:	d80a      	bhi.n	b59ee <_ZN8MAX301059softResetEv+0x34>
    uint8_t response = readRegister8(_i2caddr, MAX30105_MODECONFIG);
   b59d8:	7921      	ldrb	r1, [r4, #4]
   b59da:	2209      	movs	r2, #9
   b59dc:	4620      	mov	r0, r4
   b59de:	f7ff fe8a 	bl	b56f6 <_ZN8MAX3010513readRegister8Ehh>
    if ((response & MAX30105_RESET) == 0) break; //We're done!
   b59e2:	0643      	lsls	r3, r0, #25
   b59e4:	d503      	bpl.n	b59ee <_ZN8MAX301059softResetEv+0x34>
    delay(1); //Let's not over burden the I2C bus
   b59e6:	2001      	movs	r0, #1
   b59e8:	f000 fb56 	bl	b6098 <delay>
  while (millis() - startTime < 100)
   b59ec:	e7ef      	b.n	b59ce <_ZN8MAX301059softResetEv+0x14>
}
   b59ee:	bd38      	pop	{r3, r4, r5, pc}

000b59f0 <_ZN8MAX3010510setLEDModeEh>:
void MAX30105::setLEDMode(uint8_t mode) {
   b59f0:	460b      	mov	r3, r1
  bitMask(MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);
   b59f2:	22f8      	movs	r2, #248	; 0xf8
   b59f4:	2109      	movs	r1, #9
   b59f6:	f7ff bfcc 	b.w	b5992 <_ZN8MAX301057bitMaskEhhh>

000b59fa <_ZN8MAX3010511setADCRangeEh>:
void MAX30105::setADCRange(uint8_t adcRange) {
   b59fa:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);
   b59fc:	229f      	movs	r2, #159	; 0x9f
   b59fe:	210a      	movs	r1, #10
   b5a00:	f7ff bfc7 	b.w	b5992 <_ZN8MAX301057bitMaskEhhh>

000b5a04 <_ZN8MAX3010513setSampleRateEh>:
void MAX30105::setSampleRate(uint8_t sampleRate) {
   b5a04:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);
   b5a06:	22e3      	movs	r2, #227	; 0xe3
   b5a08:	210a      	movs	r1, #10
   b5a0a:	f7ff bfc2 	b.w	b5992 <_ZN8MAX301057bitMaskEhhh>

000b5a0e <_ZN8MAX3010513setPulseWidthEh>:
void MAX30105::setPulseWidth(uint8_t pulseWidth) {
   b5a0e:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);
   b5a10:	22fc      	movs	r2, #252	; 0xfc
   b5a12:	210a      	movs	r1, #10
   b5a14:	f7ff bfbd 	b.w	b5992 <_ZN8MAX301057bitMaskEhhh>

000b5a18 <_ZN8MAX3010510enableSlotEhh>:
  switch (slotNumber) {
   b5a18:	3901      	subs	r1, #1
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {
   b5a1a:	4613      	mov	r3, r2
   b5a1c:	2903      	cmp	r1, #3
   b5a1e:	d814      	bhi.n	b5a4a <_ZN8MAX3010510enableSlotEhh+0x32>
   b5a20:	e8df f001 	tbb	[pc, r1]
   b5a24:	0e0b0602 	.word	0x0e0b0602
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
   b5a28:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   b5a2a:	2111      	movs	r1, #17
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
   b5a2c:	f7ff bfb1 	b.w	b5992 <_ZN8MAX301057bitMaskEhhh>
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   b5a30:	011b      	lsls	r3, r3, #4
   b5a32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   b5a36:	228f      	movs	r2, #143	; 0x8f
   b5a38:	e7f7      	b.n	b5a2a <_ZN8MAX3010510enableSlotEhh+0x12>
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
   b5a3a:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
   b5a3c:	2112      	movs	r1, #18
   b5a3e:	e7f5      	b.n	b5a2c <_ZN8MAX3010510enableSlotEhh+0x14>
   b5a40:	011b      	lsls	r3, r3, #4
   b5a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   b5a46:	228f      	movs	r2, #143	; 0x8f
   b5a48:	e7f8      	b.n	b5a3c <_ZN8MAX3010510enableSlotEhh+0x24>
}
   b5a4a:	4770      	bx	lr

000b5a4c <_ZN8MAX3010514setFIFOAverageEh>:
void MAX30105::setFIFOAverage(uint8_t numberOfSamples) {
   b5a4c:	460b      	mov	r3, r1
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
   b5a4e:	221f      	movs	r2, #31
   b5a50:	2108      	movs	r1, #8
   b5a52:	f7ff bf9e 	b.w	b5992 <_ZN8MAX301057bitMaskEhhh>

000b5a56 <_ZN8MAX3010518enableFIFORolloverEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);
   b5a56:	2310      	movs	r3, #16
   b5a58:	22ef      	movs	r2, #239	; 0xef
   b5a5a:	2108      	movs	r1, #8
   b5a5c:	f7ff bf99 	b.w	b5992 <_ZN8MAX301057bitMaskEhhh>

000b5a60 <_ZN8MAX301055setupEhhhiii>:
void MAX30105::setup(byte powerLevel, byte sampleAverage, byte ledMode, int sampleRate, int pulseWidth, int adcRange) {
   b5a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5a64:	4615      	mov	r5, r2
   b5a66:	e9dd 7908 	ldrd	r7, r9, [sp, #32]
   b5a6a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   b5a6e:	4604      	mov	r4, r0
   b5a70:	4688      	mov	r8, r1
   b5a72:	461e      	mov	r6, r3
  softReset(); //Reset all configuration, threshold, and data registers to POR values
   b5a74:	f7ff ffa1 	bl	b59ba <_ZN8MAX301059softResetEv>
  if (sampleAverage == 1) setFIFOAverage(MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
   b5a78:	2d01      	cmp	r5, #1
   b5a7a:	d149      	bne.n	b5b10 <_ZN8MAX301055setupEhhhiii+0xb0>
   b5a7c:	2100      	movs	r1, #0
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
   b5a7e:	4620      	mov	r0, r4
   b5a80:	f7ff ffe4 	bl	b5a4c <_ZN8MAX3010514setFIFOAverageEh>
  enableFIFORollover(); //Allow FIFO to wrap/roll over
   b5a84:	4620      	mov	r0, r4
   b5a86:	f7ff ffe6 	bl	b5a56 <_ZN8MAX3010518enableFIFORolloverEv>
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
   b5a8a:	2e03      	cmp	r6, #3
   b5a8c:	d154      	bne.n	b5b38 <_ZN8MAX301055setupEhhhiii+0xd8>
   b5a8e:	2107      	movs	r1, #7
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
   b5a90:	4620      	mov	r0, r4
   b5a92:	f7ff ffad 	bl	b59f0 <_ZN8MAX3010510setLEDModeEh>
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   b5a96:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
   b5a9a:	7166      	strb	r6, [r4, #5]
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   b5a9c:	da51      	bge.n	b5b42 <_ZN8MAX301055setupEhhhiii+0xe2>
   b5a9e:	2100      	movs	r1, #0
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
   b5aa0:	4620      	mov	r0, r4
   b5aa2:	f7ff ffaa 	bl	b59fa <_ZN8MAX3010511setADCRangeEh>
  if (sampleRate < 100) setSampleRate(MAX30105_SAMPLERATE_50); //Take 50 samples per second
   b5aa6:	2f63      	cmp	r7, #99	; 0x63
   b5aa8:	dc58      	bgt.n	b5b5c <_ZN8MAX301055setupEhhhiii+0xfc>
   b5aaa:	2100      	movs	r1, #0
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
   b5aac:	4620      	mov	r0, r4
   b5aae:	f7ff ffa9 	bl	b5a04 <_ZN8MAX3010513setSampleRateEh>
  if (pulseWidth < 118) setPulseWidth(MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
   b5ab2:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
   b5ab6:	dc71      	bgt.n	b5b9c <_ZN8MAX301055setupEhhhiii+0x13c>
   b5ab8:	2100      	movs	r1, #0
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
   b5aba:	4620      	mov	r0, r4
   b5abc:	f7ff ffa7 	bl	b5a0e <_ZN8MAX3010513setPulseWidthEh>
  setPulseAmplitudeRed(powerLevel);
   b5ac0:	4641      	mov	r1, r8
   b5ac2:	4620      	mov	r0, r4
   b5ac4:	f7ff ff3c 	bl	b5940 <_ZN8MAX3010520setPulseAmplitudeRedEh>
  setPulseAmplitudeIR(powerLevel);
   b5ac8:	4641      	mov	r1, r8
   b5aca:	4620      	mov	r0, r4
   b5acc:	f7ff ff3d 	bl	b594a <_ZN8MAX3010519setPulseAmplitudeIREh>
  setPulseAmplitudeGreen(powerLevel);
   b5ad0:	4641      	mov	r1, r8
   b5ad2:	4620      	mov	r0, r4
   b5ad4:	f7ff ff3e 	bl	b5954 <_ZN8MAX3010522setPulseAmplitudeGreenEh>
  setPulseAmplitudeProximity(powerLevel);
   b5ad8:	4641      	mov	r1, r8
   b5ada:	4620      	mov	r0, r4
   b5adc:	f7ff ff3f 	bl	b595e <_ZN8MAX3010526setPulseAmplitudeProximityEh>
  enableSlot(1, SLOT_RED_LED);
   b5ae0:	2201      	movs	r2, #1
   b5ae2:	4611      	mov	r1, r2
   b5ae4:	4620      	mov	r0, r4
   b5ae6:	f7ff ff97 	bl	b5a18 <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
   b5aea:	2e01      	cmp	r6, #1
   b5aec:	d90b      	bls.n	b5b06 <_ZN8MAX301055setupEhhhiii+0xa6>
   b5aee:	2202      	movs	r2, #2
   b5af0:	4611      	mov	r1, r2
   b5af2:	4620      	mov	r0, r4
   b5af4:	f7ff ff90 	bl	b5a18 <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 2) enableSlot(3, SLOT_GREEN_LED);
   b5af8:	2e02      	cmp	r6, #2
   b5afa:	d004      	beq.n	b5b06 <_ZN8MAX301055setupEhhhiii+0xa6>
   b5afc:	2203      	movs	r2, #3
   b5afe:	4611      	mov	r1, r2
   b5b00:	4620      	mov	r0, r4
   b5b02:	f7ff ff89 	bl	b5a18 <_ZN8MAX3010510enableSlotEhh>
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   b5b06:	4620      	mov	r0, r4
}
   b5b08:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   b5b0c:	f7ff bf2c 	b.w	b5968 <_ZN8MAX301059clearFIFOEv>
  else if (sampleAverage == 2) setFIFOAverage(MAX30105_SAMPLEAVG_2);
   b5b10:	2d02      	cmp	r5, #2
   b5b12:	d101      	bne.n	b5b18 <_ZN8MAX301055setupEhhhiii+0xb8>
   b5b14:	2120      	movs	r1, #32
   b5b16:	e7b2      	b.n	b5a7e <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 4) setFIFOAverage(MAX30105_SAMPLEAVG_4);
   b5b18:	2d04      	cmp	r5, #4
   b5b1a:	d101      	bne.n	b5b20 <_ZN8MAX301055setupEhhhiii+0xc0>
   b5b1c:	2140      	movs	r1, #64	; 0x40
   b5b1e:	e7ae      	b.n	b5a7e <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 8) setFIFOAverage(MAX30105_SAMPLEAVG_8);
   b5b20:	2d08      	cmp	r5, #8
   b5b22:	d101      	bne.n	b5b28 <_ZN8MAX301055setupEhhhiii+0xc8>
   b5b24:	2160      	movs	r1, #96	; 0x60
   b5b26:	e7aa      	b.n	b5a7e <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 16) setFIFOAverage(MAX30105_SAMPLEAVG_16);
   b5b28:	2d10      	cmp	r5, #16
   b5b2a:	d101      	bne.n	b5b30 <_ZN8MAX301055setupEhhhiii+0xd0>
   b5b2c:	2180      	movs	r1, #128	; 0x80
   b5b2e:	e7a6      	b.n	b5a7e <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
   b5b30:	2d20      	cmp	r5, #32
   b5b32:	d1f3      	bne.n	b5b1c <_ZN8MAX301055setupEhhhiii+0xbc>
   b5b34:	21a0      	movs	r1, #160	; 0xa0
   b5b36:	e7a2      	b.n	b5a7e <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
   b5b38:	2e02      	cmp	r6, #2
   b5b3a:	bf0c      	ite	eq
   b5b3c:	2103      	moveq	r1, #3
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
   b5b3e:	2102      	movne	r1, #2
   b5b40:	e7a6      	b.n	b5a90 <_ZN8MAX301055setupEhhhiii+0x30>
  else if(adcRange < 8192) setADCRange(MAX30105_ADCRANGE_4096); //15.63pA per LSB
   b5b42:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
   b5b46:	da01      	bge.n	b5b4c <_ZN8MAX301055setupEhhhiii+0xec>
   b5b48:	2120      	movs	r1, #32
   b5b4a:	e7a9      	b.n	b5aa0 <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange < 16384) setADCRange(MAX30105_ADCRANGE_8192); //31.25pA per LSB
   b5b4c:	f5ba 4f80 	cmp.w	sl, #16384	; 0x4000
   b5b50:	da01      	bge.n	b5b56 <_ZN8MAX301055setupEhhhiii+0xf6>
   b5b52:	2140      	movs	r1, #64	; 0x40
   b5b54:	e7a4      	b.n	b5aa0 <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
   b5b56:	d1a2      	bne.n	b5a9e <_ZN8MAX301055setupEhhhiii+0x3e>
   b5b58:	2160      	movs	r1, #96	; 0x60
   b5b5a:	e7a1      	b.n	b5aa0 <_ZN8MAX301055setupEhhhiii+0x40>
  else if (sampleRate < 200) setSampleRate(MAX30105_SAMPLERATE_100);
   b5b5c:	2fc7      	cmp	r7, #199	; 0xc7
   b5b5e:	dc01      	bgt.n	b5b64 <_ZN8MAX301055setupEhhhiii+0x104>
   b5b60:	2104      	movs	r1, #4
   b5b62:	e7a3      	b.n	b5aac <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 400) setSampleRate(MAX30105_SAMPLERATE_200);
   b5b64:	f5b7 7fc8 	cmp.w	r7, #400	; 0x190
   b5b68:	da01      	bge.n	b5b6e <_ZN8MAX301055setupEhhhiii+0x10e>
   b5b6a:	2108      	movs	r1, #8
   b5b6c:	e79e      	b.n	b5aac <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 800) setSampleRate(MAX30105_SAMPLERATE_400);
   b5b6e:	f5b7 7f48 	cmp.w	r7, #800	; 0x320
   b5b72:	da01      	bge.n	b5b78 <_ZN8MAX301055setupEhhhiii+0x118>
   b5b74:	210c      	movs	r1, #12
   b5b76:	e799      	b.n	b5aac <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1000) setSampleRate(MAX30105_SAMPLERATE_800);
   b5b78:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
   b5b7c:	da01      	bge.n	b5b82 <_ZN8MAX301055setupEhhhiii+0x122>
   b5b7e:	2110      	movs	r1, #16
   b5b80:	e794      	b.n	b5aac <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1600) setSampleRate(MAX30105_SAMPLERATE_1000);
   b5b82:	f5b7 6fc8 	cmp.w	r7, #1600	; 0x640
   b5b86:	da01      	bge.n	b5b8c <_ZN8MAX301055setupEhhhiii+0x12c>
   b5b88:	2114      	movs	r1, #20
   b5b8a:	e78f      	b.n	b5aac <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 3200) setSampleRate(MAX30105_SAMPLERATE_1600);
   b5b8c:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   b5b90:	da01      	bge.n	b5b96 <_ZN8MAX301055setupEhhhiii+0x136>
   b5b92:	2118      	movs	r1, #24
   b5b94:	e78a      	b.n	b5aac <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
   b5b96:	d188      	bne.n	b5aaa <_ZN8MAX301055setupEhhhiii+0x4a>
   b5b98:	211c      	movs	r1, #28
   b5b9a:	e787      	b.n	b5aac <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (pulseWidth < 215) setPulseWidth(MAX30105_PULSEWIDTH_118); //16 bit resolution
   b5b9c:	f1b9 0fd6 	cmp.w	r9, #214	; 0xd6
   b5ba0:	dc01      	bgt.n	b5ba6 <_ZN8MAX301055setupEhhhiii+0x146>
   b5ba2:	2101      	movs	r1, #1
   b5ba4:	e789      	b.n	b5aba <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth < 411) setPulseWidth(MAX30105_PULSEWIDTH_215); //17 bit resolution
   b5ba6:	f5b9 7fcd 	cmp.w	r9, #410	; 0x19a
   b5baa:	dc01      	bgt.n	b5bb0 <_ZN8MAX301055setupEhhhiii+0x150>
   b5bac:	2102      	movs	r1, #2
   b5bae:	e784      	b.n	b5aba <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
   b5bb0:	f240 139b 	movw	r3, #411	; 0x19b
   b5bb4:	4599      	cmp	r9, r3
   b5bb6:	f47f af7f 	bne.w	b5ab8 <_ZN8MAX301055setupEhhhiii+0x58>
   b5bba:	2103      	movs	r1, #3
   b5bbc:	e77d      	b.n	b5aba <_ZN8MAX301055setupEhhhiii+0x5a>
	...

000b5bc0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5bc0:	b508      	push	{r3, lr}
   b5bc2:	4b02      	ldr	r3, [pc, #8]	; (b5bcc <os_mutex_recursive_create+0xc>)
   b5bc4:	681b      	ldr	r3, [r3, #0]
   b5bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5bc8:	9301      	str	r3, [sp, #4]
   b5bca:	bd08      	pop	{r3, pc}
   b5bcc:	00030248 	.word	0x00030248

000b5bd0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5bd0:	b508      	push	{r3, lr}
   b5bd2:	4b02      	ldr	r3, [pc, #8]	; (b5bdc <HAL_RNG_GetRandomNumber+0xc>)
   b5bd4:	681b      	ldr	r3, [r3, #0]
   b5bd6:	685b      	ldr	r3, [r3, #4]
   b5bd8:	9301      	str	r3, [sp, #4]
   b5bda:	bd08      	pop	{r3, pc}
   b5bdc:	00030218 	.word	0x00030218

000b5be0 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5be0:	b508      	push	{r3, lr}
   b5be2:	4b02      	ldr	r3, [pc, #8]	; (b5bec <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5be4:	681b      	ldr	r3, [r3, #0]
   b5be6:	695b      	ldr	r3, [r3, #20]
   b5be8:	9301      	str	r3, [sp, #4]
   b5bea:	bd08      	pop	{r3, pc}
   b5bec:	00030218 	.word	0x00030218

000b5bf0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5bf0:	b508      	push	{r3, lr}
   b5bf2:	4b02      	ldr	r3, [pc, #8]	; (b5bfc <hal_rtc_time_is_valid+0xc>)
   b5bf4:	681b      	ldr	r3, [r3, #0]
   b5bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5bf8:	9301      	str	r3, [sp, #4]
   b5bfa:	bd08      	pop	{r3, pc}
   b5bfc:	00030218 	.word	0x00030218

000b5c00 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5c00:	b508      	push	{r3, lr}
   b5c02:	4b02      	ldr	r3, [pc, #8]	; (b5c0c <hal_rtc_get_time+0xc>)
   b5c04:	681b      	ldr	r3, [r3, #0]
   b5c06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5c08:	9301      	str	r3, [sp, #4]
   b5c0a:	bd08      	pop	{r3, pc}
   b5c0c:	00030218 	.word	0x00030218

000b5c10 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b5c10:	b508      	push	{r3, lr}
   b5c12:	4b02      	ldr	r3, [pc, #8]	; (b5c1c <hal_i2c_set_speed+0xc>)
   b5c14:	681b      	ldr	r3, [r3, #0]
   b5c16:	681b      	ldr	r3, [r3, #0]
   b5c18:	9301      	str	r3, [sp, #4]
   b5c1a:	bd08      	pop	{r3, pc}
   b5c1c:	00030228 	.word	0x00030228

000b5c20 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5c20:	b508      	push	{r3, lr}
   b5c22:	4b02      	ldr	r3, [pc, #8]	; (b5c2c <hal_i2c_begin+0xc>)
   b5c24:	681b      	ldr	r3, [r3, #0]
   b5c26:	68db      	ldr	r3, [r3, #12]
   b5c28:	9301      	str	r3, [sp, #4]
   b5c2a:	bd08      	pop	{r3, pc}
   b5c2c:	00030228 	.word	0x00030228

000b5c30 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5c30:	b508      	push	{r3, lr}
   b5c32:	4b02      	ldr	r3, [pc, #8]	; (b5c3c <hal_i2c_begin_transmission+0xc>)
   b5c34:	681b      	ldr	r3, [r3, #0]
   b5c36:	699b      	ldr	r3, [r3, #24]
   b5c38:	9301      	str	r3, [sp, #4]
   b5c3a:	bd08      	pop	{r3, pc}
   b5c3c:	00030228 	.word	0x00030228

000b5c40 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5c40:	b508      	push	{r3, lr}
   b5c42:	4b02      	ldr	r3, [pc, #8]	; (b5c4c <hal_i2c_end_transmission+0xc>)
   b5c44:	681b      	ldr	r3, [r3, #0]
   b5c46:	69db      	ldr	r3, [r3, #28]
   b5c48:	9301      	str	r3, [sp, #4]
   b5c4a:	bd08      	pop	{r3, pc}
   b5c4c:	00030228 	.word	0x00030228

000b5c50 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5c50:	b508      	push	{r3, lr}
   b5c52:	4b02      	ldr	r3, [pc, #8]	; (b5c5c <hal_i2c_write+0xc>)
   b5c54:	681b      	ldr	r3, [r3, #0]
   b5c56:	6a1b      	ldr	r3, [r3, #32]
   b5c58:	9301      	str	r3, [sp, #4]
   b5c5a:	bd08      	pop	{r3, pc}
   b5c5c:	00030228 	.word	0x00030228

000b5c60 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5c60:	b508      	push	{r3, lr}
   b5c62:	4b02      	ldr	r3, [pc, #8]	; (b5c6c <hal_i2c_available+0xc>)
   b5c64:	681b      	ldr	r3, [r3, #0]
   b5c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5c68:	9301      	str	r3, [sp, #4]
   b5c6a:	bd08      	pop	{r3, pc}
   b5c6c:	00030228 	.word	0x00030228

000b5c70 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5c70:	b508      	push	{r3, lr}
   b5c72:	4b02      	ldr	r3, [pc, #8]	; (b5c7c <hal_i2c_read+0xc>)
   b5c74:	681b      	ldr	r3, [r3, #0]
   b5c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5c78:	9301      	str	r3, [sp, #4]
   b5c7a:	bd08      	pop	{r3, pc}
   b5c7c:	00030228 	.word	0x00030228

000b5c80 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5c80:	b508      	push	{r3, lr}
   b5c82:	4b02      	ldr	r3, [pc, #8]	; (b5c8c <hal_i2c_peek+0xc>)
   b5c84:	681b      	ldr	r3, [r3, #0]
   b5c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5c88:	9301      	str	r3, [sp, #4]
   b5c8a:	bd08      	pop	{r3, pc}
   b5c8c:	00030228 	.word	0x00030228

000b5c90 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5c90:	b508      	push	{r3, lr}
   b5c92:	4b02      	ldr	r3, [pc, #8]	; (b5c9c <hal_i2c_flush+0xc>)
   b5c94:	681b      	ldr	r3, [r3, #0]
   b5c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5c98:	9301      	str	r3, [sp, #4]
   b5c9a:	bd08      	pop	{r3, pc}
   b5c9c:	00030228 	.word	0x00030228

000b5ca0 <hal_i2c_init>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5ca0:	b508      	push	{r3, lr}
   b5ca2:	4b02      	ldr	r3, [pc, #8]	; (b5cac <hal_i2c_init+0xc>)
   b5ca4:	681b      	ldr	r3, [r3, #0]
   b5ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5ca8:	9301      	str	r3, [sp, #4]
   b5caa:	bd08      	pop	{r3, pc}
   b5cac:	00030228 	.word	0x00030228

000b5cb0 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5cb0:	b508      	push	{r3, lr}
   b5cb2:	4b02      	ldr	r3, [pc, #8]	; (b5cbc <hal_i2c_request_ex+0xc>)
   b5cb4:	681b      	ldr	r3, [r3, #0]
   b5cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5cb8:	9301      	str	r3, [sp, #4]
   b5cba:	bd08      	pop	{r3, pc}
   b5cbc:	00030228 	.word	0x00030228

000b5cc0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5cc0:	b508      	push	{r3, lr}
   b5cc2:	4b02      	ldr	r3, [pc, #8]	; (b5ccc <inet_inet_ntop+0xc>)
   b5cc4:	681b      	ldr	r3, [r3, #0]
   b5cc6:	695b      	ldr	r3, [r3, #20]
   b5cc8:	9301      	str	r3, [sp, #4]
   b5cca:	bd08      	pop	{r3, pc}
   b5ccc:	00030264 	.word	0x00030264

000b5cd0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5cd0:	b508      	push	{r3, lr}
   b5cd2:	4b02      	ldr	r3, [pc, #8]	; (b5cdc <netdb_freeaddrinfo+0xc>)
   b5cd4:	681b      	ldr	r3, [r3, #0]
   b5cd6:	689b      	ldr	r3, [r3, #8]
   b5cd8:	9301      	str	r3, [sp, #4]
   b5cda:	bd08      	pop	{r3, pc}
   b5cdc:	00030268 	.word	0x00030268

000b5ce0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5ce0:	b508      	push	{r3, lr}
   b5ce2:	4b02      	ldr	r3, [pc, #8]	; (b5cec <netdb_getaddrinfo+0xc>)
   b5ce4:	681b      	ldr	r3, [r3, #0]
   b5ce6:	68db      	ldr	r3, [r3, #12]
   b5ce8:	9301      	str	r3, [sp, #4]
   b5cea:	bd08      	pop	{r3, pc}
   b5cec:	00030268 	.word	0x00030268

000b5cf0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5cf0:	b508      	push	{r3, lr}
   b5cf2:	4b02      	ldr	r3, [pc, #8]	; (b5cfc <hal_usart_write+0xc>)
   b5cf4:	681b      	ldr	r3, [r3, #0]
   b5cf6:	68db      	ldr	r3, [r3, #12]
   b5cf8:	9301      	str	r3, [sp, #4]
   b5cfa:	bd08      	pop	{r3, pc}
   b5cfc:	0003023c 	.word	0x0003023c

000b5d00 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5d00:	b508      	push	{r3, lr}
   b5d02:	4b02      	ldr	r3, [pc, #8]	; (b5d0c <hal_usart_available+0xc>)
   b5d04:	681b      	ldr	r3, [r3, #0]
   b5d06:	691b      	ldr	r3, [r3, #16]
   b5d08:	9301      	str	r3, [sp, #4]
   b5d0a:	bd08      	pop	{r3, pc}
   b5d0c:	0003023c 	.word	0x0003023c

000b5d10 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5d10:	b508      	push	{r3, lr}
   b5d12:	4b02      	ldr	r3, [pc, #8]	; (b5d1c <hal_usart_read+0xc>)
   b5d14:	681b      	ldr	r3, [r3, #0]
   b5d16:	695b      	ldr	r3, [r3, #20]
   b5d18:	9301      	str	r3, [sp, #4]
   b5d1a:	bd08      	pop	{r3, pc}
   b5d1c:	0003023c 	.word	0x0003023c

000b5d20 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5d20:	b508      	push	{r3, lr}
   b5d22:	4b02      	ldr	r3, [pc, #8]	; (b5d2c <hal_usart_peek+0xc>)
   b5d24:	681b      	ldr	r3, [r3, #0]
   b5d26:	699b      	ldr	r3, [r3, #24]
   b5d28:	9301      	str	r3, [sp, #4]
   b5d2a:	bd08      	pop	{r3, pc}
   b5d2c:	0003023c 	.word	0x0003023c

000b5d30 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5d30:	b508      	push	{r3, lr}
   b5d32:	4b02      	ldr	r3, [pc, #8]	; (b5d3c <hal_usart_flush+0xc>)
   b5d34:	681b      	ldr	r3, [r3, #0]
   b5d36:	69db      	ldr	r3, [r3, #28]
   b5d38:	9301      	str	r3, [sp, #4]
   b5d3a:	bd08      	pop	{r3, pc}
   b5d3c:	0003023c 	.word	0x0003023c

000b5d40 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5d40:	b508      	push	{r3, lr}
   b5d42:	4b02      	ldr	r3, [pc, #8]	; (b5d4c <hal_usart_available_data_for_write+0xc>)
   b5d44:	681b      	ldr	r3, [r3, #0]
   b5d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5d48:	9301      	str	r3, [sp, #4]
   b5d4a:	bd08      	pop	{r3, pc}
   b5d4c:	0003023c 	.word	0x0003023c

000b5d50 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5d50:	b508      	push	{r3, lr}
   b5d52:	4b02      	ldr	r3, [pc, #8]	; (b5d5c <hal_usart_init_ex+0xc>)
   b5d54:	681b      	ldr	r3, [r3, #0]
   b5d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5d58:	9301      	str	r3, [sp, #4]
   b5d5a:	bd08      	pop	{r3, pc}
   b5d5c:	0003023c 	.word	0x0003023c

000b5d60 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5d60:	b508      	push	{r3, lr}
   b5d62:	4b02      	ldr	r3, [pc, #8]	; (b5d6c <HAL_USB_USART_Init+0xc>)
   b5d64:	681b      	ldr	r3, [r3, #0]
   b5d66:	681b      	ldr	r3, [r3, #0]
   b5d68:	9301      	str	r3, [sp, #4]
   b5d6a:	bd08      	pop	{r3, pc}
   b5d6c:	0003024c 	.word	0x0003024c

000b5d70 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5d70:	b508      	push	{r3, lr}
   b5d72:	4b02      	ldr	r3, [pc, #8]	; (b5d7c <HAL_USB_USART_Begin+0xc>)
   b5d74:	681b      	ldr	r3, [r3, #0]
   b5d76:	685b      	ldr	r3, [r3, #4]
   b5d78:	9301      	str	r3, [sp, #4]
   b5d7a:	bd08      	pop	{r3, pc}
   b5d7c:	0003024c 	.word	0x0003024c

000b5d80 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5d80:	b508      	push	{r3, lr}
   b5d82:	4b02      	ldr	r3, [pc, #8]	; (b5d8c <HAL_USB_USART_Available_Data+0xc>)
   b5d84:	681b      	ldr	r3, [r3, #0]
   b5d86:	691b      	ldr	r3, [r3, #16]
   b5d88:	9301      	str	r3, [sp, #4]
   b5d8a:	bd08      	pop	{r3, pc}
   b5d8c:	0003024c 	.word	0x0003024c

000b5d90 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5d90:	b508      	push	{r3, lr}
   b5d92:	4b02      	ldr	r3, [pc, #8]	; (b5d9c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5d94:	681b      	ldr	r3, [r3, #0]
   b5d96:	695b      	ldr	r3, [r3, #20]
   b5d98:	9301      	str	r3, [sp, #4]
   b5d9a:	bd08      	pop	{r3, pc}
   b5d9c:	0003024c 	.word	0x0003024c

000b5da0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5da0:	b508      	push	{r3, lr}
   b5da2:	4b02      	ldr	r3, [pc, #8]	; (b5dac <HAL_USB_USART_Receive_Data+0xc>)
   b5da4:	681b      	ldr	r3, [r3, #0]
   b5da6:	699b      	ldr	r3, [r3, #24]
   b5da8:	9301      	str	r3, [sp, #4]
   b5daa:	bd08      	pop	{r3, pc}
   b5dac:	0003024c 	.word	0x0003024c

000b5db0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5db0:	b508      	push	{r3, lr}
   b5db2:	4b02      	ldr	r3, [pc, #8]	; (b5dbc <HAL_USB_USART_Send_Data+0xc>)
   b5db4:	681b      	ldr	r3, [r3, #0]
   b5db6:	69db      	ldr	r3, [r3, #28]
   b5db8:	9301      	str	r3, [sp, #4]
   b5dba:	bd08      	pop	{r3, pc}
   b5dbc:	0003024c 	.word	0x0003024c

000b5dc0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5dc0:	b508      	push	{r3, lr}
   b5dc2:	4b02      	ldr	r3, [pc, #8]	; (b5dcc <HAL_USB_USART_Flush_Data+0xc>)
   b5dc4:	681b      	ldr	r3, [r3, #0]
   b5dc6:	6a1b      	ldr	r3, [r3, #32]
   b5dc8:	9301      	str	r3, [sp, #4]
   b5dca:	bd08      	pop	{r3, pc}
   b5dcc:	0003024c 	.word	0x0003024c

000b5dd0 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   b5dd0:	b508      	push	{r3, lr}
   b5dd2:	4b02      	ldr	r3, [pc, #8]	; (b5ddc <LED_SetSignalingColor+0xc>)
   b5dd4:	681b      	ldr	r3, [r3, #0]
   b5dd6:	685b      	ldr	r3, [r3, #4]
   b5dd8:	9301      	str	r3, [sp, #4]
   b5dda:	bd08      	pop	{r3, pc}
   b5ddc:	00030260 	.word	0x00030260

000b5de0 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   b5de0:	b508      	push	{r3, lr}
   b5de2:	4b02      	ldr	r3, [pc, #8]	; (b5dec <LED_Signaling_Start+0xc>)
   b5de4:	681b      	ldr	r3, [r3, #0]
   b5de6:	689b      	ldr	r3, [r3, #8]
   b5de8:	9301      	str	r3, [sp, #4]
   b5dea:	bd08      	pop	{r3, pc}
   b5dec:	00030260 	.word	0x00030260

000b5df0 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   b5df0:	b508      	push	{r3, lr}
   b5df2:	4b02      	ldr	r3, [pc, #8]	; (b5dfc <LED_Signaling_Stop+0xc>)
   b5df4:	681b      	ldr	r3, [r3, #0]
   b5df6:	68db      	ldr	r3, [r3, #12]
   b5df8:	9301      	str	r3, [sp, #4]
   b5dfa:	bd08      	pop	{r3, pc}
   b5dfc:	00030260 	.word	0x00030260

000b5e00 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   b5e00:	b508      	push	{r3, lr}
   b5e02:	4b02      	ldr	r3, [pc, #8]	; (b5e0c <LED_RGB_IsOverRidden+0xc>)
   b5e04:	681b      	ldr	r3, [r3, #0]
   b5e06:	699b      	ldr	r3, [r3, #24]
   b5e08:	9301      	str	r3, [sp, #4]
   b5e0a:	bd08      	pop	{r3, pc}
   b5e0c:	00030260 	.word	0x00030260

000b5e10 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   b5e10:	b508      	push	{r3, lr}
   b5e12:	4b02      	ldr	r3, [pc, #8]	; (b5e1c <LED_On+0xc>)
   b5e14:	681b      	ldr	r3, [r3, #0]
   b5e16:	69db      	ldr	r3, [r3, #28]
   b5e18:	9301      	str	r3, [sp, #4]
   b5e1a:	bd08      	pop	{r3, pc}
   b5e1c:	00030260 	.word	0x00030260

000b5e20 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b5e20:	b508      	push	{r3, lr}
   b5e22:	4b02      	ldr	r3, [pc, #8]	; (b5e2c <system_mode+0xc>)
   b5e24:	681b      	ldr	r3, [r3, #0]
   b5e26:	681b      	ldr	r3, [r3, #0]
   b5e28:	9301      	str	r3, [sp, #4]
   b5e2a:	bd08      	pop	{r3, pc}
   b5e2c:	00030220 	.word	0x00030220

000b5e30 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5e30:	b508      	push	{r3, lr}
   b5e32:	4b02      	ldr	r3, [pc, #8]	; (b5e3c <set_system_mode+0xc>)
   b5e34:	681b      	ldr	r3, [r3, #0]
   b5e36:	685b      	ldr	r3, [r3, #4]
   b5e38:	9301      	str	r3, [sp, #4]
   b5e3a:	bd08      	pop	{r3, pc}
   b5e3c:	00030220 	.word	0x00030220

000b5e40 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler_deprecated, void(void*))
DYNALIB_FN(3, system, system_firmwareUpdate_deprecated, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer_deprecated, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5e40:	b508      	push	{r3, lr}
   b5e42:	4b02      	ldr	r3, [pc, #8]	; (b5e4c <system_delay_ms+0xc>)
   b5e44:	681b      	ldr	r3, [r3, #0]
   b5e46:	695b      	ldr	r3, [r3, #20]
   b5e48:	9301      	str	r3, [sp, #4]
   b5e4a:	bd08      	pop	{r3, pc}
   b5e4c:	00030220 	.word	0x00030220

000b5e50 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN_WRAP(16, system, Spark_Prepare_For_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN_WRAP(17, system, Spark_Save_Firmware_Chunk, protected, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN_WRAP(18, system, Spark_Finish_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b5e50:	b508      	push	{r3, lr}
   b5e52:	4b02      	ldr	r3, [pc, #8]	; (b5e5c <application_thread_current+0xc>)
   b5e54:	681b      	ldr	r3, [r3, #0]
   b5e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5e58:	9301      	str	r3, [sp, #4]
   b5e5a:	bd08      	pop	{r3, pc}
   b5e5c:	00030220 	.word	0x00030220

000b5e60 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b5e60:	b508      	push	{r3, lr}
   b5e62:	4b02      	ldr	r3, [pc, #8]	; (b5e6c <application_thread_invoke+0xc>)
   b5e64:	681b      	ldr	r3, [r3, #0]
   b5e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5e68:	9301      	str	r3, [sp, #4]
   b5e6a:	bd08      	pop	{r3, pc}
   b5e6c:	00030220 	.word	0x00030220

000b5e70 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b5e70:	b508      	push	{r3, lr}
   b5e72:	4b02      	ldr	r3, [pc, #8]	; (b5e7c <system_thread_get_state+0xc>)
   b5e74:	681b      	ldr	r3, [r3, #0]
   b5e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5e78:	9301      	str	r3, [sp, #4]
   b5e7a:	bd08      	pop	{r3, pc}
   b5e7c:	00030220 	.word	0x00030220

000b5e80 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5e80:	b508      	push	{r3, lr}
   b5e82:	4b03      	ldr	r3, [pc, #12]	; (b5e90 <system_ctrl_set_app_request_handler+0x10>)
   b5e84:	681b      	ldr	r3, [r3, #0]
   b5e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5e8a:	9301      	str	r3, [sp, #4]
   b5e8c:	bd08      	pop	{r3, pc}
   b5e8e:	0000      	.short	0x0000
   b5e90:	00030220 	.word	0x00030220

000b5e94 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5e94:	b508      	push	{r3, lr}
   b5e96:	4b03      	ldr	r3, [pc, #12]	; (b5ea4 <system_ctrl_set_result+0x10>)
   b5e98:	681b      	ldr	r3, [r3, #0]
   b5e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5e9e:	9301      	str	r3, [sp, #4]
   b5ea0:	bd08      	pop	{r3, pc}
   b5ea2:	0000      	.short	0x0000
   b5ea4:	00030220 	.word	0x00030220

000b5ea8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b5ea8:	b508      	push	{r3, lr}
   b5eaa:	4b02      	ldr	r3, [pc, #8]	; (b5eb4 <spark_process+0xc>)
   b5eac:	681b      	ldr	r3, [r3, #0]
   b5eae:	689b      	ldr	r3, [r3, #8]
   b5eb0:	9301      	str	r3, [sp, #4]
   b5eb2:	bd08      	pop	{r3, pc}
   b5eb4:	00030244 	.word	0x00030244

000b5eb8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b5eb8:	b508      	push	{r3, lr}
   b5eba:	4b02      	ldr	r3, [pc, #8]	; (b5ec4 <spark_cloud_flag_connect+0xc>)
   b5ebc:	681b      	ldr	r3, [r3, #0]
   b5ebe:	68db      	ldr	r3, [r3, #12]
   b5ec0:	9301      	str	r3, [sp, #4]
   b5ec2:	bd08      	pop	{r3, pc}
   b5ec4:	00030244 	.word	0x00030244

000b5ec8 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b5ec8:	b508      	push	{r3, lr}
   b5eca:	4b02      	ldr	r3, [pc, #8]	; (b5ed4 <spark_cloud_flag_connected+0xc>)
   b5ecc:	681b      	ldr	r3, [r3, #0]
   b5ece:	695b      	ldr	r3, [r3, #20]
   b5ed0:	9301      	str	r3, [sp, #4]
   b5ed2:	bd08      	pop	{r3, pc}
   b5ed4:	00030244 	.word	0x00030244

000b5ed8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b5ed8:	b508      	push	{r3, lr}
   b5eda:	4b02      	ldr	r3, [pc, #8]	; (b5ee4 <spark_send_event+0xc>)
   b5edc:	681b      	ldr	r3, [r3, #0]
   b5ede:	6a1b      	ldr	r3, [r3, #32]
   b5ee0:	9301      	str	r3, [sp, #4]
   b5ee2:	bd08      	pop	{r3, pc}
   b5ee4:	00030244 	.word	0x00030244

000b5ee8 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b5ee8:	b508      	push	{r3, lr}
   b5eea:	4b02      	ldr	r3, [pc, #8]	; (b5ef4 <spark_subscribe+0xc>)
   b5eec:	681b      	ldr	r3, [r3, #0]
   b5eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5ef0:	9301      	str	r3, [sp, #4]
   b5ef2:	bd08      	pop	{r3, pc}
   b5ef4:	00030244 	.word	0x00030244

000b5ef8 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b5ef8:	b508      	push	{r3, lr}
   b5efa:	4b02      	ldr	r3, [pc, #8]	; (b5f04 <spark_sync_time+0xc>)
   b5efc:	681b      	ldr	r3, [r3, #0]
   b5efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5f00:	9301      	str	r3, [sp, #4]
   b5f02:	bd08      	pop	{r3, pc}
   b5f04:	00030244 	.word	0x00030244

000b5f08 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b5f08:	b508      	push	{r3, lr}
   b5f0a:	4b02      	ldr	r3, [pc, #8]	; (b5f14 <spark_sync_time_pending+0xc>)
   b5f0c:	681b      	ldr	r3, [r3, #0]
   b5f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5f10:	9301      	str	r3, [sp, #4]
   b5f12:	bd08      	pop	{r3, pc}
   b5f14:	00030244 	.word	0x00030244

000b5f18 <spark_set_connection_property>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   b5f18:	b508      	push	{r3, lr}
   b5f1a:	4b02      	ldr	r3, [pc, #8]	; (b5f24 <spark_set_connection_property+0xc>)
   b5f1c:	681b      	ldr	r3, [r3, #0]
   b5f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5f20:	9301      	str	r3, [sp, #4]
   b5f22:	bd08      	pop	{r3, pc}
   b5f24:	00030244 	.word	0x00030244

000b5f28 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5f28:	b508      	push	{r3, lr}
   b5f2a:	4b02      	ldr	r3, [pc, #8]	; (b5f34 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5f2c:	681b      	ldr	r3, [r3, #0]
   b5f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5f30:	9301      	str	r3, [sp, #4]
   b5f32:	bd08      	pop	{r3, pc}
   b5f34:	00030244 	.word	0x00030244

000b5f38 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5f38:	b508      	push	{r3, lr}
   b5f3a:	4b02      	ldr	r3, [pc, #8]	; (b5f44 <network_connect+0xc>)
   b5f3c:	681b      	ldr	r3, [r3, #0]
   b5f3e:	685b      	ldr	r3, [r3, #4]
   b5f40:	9301      	str	r3, [sp, #4]
   b5f42:	bd08      	pop	{r3, pc}
   b5f44:	00030240 	.word	0x00030240

000b5f48 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5f48:	b508      	push	{r3, lr}
   b5f4a:	4b02      	ldr	r3, [pc, #8]	; (b5f54 <network_connecting+0xc>)
   b5f4c:	681b      	ldr	r3, [r3, #0]
   b5f4e:	689b      	ldr	r3, [r3, #8]
   b5f50:	9301      	str	r3, [sp, #4]
   b5f52:	bd08      	pop	{r3, pc}
   b5f54:	00030240 	.word	0x00030240

000b5f58 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5f58:	b508      	push	{r3, lr}
   b5f5a:	4b02      	ldr	r3, [pc, #8]	; (b5f64 <network_disconnect+0xc>)
   b5f5c:	681b      	ldr	r3, [r3, #0]
   b5f5e:	68db      	ldr	r3, [r3, #12]
   b5f60:	9301      	str	r3, [sp, #4]
   b5f62:	bd08      	pop	{r3, pc}
   b5f64:	00030240 	.word	0x00030240

000b5f68 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5f68:	b508      	push	{r3, lr}
   b5f6a:	4b02      	ldr	r3, [pc, #8]	; (b5f74 <network_ready+0xc>)
   b5f6c:	681b      	ldr	r3, [r3, #0]
   b5f6e:	691b      	ldr	r3, [r3, #16]
   b5f70:	9301      	str	r3, [sp, #4]
   b5f72:	bd08      	pop	{r3, pc}
   b5f74:	00030240 	.word	0x00030240

000b5f78 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5f78:	b508      	push	{r3, lr}
   b5f7a:	4b02      	ldr	r3, [pc, #8]	; (b5f84 <network_on+0xc>)
   b5f7c:	681b      	ldr	r3, [r3, #0]
   b5f7e:	695b      	ldr	r3, [r3, #20]
   b5f80:	9301      	str	r3, [sp, #4]
   b5f82:	bd08      	pop	{r3, pc}
   b5f84:	00030240 	.word	0x00030240

000b5f88 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5f88:	b508      	push	{r3, lr}
   b5f8a:	4b02      	ldr	r3, [pc, #8]	; (b5f94 <network_off+0xc>)
   b5f8c:	681b      	ldr	r3, [r3, #0]
   b5f8e:	699b      	ldr	r3, [r3, #24]
   b5f90:	9301      	str	r3, [sp, #4]
   b5f92:	bd08      	pop	{r3, pc}
   b5f94:	00030240 	.word	0x00030240

000b5f98 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5f98:	b508      	push	{r3, lr}
   b5f9a:	4b02      	ldr	r3, [pc, #8]	; (b5fa4 <network_listen+0xc>)
   b5f9c:	681b      	ldr	r3, [r3, #0]
   b5f9e:	69db      	ldr	r3, [r3, #28]
   b5fa0:	9301      	str	r3, [sp, #4]
   b5fa2:	bd08      	pop	{r3, pc}
   b5fa4:	00030240 	.word	0x00030240

000b5fa8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5fa8:	b508      	push	{r3, lr}
   b5faa:	4b02      	ldr	r3, [pc, #8]	; (b5fb4 <network_listening+0xc>)
   b5fac:	681b      	ldr	r3, [r3, #0]
   b5fae:	6a1b      	ldr	r3, [r3, #32]
   b5fb0:	9301      	str	r3, [sp, #4]
   b5fb2:	bd08      	pop	{r3, pc}
   b5fb4:	00030240 	.word	0x00030240

000b5fb8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5fb8:	b508      	push	{r3, lr}
   b5fba:	4b02      	ldr	r3, [pc, #8]	; (b5fc4 <network_set_listen_timeout+0xc>)
   b5fbc:	681b      	ldr	r3, [r3, #0]
   b5fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5fc0:	9301      	str	r3, [sp, #4]
   b5fc2:	bd08      	pop	{r3, pc}
   b5fc4:	00030240 	.word	0x00030240

000b5fc8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5fc8:	b508      	push	{r3, lr}
   b5fca:	4b02      	ldr	r3, [pc, #8]	; (b5fd4 <network_get_listen_timeout+0xc>)
   b5fcc:	681b      	ldr	r3, [r3, #0]
   b5fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5fd0:	9301      	str	r3, [sp, #4]
   b5fd2:	bd08      	pop	{r3, pc}
   b5fd4:	00030240 	.word	0x00030240

000b5fd8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5fd8:	b508      	push	{r3, lr}
   b5fda:	4b02      	ldr	r3, [pc, #8]	; (b5fe4 <network_is_on+0xc>)
   b5fdc:	681b      	ldr	r3, [r3, #0]
   b5fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5fe0:	9301      	str	r3, [sp, #4]
   b5fe2:	bd08      	pop	{r3, pc}
   b5fe4:	00030240 	.word	0x00030240

000b5fe8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5fe8:	b508      	push	{r3, lr}
   b5fea:	4b02      	ldr	r3, [pc, #8]	; (b5ff4 <network_is_off+0xc>)
   b5fec:	681b      	ldr	r3, [r3, #0]
   b5fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5ff0:	9301      	str	r3, [sp, #4]
   b5ff2:	bd08      	pop	{r3, pc}
   b5ff4:	00030240 	.word	0x00030240

000b5ff8 <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
   b5ff8:	b508      	push	{r3, lr}
   b5ffa:	4b02      	ldr	r3, [pc, #8]	; (b6004 <network_prefer+0xc>)
   b5ffc:	681b      	ldr	r3, [r3, #0]
   b5ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6000:	9301      	str	r3, [sp, #4]
   b6002:	bd08      	pop	{r3, pc}
   b6004:	00030240 	.word	0x00030240

000b6008 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
   b6008:	b508      	push	{r3, lr}
   b600a:	4b02      	ldr	r3, [pc, #8]	; (b6014 <network_is_preferred+0xc>)
   b600c:	681b      	ldr	r3, [r3, #0]
   b600e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6010:	9301      	str	r3, [sp, #4]
   b6012:	bd08      	pop	{r3, pc}
   b6014:	00030240 	.word	0x00030240

000b6018 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6018:	b508      	push	{r3, lr}
   b601a:	4b02      	ldr	r3, [pc, #8]	; (b6024 <malloc+0xc>)
   b601c:	681b      	ldr	r3, [r3, #0]
   b601e:	681b      	ldr	r3, [r3, #0]
   b6020:	9301      	str	r3, [sp, #4]
   b6022:	bd08      	pop	{r3, pc}
   b6024:	0003021c 	.word	0x0003021c

000b6028 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6028:	b508      	push	{r3, lr}
   b602a:	4b02      	ldr	r3, [pc, #8]	; (b6034 <free+0xc>)
   b602c:	681b      	ldr	r3, [r3, #0]
   b602e:	685b      	ldr	r3, [r3, #4]
   b6030:	9301      	str	r3, [sp, #4]
   b6032:	bd08      	pop	{r3, pc}
   b6034:	0003021c 	.word	0x0003021c

000b6038 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6038:	b508      	push	{r3, lr}
   b603a:	4b02      	ldr	r3, [pc, #8]	; (b6044 <realloc+0xc>)
   b603c:	681b      	ldr	r3, [r3, #0]
   b603e:	689b      	ldr	r3, [r3, #8]
   b6040:	9301      	str	r3, [sp, #4]
   b6042:	bd08      	pop	{r3, pc}
   b6044:	0003021c 	.word	0x0003021c

000b6048 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6048:	b508      	push	{r3, lr}
   b604a:	4b02      	ldr	r3, [pc, #8]	; (b6054 <abort+0xc>)
   b604c:	681b      	ldr	r3, [r3, #0]
   b604e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6050:	9301      	str	r3, [sp, #4]
   b6052:	bd08      	pop	{r3, pc}
   b6054:	0003021c 	.word	0x0003021c

000b6058 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6058:	b508      	push	{r3, lr}
   b605a:	4b02      	ldr	r3, [pc, #8]	; (b6064 <_malloc_r+0xc>)
   b605c:	681b      	ldr	r3, [r3, #0]
   b605e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6060:	9301      	str	r3, [sp, #4]
   b6062:	bd08      	pop	{r3, pc}
   b6064:	0003021c 	.word	0x0003021c

000b6068 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6068:	b508      	push	{r3, lr}
   b606a:	4b02      	ldr	r3, [pc, #8]	; (b6074 <__assert_func+0xc>)
   b606c:	681b      	ldr	r3, [r3, #0]
   b606e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6070:	9301      	str	r3, [sp, #4]
   b6072:	bd08      	pop	{r3, pc}
   b6074:	0003021c 	.word	0x0003021c

000b6078 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6078:	b508      	push	{r3, lr}
   b607a:	4b02      	ldr	r3, [pc, #8]	; (b6084 <newlib_impure_ptr_callback+0xc>)
   b607c:	681b      	ldr	r3, [r3, #0]
   b607e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6080:	9301      	str	r3, [sp, #4]
   b6082:	bd08      	pop	{r3, pc}
   b6084:	0003021c 	.word	0x0003021c

000b6088 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b6088:	b508      	push	{r3, lr}
   b608a:	4b02      	ldr	r3, [pc, #8]	; (b6094 <localtime_r+0xc>)
   b608c:	681b      	ldr	r3, [r3, #0]
   b608e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6090:	9301      	str	r3, [sp, #4]
   b6092:	bd08      	pop	{r3, pc}
   b6094:	0003021c 	.word	0x0003021c

000b6098 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6098:	2100      	movs	r1, #0
   b609a:	f7ff bed1 	b.w	b5e40 <system_delay_ms>

000b609e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b609e:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b60a0:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b60a2:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b60a4:	b17c      	cbz	r4, b60c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b60a6:	6863      	ldr	r3, [r4, #4]
   b60a8:	3b01      	subs	r3, #1
   b60aa:	6063      	str	r3, [r4, #4]
   b60ac:	b95b      	cbnz	r3, b60c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b60ae:	6823      	ldr	r3, [r4, #0]
   b60b0:	4620      	mov	r0, r4
   b60b2:	689b      	ldr	r3, [r3, #8]
   b60b4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b60b6:	68a3      	ldr	r3, [r4, #8]
   b60b8:	3b01      	subs	r3, #1
   b60ba:	60a3      	str	r3, [r4, #8]
   b60bc:	b91b      	cbnz	r3, b60c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b60be:	6823      	ldr	r3, [r4, #0]
   b60c0:	4620      	mov	r0, r4
   b60c2:	68db      	ldr	r3, [r3, #12]
   b60c4:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b60c6:	4628      	mov	r0, r5
   b60c8:	bd38      	pop	{r3, r4, r5, pc}

000b60ca <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b60ca:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b60cc:	6883      	ldr	r3, [r0, #8]
   b60ce:	4604      	mov	r4, r0
   b60d0:	b90b      	cbnz	r3, b60d6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b60d2:	f001 f99e 	bl	b7412 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b60d6:	68c3      	ldr	r3, [r0, #12]
   b60d8:	4798      	blx	r3
      if (_M_manager)
   b60da:	68a3      	ldr	r3, [r4, #8]
   b60dc:	b11b      	cbz	r3, b60e6 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b60de:	2203      	movs	r2, #3
   b60e0:	4621      	mov	r1, r4
   b60e2:	4620      	mov	r0, r4
   b60e4:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b60e6:	4620      	mov	r0, r4
   b60e8:	2110      	movs	r1, #16
}
   b60ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b60ee:	f7fe beb6 	b.w	b4e5e <_ZdlPvj>

000b60f2 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b60f2:	b510      	push	{r4, lr}
      if (_M_manager)
   b60f4:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b60f6:	4604      	mov	r4, r0
      if (_M_manager)
   b60f8:	b113      	cbz	r3, b6100 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b60fa:	2203      	movs	r2, #3
   b60fc:	4601      	mov	r1, r0
   b60fe:	4798      	blx	r3
    }
   b6100:	4620      	mov	r0, r4
   b6102:	bd10      	pop	{r4, pc}

000b6104 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b6104:	b513      	push	{r0, r1, r4, lr}
   b6106:	460b      	mov	r3, r1
   b6108:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b610a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b610e:	466c      	mov	r4, sp
   b6110:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6114:	e893 0003 	ldmia.w	r3, {r0, r1}
   b6118:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b611c:	e894 0003 	ldmia.w	r4, {r0, r1}
   b6120:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b6124:	b002      	add	sp, #8
   b6126:	bd10      	pop	{r4, pc}

000b6128 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6128:	4802      	ldr	r0, [pc, #8]	; (b6134 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b612a:	2300      	movs	r3, #0
   b612c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b612e:	f7ff bd47 	b.w	b5bc0 <os_mutex_recursive_create>
   b6132:	bf00      	nop
   b6134:	2003e68c 	.word	0x2003e68c

000b6138 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6138:	4770      	bx	lr

000b613a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b613a:	2000      	movs	r0, #0
   b613c:	4770      	bx	lr

000b613e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b613e:	b510      	push	{r4, lr}
   b6140:	2110      	movs	r1, #16
   b6142:	4604      	mov	r4, r0
   b6144:	f7fe fe8b 	bl	b4e5e <_ZdlPvj>
   b6148:	4620      	mov	r0, r4
   b614a:	bd10      	pop	{r4, pc}

000b614c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b614c:	b508      	push	{r3, lr}
      { delete this; }
   b614e:	f7ff fff6 	bl	b613e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b6152:	bd08      	pop	{r3, pc}

000b6154 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b6154:	b530      	push	{r4, r5, lr}
        type_(type) {
   b6156:	2200      	movs	r2, #0
   b6158:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b615c:	6002      	str	r2, [r0, #0]
   b615e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6160:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b6162:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6164:	680c      	ldr	r4, [r1, #0]
   b6166:	8085      	strh	r5, [r0, #4]
   b6168:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b616a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b616c:	bd30      	pop	{r4, r5, pc}

000b616e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b616e:	b510      	push	{r4, lr}
   b6170:	4604      	mov	r4, r0
    free((void*)msg_);
   b6172:	6800      	ldr	r0, [r0, #0]
   b6174:	f7ff ff58 	bl	b6028 <free>
}
   b6178:	4620      	mov	r0, r4
   b617a:	bd10      	pop	{r4, pc}

000b617c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b617c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b617e:	68c4      	ldr	r4, [r0, #12]
   b6180:	b1f4      	cbz	r4, b61c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   b6182:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b6184:	2b02      	cmp	r3, #2
   b6186:	d103      	bne.n	b6190 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b6188:	f104 000c 	add.w	r0, r4, #12
   b618c:	f7ff ffef 	bl	b616e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b6190:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b6192:	b135      	cbz	r5, b61a2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b6194:	4628      	mov	r0, r5
   b6196:	f7ff ffac 	bl	b60f2 <_ZNSt14_Function_baseD1Ev>
   b619a:	2110      	movs	r1, #16
   b619c:	4628      	mov	r0, r5
   b619e:	f7fe fe5e 	bl	b4e5e <_ZdlPvj>
   b61a2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b61a4:	b135      	cbz	r5, b61b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b61a6:	4628      	mov	r0, r5
   b61a8:	f7ff ffa3 	bl	b60f2 <_ZNSt14_Function_baseD1Ev>
   b61ac:	2110      	movs	r1, #16
   b61ae:	4628      	mov	r0, r5
   b61b0:	f7fe fe55 	bl	b4e5e <_ZdlPvj>
   b61b4:	4620      	mov	r0, r4
   b61b6:	2114      	movs	r1, #20
   b61b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b61bc:	f7fe be4f 	b.w	b4e5e <_ZdlPvj>
   b61c0:	bd38      	pop	{r3, r4, r5, pc}

000b61c2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b61c2:	680b      	ldr	r3, [r1, #0]
   b61c4:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b61c6:	684b      	ldr	r3, [r1, #4]
   b61c8:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b61ca:	b113      	cbz	r3, b61d2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b61cc:	685a      	ldr	r2, [r3, #4]
   b61ce:	3201      	adds	r2, #1
   b61d0:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b61d2:	4770      	bx	lr

000b61d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b61d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b61d6:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b61d8:	4668      	mov	r0, sp
   b61da:	460d      	mov	r5, r1
   b61dc:	f7ff fff1 	bl	b61c2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b61e0:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b61e2:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b61e4:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b61e6:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b61e8:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b61ea:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b61ec:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b61ee:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b61f0:	f7ff ff55 	bl	b609e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b61f4:	b135      	cbz	r5, b6204 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b61f6:	1d28      	adds	r0, r5, #4
   b61f8:	f7ff ff51 	bl	b609e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b61fc:	2108      	movs	r1, #8
   b61fe:	4628      	mov	r0, r5
   b6200:	f7fe fe2d 	bl	b4e5e <_ZdlPvj>
        return p;
    }
   b6204:	4620      	mov	r0, r4
   b6206:	b003      	add	sp, #12
   b6208:	bd30      	pop	{r4, r5, pc}

000b620a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b620a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b620c:	b510      	push	{r4, lr}
      if (_M_empty())
   b620e:	b90a      	cbnz	r2, b6214 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b6210:	f001 f8ff 	bl	b7412 <_ZSt25__throw_bad_function_callv>
    }
   b6214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6218:	68c3      	ldr	r3, [r0, #12]
   b621a:	4718      	bx	r3

000b621c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b621c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b621e:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b6220:	f100 0110 	add.w	r1, r0, #16
   b6224:	f7ff fff1 	bl	b620a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b6228:	bd08      	pop	{r3, pc}

000b622a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b622a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b622c:	b510      	push	{r4, lr}
      if (_M_empty())
   b622e:	b90a      	cbnz	r2, b6234 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b6230:	f001 f8ef 	bl	b7412 <_ZSt25__throw_bad_function_callv>
    }
   b6234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6238:	68c3      	ldr	r3, [r0, #12]
   b623a:	4718      	bx	r3

000b623c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b623c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b623e:	6800      	ldr	r0, [r0, #0]
   b6240:	f100 0110 	add.w	r1, r0, #16
   b6244:	f7ff fff1 	bl	b622a <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b6248:	bd08      	pop	{r3, pc}
	...

000b624c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b624c:	b538      	push	{r3, r4, r5, lr}
   b624e:	2300      	movs	r3, #0
   b6250:	4604      	mov	r4, r0
   b6252:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6254:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b6256:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6258:	f7fe fdfd 	bl	b4e56 <_Znwj>
   b625c:	b128      	cbz	r0, b626a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b625e:	2301      	movs	r3, #1
   b6260:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b6264:	4b02      	ldr	r3, [pc, #8]	; (b6270 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b6266:	6003      	str	r3, [r0, #0]
   b6268:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b626a:	6020      	str	r0, [r4, #0]
	}
   b626c:	4620      	mov	r0, r4
   b626e:	bd38      	pop	{r3, r4, r5, pc}
   b6270:	000b7830 	.word	0x000b7830

000b6274 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b6274:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6276:	2300      	movs	r3, #0
   b6278:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b627a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b627c:	4604      	mov	r4, r0
   b627e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6280:	b12b      	cbz	r3, b628e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6282:	2202      	movs	r2, #2
   b6284:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6286:	68eb      	ldr	r3, [r5, #12]
   b6288:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b628a:	68ab      	ldr	r3, [r5, #8]
   b628c:	60a3      	str	r3, [r4, #8]
    }
   b628e:	4620      	mov	r0, r4
   b6290:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6294 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b6294:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6296:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6298:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b629a:	4668      	mov	r0, sp
   b629c:	f7ff ff5a 	bl	b6154 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b62a0:	f04f 0302 	mov.w	r3, #2
   b62a4:	e8d4 2f4f 	ldrexb	r2, [r4]
   b62a8:	2a00      	cmp	r2, #0
   b62aa:	d103      	bne.n	b62b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b62ac:	e8c4 3f41 	strexb	r1, r3, [r4]
   b62b0:	2900      	cmp	r1, #0
   b62b2:	d1f7      	bne.n	b62a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b62b4:	d125      	bne.n	b6302 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b62b6:	f104 050c 	add.w	r5, r4, #12
   b62ba:	4669      	mov	r1, sp
   b62bc:	4628      	mov	r0, r5
   b62be:	f7ff ff49 	bl	b6154 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b62c2:	f3bf 8f5b 	dmb	ish
   b62c6:	2301      	movs	r3, #1
   b62c8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b62ca:	2000      	movs	r0, #0
   b62cc:	f104 0308 	add.w	r3, r4, #8
   b62d0:	f3bf 8f5b 	dmb	ish
   b62d4:	e853 6f00 	ldrex	r6, [r3]
   b62d8:	e843 0200 	strex	r2, r0, [r3]
   b62dc:	2a00      	cmp	r2, #0
   b62de:	d1f9      	bne.n	b62d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b62e0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b62e4:	b16e      	cbz	r6, b6302 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b62e6:	f7ff fdb3 	bl	b5e50 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b62ea:	b178      	cbz	r0, b630c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b62ec:	4629      	mov	r1, r5
   b62ee:	4630      	mov	r0, r6
   b62f0:	f7ff ff8b 	bl	b620a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b62f4:	4630      	mov	r0, r6
   b62f6:	f7ff fefc 	bl	b60f2 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b62fa:	2110      	movs	r1, #16
   b62fc:	4630      	mov	r0, r6
   b62fe:	f7fe fdae 	bl	b4e5e <_ZdlPvj>
        p_->setError(std::move(error));
   b6302:	4668      	mov	r0, sp
   b6304:	f7ff ff33 	bl	b616e <_ZN8particle5ErrorD1Ev>
    }
   b6308:	b009      	add	sp, #36	; 0x24
   b630a:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b630c:	4631      	mov	r1, r6
   b630e:	a802      	add	r0, sp, #8
   b6310:	f7ff ffb0 	bl	b6274 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6314:	68e0      	ldr	r0, [r4, #12]
   b6316:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b631a:	b108      	cbz	r0, b6320 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b631c:	f001 f8e0 	bl	b74e0 <strdup>
        type_(type) {
   b6320:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6322:	2010      	movs	r0, #16
   b6324:	f8ad 501c 	strh.w	r5, [sp, #28]
   b6328:	f7fe fd95 	bl	b4e56 <_Znwj>
   b632c:	4605      	mov	r5, r0
   b632e:	b1e8      	cbz	r0, b636c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b6330:	2700      	movs	r7, #0
   b6332:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6334:	2018      	movs	r0, #24
   b6336:	f7fe fd8e 	bl	b4e56 <_Znwj>
   b633a:	4604      	mov	r4, r0
   b633c:	b188      	cbz	r0, b6362 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b633e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b6340:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6342:	a802      	add	r0, sp, #8
   b6344:	f7ff fede 	bl	b6104 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6348:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b634a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b634c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b634e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6350:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6352:	a906      	add	r1, sp, #24
   b6354:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6356:	60e3      	str	r3, [r4, #12]
   b6358:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b635c:	9205      	str	r2, [sp, #20]
   b635e:	f7ff fef9 	bl	b6154 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b6362:	4b08      	ldr	r3, [pc, #32]	; (b6384 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b6364:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6366:	4b08      	ldr	r3, [pc, #32]	; (b6388 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6368:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b636a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b636c:	a806      	add	r0, sp, #24
   b636e:	f7ff fefe 	bl	b616e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6372:	a802      	add	r0, sp, #8
   b6374:	f7ff febd 	bl	b60f2 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6378:	2200      	movs	r2, #0
   b637a:	4629      	mov	r1, r5
   b637c:	4803      	ldr	r0, [pc, #12]	; (b638c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b637e:	f7ff fd6f 	bl	b5e60 <application_thread_invoke>
   b6382:	e7b7      	b.n	b62f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b6384:	000b621d 	.word	0x000b621d
   b6388:	000b64a1 	.word	0x000b64a1
   b638c:	000b60cb 	.word	0x000b60cb

000b6390 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b6390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6394:	b08b      	sub	sp, #44	; 0x2c
   b6396:	4605      	mov	r5, r0
   b6398:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b639c:	460f      	mov	r7, r1
   b639e:	4690      	mov	r8, r2
   b63a0:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b63a2:	f7ff fd91 	bl	b5ec8 <spark_cloud_flag_connected>
   b63a6:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b63a8:	4683      	mov	fp, r0
   b63aa:	bb38      	cbnz	r0, b63fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b63ac:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b63b0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b63b2:	a905      	add	r1, sp, #20
   b63b4:	4630      	mov	r0, r6
   b63b6:	f8ad 3018 	strh.w	r3, [sp, #24]
   b63ba:	f7ff fecb 	bl	b6154 <_ZN8particle5ErrorC1EOS0_>
   b63be:	2014      	movs	r0, #20
   b63c0:	f7fe fd49 	bl	b4e56 <_Znwj>
   b63c4:	4604      	mov	r4, r0
   b63c6:	b148      	cbz	r0, b63dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b63c8:	2302      	movs	r3, #2
   b63ca:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b63cc:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b63ce:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b63d2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b63d4:	4631      	mov	r1, r6
   b63d6:	300c      	adds	r0, #12
   b63d8:	f7ff febc 	bl	b6154 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b63dc:	4628      	mov	r0, r5
	: __shared_count(__p)
   b63de:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b63e0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b63e4:	f7ff ff32 	bl	b624c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b63e8:	4630      	mov	r0, r6
   b63ea:	f7ff fec0 	bl	b616e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b63ee:	a805      	add	r0, sp, #20
   b63f0:	f7ff febd 	bl	b616e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b63f4:	4628      	mov	r0, r5
   b63f6:	b00b      	add	sp, #44	; 0x2c
   b63f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b63fc:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b63fe:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b6400:	2014      	movs	r0, #20
   b6402:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b6406:	9307      	str	r3, [sp, #28]
   b6408:	f7fe fd25 	bl	b4e56 <_Znwj>
   b640c:	4601      	mov	r1, r0
   b640e:	b118      	cbz	r0, b6418 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6410:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b6414:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6416:	7044      	strb	r4, [r0, #1]
   b6418:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b641a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b641c:	f7ff ff16 	bl	b624c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b6420:	4b1e      	ldr	r3, [pc, #120]	; (b649c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b6422:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b6424:	2008      	movs	r0, #8
   b6426:	f7fe fd16 	bl	b4e56 <_Znwj>
   b642a:	4604      	mov	r4, r0
   b642c:	b110      	cbz	r0, b6434 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b642e:	a903      	add	r1, sp, #12
   b6430:	f7ff fec7 	bl	b61c2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6434:	9600      	str	r6, [sp, #0]
   b6436:	fa5f f38a 	uxtb.w	r3, sl
   b643a:	464a      	mov	r2, r9
   b643c:	4641      	mov	r1, r8
   b643e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b6440:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6442:	f7ff fd49 	bl	b5ed8 <spark_send_event>
   b6446:	b9b8      	cbnz	r0, b6478 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b6448:	9b03      	ldr	r3, [sp, #12]
   b644a:	785b      	ldrb	r3, [r3, #1]
   b644c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b6450:	b993      	cbnz	r3, b6478 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b6452:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b6456:	a905      	add	r1, sp, #20
   b6458:	a803      	add	r0, sp, #12
   b645a:	9205      	str	r2, [sp, #20]
   b645c:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6460:	f7ff ff18 	bl	b6294 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6464:	a805      	add	r0, sp, #20
   b6466:	f7ff fe82 	bl	b616e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b646a:	a805      	add	r0, sp, #20
   b646c:	9909      	ldr	r1, [sp, #36]	; 0x24
   b646e:	f7ff feb1 	bl	b61d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b6472:	a806      	add	r0, sp, #24
   b6474:	f7ff fe13 	bl	b609e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6478:	a903      	add	r1, sp, #12
   b647a:	a805      	add	r0, sp, #20
   b647c:	f7ff fea1 	bl	b61c2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6480:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6482:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6484:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b6486:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b6488:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b648a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b648c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b648e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b6490:	f7ff fe05 	bl	b609e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6494:	a804      	add	r0, sp, #16
   b6496:	f7ff fe02 	bl	b609e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b649a:	e7ab      	b.n	b63f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b649c:	000b6565 	.word	0x000b6565

000b64a0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b64a0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b64a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b64a4:	4605      	mov	r5, r0
	switch (__op)
   b64a6:	d103      	bne.n	b64b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b64a8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b64aa:	6003      	str	r3, [r0, #0]
      }
   b64ac:	2000      	movs	r0, #0
   b64ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b64b0:	2a02      	cmp	r2, #2
   b64b2:	d010      	beq.n	b64d6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b64b4:	2a03      	cmp	r2, #3
   b64b6:	d1f9      	bne.n	b64ac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b64b8:	6804      	ldr	r4, [r0, #0]
   b64ba:	2c00      	cmp	r4, #0
   b64bc:	d0f6      	beq.n	b64ac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b64be:	f104 0010 	add.w	r0, r4, #16
   b64c2:	f7ff fe54 	bl	b616e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b64c6:	4620      	mov	r0, r4
   b64c8:	f7ff fe13 	bl	b60f2 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b64cc:	2118      	movs	r1, #24
   b64ce:	4620      	mov	r0, r4
   b64d0:	f7fe fcc5 	bl	b4e5e <_ZdlPvj>
   b64d4:	e7ea      	b.n	b64ac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b64d6:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b64d8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b64da:	f7fe fcbc 	bl	b4e56 <_Znwj>
   b64de:	4604      	mov	r4, r0
   b64e0:	b150      	cbz	r0, b64f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b64e2:	4631      	mov	r1, r6
   b64e4:	f7ff fec6 	bl	b6274 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b64e8:	6930      	ldr	r0, [r6, #16]
   b64ea:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b64ee:	b108      	cbz	r0, b64f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b64f0:	f000 fff6 	bl	b74e0 <strdup>
        type_(type) {
   b64f4:	6120      	str	r0, [r4, #16]
   b64f6:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b64f8:	602c      	str	r4, [r5, #0]
	}
   b64fa:	e7d7      	b.n	b64ac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b64fc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b64fc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b64fe:	2300      	movs	r3, #0
   b6500:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6502:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6504:	4604      	mov	r4, r0
   b6506:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6508:	b12b      	cbz	r3, b6516 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b650a:	2202      	movs	r2, #2
   b650c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b650e:	68eb      	ldr	r3, [r5, #12]
   b6510:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6512:	68ab      	ldr	r3, [r5, #8]
   b6514:	60a3      	str	r3, [r4, #8]
    }
   b6516:	4620      	mov	r0, r4
   b6518:	bd38      	pop	{r3, r4, r5, pc}

000b651a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b651a:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b651c:	b570      	push	{r4, r5, r6, lr}
   b651e:	4604      	mov	r4, r0
	switch (__op)
   b6520:	d103      	bne.n	b652a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6522:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6524:	6003      	str	r3, [r0, #0]
      }
   b6526:	2000      	movs	r0, #0
   b6528:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b652a:	2a02      	cmp	r2, #2
   b652c:	d00c      	beq.n	b6548 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b652e:	2a03      	cmp	r2, #3
   b6530:	d1f9      	bne.n	b6526 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6532:	6804      	ldr	r4, [r0, #0]
   b6534:	2c00      	cmp	r4, #0
   b6536:	d0f6      	beq.n	b6526 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b6538:	4620      	mov	r0, r4
   b653a:	f7ff fdda 	bl	b60f2 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b653e:	2114      	movs	r1, #20
   b6540:	4620      	mov	r0, r4
   b6542:	f7fe fc8c 	bl	b4e5e <_ZdlPvj>
   b6546:	e7ee      	b.n	b6526 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6548:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b654a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b654c:	f7fe fc83 	bl	b4e56 <_Znwj>
   b6550:	4605      	mov	r5, r0
   b6552:	b120      	cbz	r0, b655e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
   b6554:	4631      	mov	r1, r6
   b6556:	f7ff ffd1 	bl	b64fc <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b655a:	7c33      	ldrb	r3, [r6, #16]
   b655c:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b655e:	6025      	str	r5, [r4, #0]
	}
   b6560:	e7e1      	b.n	b6526 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	...

000b6564 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b6564:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6566:	b089      	sub	sp, #36	; 0x24
   b6568:	4604      	mov	r4, r0
   b656a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b656c:	a801      	add	r0, sp, #4
   b656e:	4611      	mov	r1, r2
   b6570:	f7ff fe30 	bl	b61d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b6574:	b1a4      	cbz	r4, b65a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b6576:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6578:	b11d      	cbz	r5, b6582 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b657a:	4628      	mov	r0, r5
   b657c:	f000 ffb0 	bl	b74e0 <strdup>
   b6580:	4605      	mov	r5, r0
   b6582:	a801      	add	r0, sp, #4
   b6584:	a903      	add	r1, sp, #12
        type_(type) {
   b6586:	9503      	str	r5, [sp, #12]
   b6588:	f8ad 4010 	strh.w	r4, [sp, #16]
   b658c:	f7ff fe82 	bl	b6294 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6590:	a803      	add	r0, sp, #12
   b6592:	f7ff fdec 	bl	b616e <_ZN8particle5ErrorD1Ev>
   b6596:	a802      	add	r0, sp, #8
   b6598:	f7ff fd81 	bl	b609e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b659c:	b009      	add	sp, #36	; 0x24
   b659e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b65a0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b65a2:	2301      	movs	r3, #1
   b65a4:	e8d5 2f4f 	ldrexb	r2, [r5]
   b65a8:	2a00      	cmp	r2, #0
   b65aa:	d103      	bne.n	b65b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b65ac:	e8c5 3f41 	strexb	r1, r3, [r5]
   b65b0:	2900      	cmp	r1, #0
   b65b2:	d1f7      	bne.n	b65a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b65b4:	d1ef      	bne.n	b6596 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b65b6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b65b8:	f3bf 8f5b 	dmb	ish
   b65bc:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b65be:	1d2b      	adds	r3, r5, #4
   b65c0:	f3bf 8f5b 	dmb	ish
   b65c4:	e853 6f00 	ldrex	r6, [r3]
   b65c8:	e843 4200 	strex	r2, r4, [r3]
   b65cc:	2a00      	cmp	r2, #0
   b65ce:	d1f9      	bne.n	b65c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b65d0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b65d4:	2e00      	cmp	r6, #0
   b65d6:	d0de      	beq.n	b6596 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b65d8:	4620      	mov	r0, r4
   b65da:	f7ff fc39 	bl	b5e50 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b65de:	4607      	mov	r7, r0
   b65e0:	b160      	cbz	r0, b65fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b65e2:	f105 010c 	add.w	r1, r5, #12
   b65e6:	4630      	mov	r0, r6
   b65e8:	f7ff fe1f 	bl	b622a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b65ec:	4630      	mov	r0, r6
   b65ee:	f7ff fd80 	bl	b60f2 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b65f2:	2110      	movs	r1, #16
   b65f4:	4630      	mov	r0, r6
   b65f6:	f7fe fc32 	bl	b4e5e <_ZdlPvj>
   b65fa:	e7cc      	b.n	b6596 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b65fc:	4631      	mov	r1, r6
   b65fe:	a803      	add	r0, sp, #12
   b6600:	f7ff ff7c 	bl	b64fc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6604:	7b2b      	ldrb	r3, [r5, #12]
   b6606:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b660a:	2010      	movs	r0, #16
   b660c:	f7fe fc23 	bl	b4e56 <_Znwj>
   b6610:	4605      	mov	r5, r0
   b6612:	b1d0      	cbz	r0, b664a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b6614:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6616:	2014      	movs	r0, #20
   b6618:	f7fe fc1d 	bl	b4e56 <_Znwj>
   b661c:	4604      	mov	r4, r0
   b661e:	b178      	cbz	r0, b6640 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b6620:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6622:	4601      	mov	r1, r0
   b6624:	a803      	add	r0, sp, #12
   b6626:	f7ff fd6d 	bl	b6104 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b662a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b662c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b662e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6630:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b6632:	9205      	str	r2, [sp, #20]
   b6634:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6636:	60e3      	str	r3, [r4, #12]
   b6638:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b663c:	9206      	str	r2, [sp, #24]
   b663e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6640:	4b06      	ldr	r3, [pc, #24]	; (b665c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b6642:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6644:	4b06      	ldr	r3, [pc, #24]	; (b6660 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6646:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6648:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b664a:	a803      	add	r0, sp, #12
   b664c:	f7ff fd51 	bl	b60f2 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6650:	2200      	movs	r2, #0
   b6652:	4629      	mov	r1, r5
   b6654:	4803      	ldr	r0, [pc, #12]	; (b6664 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b6656:	f7ff fc03 	bl	b5e60 <application_thread_invoke>
   b665a:	e7c7      	b.n	b65ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b665c:	000b623d 	.word	0x000b623d
   b6660:	000b651b 	.word	0x000b651b
   b6664:	000b60cb 	.word	0x000b60cb

000b6668 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6668:	2200      	movs	r2, #0
   b666a:	6840      	ldr	r0, [r0, #4]
   b666c:	4611      	mov	r1, r2
   b666e:	f7ff bc9b 	b.w	b5fa8 <network_listening>

000b6672 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6672:	2200      	movs	r2, #0
   b6674:	6840      	ldr	r0, [r0, #4]
   b6676:	4611      	mov	r1, r2
   b6678:	f7ff bca6 	b.w	b5fc8 <network_get_listen_timeout>

000b667c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b667c:	6840      	ldr	r0, [r0, #4]
   b667e:	2200      	movs	r2, #0
   b6680:	f7ff bc9a 	b.w	b5fb8 <network_set_listen_timeout>

000b6684 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6684:	6840      	ldr	r0, [r0, #4]
   b6686:	2200      	movs	r2, #0
   b6688:	f081 0101 	eor.w	r1, r1, #1
   b668c:	f7ff bc84 	b.w	b5f98 <network_listen>

000b6690 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6690:	2300      	movs	r3, #0
   b6692:	6840      	ldr	r0, [r0, #4]
   b6694:	461a      	mov	r2, r3
   b6696:	4619      	mov	r1, r3
   b6698:	f7ff bc76 	b.w	b5f88 <network_off>

000b669c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b669c:	2300      	movs	r3, #0
   b669e:	6840      	ldr	r0, [r0, #4]
   b66a0:	461a      	mov	r2, r3
   b66a2:	4619      	mov	r1, r3
   b66a4:	f7ff bc68 	b.w	b5f78 <network_on>

000b66a8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b66a8:	2200      	movs	r2, #0
   b66aa:	6840      	ldr	r0, [r0, #4]
   b66ac:	4611      	mov	r1, r2
   b66ae:	f7ff bc5b 	b.w	b5f68 <network_ready>

000b66b2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b66b2:	2200      	movs	r2, #0
   b66b4:	6840      	ldr	r0, [r0, #4]
   b66b6:	4611      	mov	r1, r2
   b66b8:	f7ff bc46 	b.w	b5f48 <network_connecting>

000b66bc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b66bc:	6840      	ldr	r0, [r0, #4]
   b66be:	2200      	movs	r2, #0
   b66c0:	2102      	movs	r1, #2
   b66c2:	f7ff bc49 	b.w	b5f58 <network_disconnect>

000b66c6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b66c6:	2300      	movs	r3, #0
   b66c8:	6840      	ldr	r0, [r0, #4]
   b66ca:	461a      	mov	r2, r3
   b66cc:	f7ff bc34 	b.w	b5f38 <network_connect>

000b66d0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b66d0:	4b02      	ldr	r3, [pc, #8]	; (b66dc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b66d2:	2203      	movs	r2, #3
   b66d4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b66d6:	4a02      	ldr	r2, [pc, #8]	; (b66e0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b66d8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b66da:	4770      	bx	lr
   b66dc:	2003e690 	.word	0x2003e690
   b66e0:	000b784c 	.word	0x000b784c

000b66e4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b66e4:	4770      	bx	lr

000b66e6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b66e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b66e8:	4606      	mov	r6, r0
   b66ea:	4615      	mov	r5, r2
   b66ec:	460c      	mov	r4, r1
   b66ee:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b66f0:	42bc      	cmp	r4, r7
   b66f2:	d006      	beq.n	b6702 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b66f4:	6833      	ldr	r3, [r6, #0]
   b66f6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b66fa:	689b      	ldr	r3, [r3, #8]
   b66fc:	4630      	mov	r0, r6
   b66fe:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6700:	e7f6      	b.n	b66f0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6702:	4628      	mov	r0, r5
   b6704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6706 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6706:	7c00      	ldrb	r0, [r0, #16]
   b6708:	2200      	movs	r2, #0
   b670a:	f7ff baa1 	b.w	b5c50 <hal_i2c_write>

000b670e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b670e:	7c00      	ldrb	r0, [r0, #16]
   b6710:	2100      	movs	r1, #0
   b6712:	f7ff baa5 	b.w	b5c60 <hal_i2c_available>

000b6716 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6716:	7c00      	ldrb	r0, [r0, #16]
   b6718:	2100      	movs	r1, #0
   b671a:	f7ff baa9 	b.w	b5c70 <hal_i2c_read>

000b671e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b671e:	7c00      	ldrb	r0, [r0, #16]
   b6720:	2100      	movs	r1, #0
   b6722:	f7ff baad 	b.w	b5c80 <hal_i2c_peek>

000b6726 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6726:	7c00      	ldrb	r0, [r0, #16]
   b6728:	2100      	movs	r1, #0
   b672a:	f7ff bab1 	b.w	b5c90 <hal_i2c_flush>

000b672e <_ZN7TwoWireD0Ev>:
   b672e:	b510      	push	{r4, lr}
   b6730:	2114      	movs	r1, #20
   b6732:	4604      	mov	r4, r0
   b6734:	f7fe fb93 	bl	b4e5e <_ZdlPvj>
   b6738:	4620      	mov	r0, r4
   b673a:	bd10      	pop	{r4, pc}

000b673c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b673c:	b538      	push	{r3, r4, r5, lr}
   b673e:	4604      	mov	r4, r0
   b6740:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6746:	2200      	movs	r2, #0
   b6748:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b674c:	4b09      	ldr	r3, [pc, #36]	; (b6774 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b674e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6750:	4608      	mov	r0, r1
   b6752:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6754:	4629      	mov	r1, r5
   b6756:	f7ff faa3 	bl	b5ca0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b675a:	30bf      	adds	r0, #191	; 0xbf
   b675c:	d108      	bne.n	b6770 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b675e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6760:	07db      	lsls	r3, r3, #31
   b6762:	d505      	bpl.n	b6770 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6764:	6868      	ldr	r0, [r5, #4]
   b6766:	f7ff fc5f 	bl	b6028 <free>
    free(conf.tx_buffer);
   b676a:	68e8      	ldr	r0, [r5, #12]
   b676c:	f7ff fc5c 	bl	b6028 <free>
}
   b6770:	4620      	mov	r0, r4
   b6772:	bd38      	pop	{r3, r4, r5, pc}
   b6774:	000b7890 	.word	0x000b7890

000b6778 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b6778:	7c00      	ldrb	r0, [r0, #16]
   b677a:	2200      	movs	r2, #0
   b677c:	f7ff ba48 	b.w	b5c10 <hal_i2c_set_speed>

000b6780 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6780:	2300      	movs	r3, #0
   b6782:	7c00      	ldrb	r0, [r0, #16]
   b6784:	461a      	mov	r2, r3
   b6786:	4619      	mov	r1, r3
   b6788:	f7ff ba4a 	b.w	b5c20 <hal_i2c_begin>

000b678c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b678c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b678e:	2200      	movs	r2, #0
   b6790:	2314      	movs	r3, #20
   b6792:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b6796:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b679a:	780b      	ldrb	r3, [r1, #0]
   b679c:	f88d 3008 	strb.w	r3, [sp, #8]
   b67a0:	684b      	ldr	r3, [r1, #4]
   b67a2:	9303      	str	r3, [sp, #12]
   b67a4:	68cb      	ldr	r3, [r1, #12]
   b67a6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b67a8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b67aa:	7a0b      	ldrb	r3, [r1, #8]
   b67ac:	9305      	str	r3, [sp, #20]
   b67ae:	a901      	add	r1, sp, #4
   b67b0:	f7ff fa7e 	bl	b5cb0 <hal_i2c_request_ex>
}
   b67b4:	b007      	add	sp, #28
   b67b6:	f85d fb04 	ldr.w	pc, [sp], #4

000b67ba <_ZN7TwoWire11requestFromEhjh>:
{
   b67ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b67bc:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b67be:	f88d 1000 	strb.w	r1, [sp]
   b67c2:	f04f 0164 	mov.w	r1, #100	; 0x64
   b67c6:	9103      	str	r1, [sp, #12]
   b67c8:	bf18      	it	ne
   b67ca:	2301      	movne	r3, #1
   b67cc:	4669      	mov	r1, sp
    size_ = size;
   b67ce:	9201      	str	r2, [sp, #4]
   b67d0:	f88d 3008 	strb.w	r3, [sp, #8]
   b67d4:	f7ff ffda 	bl	b678c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b67d8:	b005      	add	sp, #20
   b67da:	f85d fb04 	ldr.w	pc, [sp], #4

000b67de <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b67de:	2301      	movs	r3, #1
   b67e0:	f7ff bfeb 	b.w	b67ba <_ZN7TwoWire11requestFromEhjh>

000b67e4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b67e4:	7c00      	ldrb	r0, [r0, #16]
   b67e6:	2200      	movs	r2, #0
   b67e8:	f7ff ba22 	b.w	b5c30 <hal_i2c_begin_transmission>

000b67ec <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b67ec:	b2c9      	uxtb	r1, r1
   b67ee:	f7ff bff9 	b.w	b67e4 <_ZN7TwoWire17beginTransmissionEh>

000b67f2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b67f2:	7c00      	ldrb	r0, [r0, #16]
   b67f4:	2200      	movs	r2, #0
   b67f6:	f7ff ba23 	b.w	b5c40 <hal_i2c_end_transmission>

000b67fa <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b67fa:	2101      	movs	r1, #1
   b67fc:	f7ff bff9 	b.w	b67f2 <_ZN7TwoWire15endTransmissionEh>

000b6800 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6800:	4770      	bx	lr

000b6802 <_ZN9IPAddressD0Ev>:
   b6802:	b510      	push	{r4, lr}
   b6804:	2118      	movs	r1, #24
   b6806:	4604      	mov	r4, r0
   b6808:	f7fe fb29 	bl	b4e5e <_ZdlPvj>
   b680c:	4620      	mov	r0, r4
   b680e:	bd10      	pop	{r4, pc}

000b6810 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6810:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6812:	7d03      	ldrb	r3, [r0, #20]
   b6814:	2b06      	cmp	r3, #6
{
   b6816:	b08d      	sub	sp, #52	; 0x34
   b6818:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b681a:	f100 0704 	add.w	r7, r0, #4
   b681e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6822:	d012      	beq.n	b684a <_ZNK9IPAddress7printToER5Print+0x3a>
   b6824:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6828:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b682c:	220a      	movs	r2, #10
   b682e:	4630      	mov	r0, r6
   b6830:	f000 f977 	bl	b6b22 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6834:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6836:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6838:	d019      	beq.n	b686e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b683a:	2c00      	cmp	r4, #0
   b683c:	d0f4      	beq.n	b6828 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b683e:	212e      	movs	r1, #46	; 0x2e
   b6840:	4630      	mov	r0, r6
   b6842:	f000 f955 	bl	b6af0 <_ZN5Print5printEc>
   b6846:	4404      	add	r4, r0
   b6848:	e7ee      	b.n	b6828 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b684a:	232f      	movs	r3, #47	; 0x2f
   b684c:	466a      	mov	r2, sp
   b684e:	4639      	mov	r1, r7
   b6850:	200a      	movs	r0, #10
		buf[0] = 0;
   b6852:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6856:	f7ff fa33 	bl	b5cc0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b685a:	4668      	mov	r0, sp
   b685c:	f7fe fab8 	bl	b4dd0 <strlen>
   b6860:	6833      	ldr	r3, [r6, #0]
   b6862:	4602      	mov	r2, r0
   b6864:	68db      	ldr	r3, [r3, #12]
   b6866:	4669      	mov	r1, sp
   b6868:	4630      	mov	r0, r6
   b686a:	4798      	blx	r3
   b686c:	4604      	mov	r4, r0
    }
    return n;
}
   b686e:	4620      	mov	r0, r4
   b6870:	b00d      	add	sp, #52	; 0x34
   b6872:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6874 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6874:	b510      	push	{r4, lr}
   b6876:	4b05      	ldr	r3, [pc, #20]	; (b688c <_ZN9IPAddressC1Ev+0x18>)
   b6878:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b687a:	2211      	movs	r2, #17
   b687c:	f840 3b04 	str.w	r3, [r0], #4
   b6880:	2100      	movs	r1, #0
   b6882:	f000 fdf7 	bl	b7474 <memset>
}
   b6886:	4620      	mov	r0, r4
   b6888:	bd10      	pop	{r4, pc}
   b688a:	bf00      	nop
   b688c:	000b78bc 	.word	0x000b78bc

000b6890 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6890:	4603      	mov	r3, r0
   b6892:	4a07      	ldr	r2, [pc, #28]	; (b68b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6894:	b510      	push	{r4, lr}
   b6896:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b689a:	f101 0210 	add.w	r2, r1, #16
   b689e:	f851 4b04 	ldr.w	r4, [r1], #4
   b68a2:	f843 4b04 	str.w	r4, [r3], #4
   b68a6:	4291      	cmp	r1, r2
   b68a8:	d1f9      	bne.n	b689e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b68aa:	780a      	ldrb	r2, [r1, #0]
   b68ac:	701a      	strb	r2, [r3, #0]
}
   b68ae:	bd10      	pop	{r4, pc}
   b68b0:	000b78bc 	.word	0x000b78bc

000b68b4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b68b4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b68b6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b68ba:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b68be:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b68c2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b68c6:	2304      	movs	r3, #4
   b68c8:	6041      	str	r1, [r0, #4]
   b68ca:	7503      	strb	r3, [r0, #20]
}
   b68cc:	bd10      	pop	{r4, pc}
	...

000b68d0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b68d0:	b507      	push	{r0, r1, r2, lr}
   b68d2:	4b06      	ldr	r3, [pc, #24]	; (b68ec <_ZN9IPAddressC1EPKh+0x1c>)
   b68d4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b68d6:	78cb      	ldrb	r3, [r1, #3]
   b68d8:	9300      	str	r3, [sp, #0]
   b68da:	788b      	ldrb	r3, [r1, #2]
   b68dc:	784a      	ldrb	r2, [r1, #1]
   b68de:	7809      	ldrb	r1, [r1, #0]
   b68e0:	f7ff ffe8 	bl	b68b4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b68e4:	b003      	add	sp, #12
   b68e6:	f85d fb04 	ldr.w	pc, [sp], #4
   b68ea:	bf00      	nop
   b68ec:	000b78bc 	.word	0x000b78bc

000b68f0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b68f0:	4b01      	ldr	r3, [pc, #4]	; (b68f8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b68f2:	4a02      	ldr	r2, [pc, #8]	; (b68fc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b68f4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b68f6:	4770      	bx	lr
   b68f8:	2003e698 	.word	0x2003e698
   b68fc:	000b78c8 	.word	0x000b78c8

000b6900 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6900:	2300      	movs	r3, #0
   b6902:	6840      	ldr	r0, [r0, #4]
   b6904:	461a      	mov	r2, r3
   b6906:	f7ff bb17 	b.w	b5f38 <network_connect>

000b690a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b690a:	6840      	ldr	r0, [r0, #4]
   b690c:	2200      	movs	r2, #0
   b690e:	2102      	movs	r1, #2
   b6910:	f7ff bb22 	b.w	b5f58 <network_disconnect>

000b6914 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6914:	2200      	movs	r2, #0
   b6916:	6840      	ldr	r0, [r0, #4]
   b6918:	4611      	mov	r1, r2
   b691a:	f7ff bb15 	b.w	b5f48 <network_connecting>

000b691e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b691e:	2200      	movs	r2, #0
   b6920:	6840      	ldr	r0, [r0, #4]
   b6922:	4611      	mov	r1, r2
   b6924:	f7ff bb20 	b.w	b5f68 <network_ready>

000b6928 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6928:	2300      	movs	r3, #0
   b692a:	6840      	ldr	r0, [r0, #4]
   b692c:	461a      	mov	r2, r3
   b692e:	4619      	mov	r1, r3
   b6930:	f7ff bb22 	b.w	b5f78 <network_on>

000b6934 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6934:	2300      	movs	r3, #0
   b6936:	6840      	ldr	r0, [r0, #4]
   b6938:	461a      	mov	r2, r3
   b693a:	4619      	mov	r1, r3
   b693c:	f7ff bb24 	b.w	b5f88 <network_off>

000b6940 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6940:	6840      	ldr	r0, [r0, #4]
   b6942:	2100      	movs	r1, #0
   b6944:	f7ff bb48 	b.w	b5fd8 <network_is_on>

000b6948 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6948:	6840      	ldr	r0, [r0, #4]
   b694a:	2100      	movs	r1, #0
   b694c:	f7ff bb4c 	b.w	b5fe8 <network_is_off>

000b6950 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6950:	6840      	ldr	r0, [r0, #4]
   b6952:	2200      	movs	r2, #0
   b6954:	f081 0101 	eor.w	r1, r1, #1
   b6958:	f7ff bb1e 	b.w	b5f98 <network_listen>

000b695c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b695c:	6840      	ldr	r0, [r0, #4]
   b695e:	2200      	movs	r2, #0
   b6960:	f7ff bb2a 	b.w	b5fb8 <network_set_listen_timeout>

000b6964 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6964:	2200      	movs	r2, #0
   b6966:	6840      	ldr	r0, [r0, #4]
   b6968:	4611      	mov	r1, r2
   b696a:	f7ff bb2d 	b.w	b5fc8 <network_get_listen_timeout>

000b696e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b696e:	2200      	movs	r2, #0
   b6970:	6840      	ldr	r0, [r0, #4]
   b6972:	4611      	mov	r1, r2
   b6974:	f7ff bb18 	b.w	b5fa8 <network_listening>

000b6978 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
   b6978:	6840      	ldr	r0, [r0, #4]
   b697a:	2100      	movs	r1, #0
   b697c:	f7ff bb44 	b.w	b6008 <network_is_preferred>

000b6980 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6984:	b095      	sub	sp, #84	; 0x54
   b6986:	4614      	mov	r4, r2
   b6988:	460d      	mov	r5, r1
   b698a:	4607      	mov	r7, r0
    IPAddress addr;
   b698c:	f7ff ff72 	bl	b6874 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6990:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6992:	221c      	movs	r2, #28
   b6994:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6996:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6998:	f000 fd6c 	bl	b7474 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b699c:	2340      	movs	r3, #64	; 0x40
   b699e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b69a0:	4620      	mov	r0, r4
   b69a2:	466b      	mov	r3, sp
   b69a4:	aa0c      	add	r2, sp, #48	; 0x30
   b69a6:	2100      	movs	r1, #0
   b69a8:	f7ff f99a 	bl	b5ce0 <netdb_getaddrinfo>
    if (!r) {
   b69ac:	4604      	mov	r4, r0
   b69ae:	2800      	cmp	r0, #0
   b69b0:	d14b      	bne.n	b6a4a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b69b2:	4602      	mov	r2, r0
   b69b4:	2101      	movs	r1, #1
   b69b6:	6868      	ldr	r0, [r5, #4]
   b69b8:	f7ff fad6 	bl	b5f68 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b69bc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b69be:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b69c0:	4622      	mov	r2, r4
   b69c2:	6868      	ldr	r0, [r5, #4]
   b69c4:	f7ff fad0 	bl	b5f68 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b69c8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b69ca:	4681      	mov	r9, r0
        bool ok = false;
   b69cc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b69ce:	2e00      	cmp	r6, #0
   b69d0:	d03b      	beq.n	b6a4a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b69d2:	2900      	cmp	r1, #0
   b69d4:	d139      	bne.n	b6a4a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b69d6:	6873      	ldr	r3, [r6, #4]
   b69d8:	2b02      	cmp	r3, #2
   b69da:	d003      	beq.n	b69e4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b69dc:	2b0a      	cmp	r3, #10
   b69de:	d011      	beq.n	b6a04 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b69e0:	69f6      	ldr	r6, [r6, #28]
   b69e2:	e7f4      	b.n	b69ce <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b69e4:	f1b8 0f00 	cmp.w	r8, #0
   b69e8:	d0fa      	beq.n	b69e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b69ea:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b69ec:	a806      	add	r0, sp, #24
   b69ee:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b69f0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b69f2:	f7ff ff6d 	bl	b68d0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b69f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b69f8:	1d3c      	adds	r4, r7, #4
   b69fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b69fc:	682b      	ldr	r3, [r5, #0]
   b69fe:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6a00:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6a02:	e7ed      	b.n	b69e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6a04:	f1b9 0f00 	cmp.w	r9, #0
   b6a08:	d0ea      	beq.n	b69e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6a0a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6a0c:	2210      	movs	r2, #16
   b6a0e:	a801      	add	r0, sp, #4
   b6a10:	f000 fd30 	bl	b7474 <memset>
                    a.v = 6;
   b6a14:	2306      	movs	r3, #6
   b6a16:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6a1a:	ad01      	add	r5, sp, #4
   b6a1c:	f104 0308 	add.w	r3, r4, #8
   b6a20:	3418      	adds	r4, #24
   b6a22:	6818      	ldr	r0, [r3, #0]
   b6a24:	6859      	ldr	r1, [r3, #4]
   b6a26:	462a      	mov	r2, r5
   b6a28:	c203      	stmia	r2!, {r0, r1}
   b6a2a:	3308      	adds	r3, #8
   b6a2c:	42a3      	cmp	r3, r4
   b6a2e:	4615      	mov	r5, r2
   b6a30:	d1f7      	bne.n	b6a22 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6a32:	a901      	add	r1, sp, #4
   b6a34:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6a36:	ad07      	add	r5, sp, #28
   b6a38:	f7ff ff2a 	bl	b6890 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6a3e:	1d3c      	adds	r4, r7, #4
   b6a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6a42:	682b      	ldr	r3, [r5, #0]
   b6a44:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6a46:	4649      	mov	r1, r9
   b6a48:	e7ca      	b.n	b69e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6a4a:	9800      	ldr	r0, [sp, #0]
   b6a4c:	f7ff f940 	bl	b5cd0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6a50:	4638      	mov	r0, r7
   b6a52:	b015      	add	sp, #84	; 0x54
   b6a54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6a58 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
   b6a58:	3803      	subs	r0, #3
   b6a5a:	2802      	cmp	r0, #2
   b6a5c:	bf9a      	itte	ls
   b6a5e:	4b02      	ldrls	r3, [pc, #8]	; (b6a68 <_ZN5spark12NetworkClass4fromEm+0x10>)
   b6a60:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
   b6a64:	4801      	ldrhi	r0, [pc, #4]	; (b6a6c <_ZN5spark12NetworkClass4fromEm+0x14>)
}
   b6a66:	4770      	bx	lr
   b6a68:	000b78cc 	.word	0x000b78cc
   b6a6c:	2003e69c 	.word	0x2003e69c

000b6a70 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
   b6a70:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
   b6a72:	2200      	movs	r2, #0
   b6a74:	6840      	ldr	r0, [r0, #4]
   b6a76:	f7ff fabf 	bl	b5ff8 <network_prefer>
}
   b6a7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
   b6a7e:	f7ff bfeb 	b.w	b6a58 <_ZN5spark12NetworkClass4fromEm>
	...

000b6a84 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6a84:	4b02      	ldr	r3, [pc, #8]	; (b6a90 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6a86:	4a03      	ldr	r2, [pc, #12]	; (b6a94 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6a88:	601a      	str	r2, [r3, #0]
   b6a8a:	2200      	movs	r2, #0
   b6a8c:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b6a8e:	4770      	bx	lr
   b6a90:	2003e69c 	.word	0x2003e69c
   b6a94:	000b78e0 	.word	0x000b78e0

000b6a98 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6a9a:	4606      	mov	r6, r0
   b6a9c:	460d      	mov	r5, r1
  size_t n = 0;
   b6a9e:	188f      	adds	r7, r1, r2
   b6aa0:	2400      	movs	r4, #0
  while (size--) {
   b6aa2:	42bd      	cmp	r5, r7
   b6aa4:	d00c      	beq.n	b6ac0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6aa6:	6833      	ldr	r3, [r6, #0]
   b6aa8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6aac:	689b      	ldr	r3, [r3, #8]
   b6aae:	4630      	mov	r0, r6
   b6ab0:	4798      	blx	r3
     if (chunk>=0)
   b6ab2:	1e03      	subs	r3, r0, #0
   b6ab4:	db01      	blt.n	b6aba <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6ab6:	441c      	add	r4, r3
  while (size--) {
   b6ab8:	e7f3      	b.n	b6aa2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6aba:	2c00      	cmp	r4, #0
   b6abc:	bf08      	it	eq
   b6abe:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6ac0:	4620      	mov	r0, r4
   b6ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6ac4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6ac4:	b513      	push	{r0, r1, r4, lr}
   b6ac6:	4604      	mov	r4, r0
    }
   b6ac8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6aca:	b159      	cbz	r1, b6ae4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6acc:	9101      	str	r1, [sp, #4]
   b6ace:	f7fe f97f 	bl	b4dd0 <strlen>
   b6ad2:	6823      	ldr	r3, [r4, #0]
   b6ad4:	9901      	ldr	r1, [sp, #4]
   b6ad6:	68db      	ldr	r3, [r3, #12]
   b6ad8:	4602      	mov	r2, r0
   b6ada:	4620      	mov	r0, r4
    }
   b6adc:	b002      	add	sp, #8
   b6ade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6ae2:	4718      	bx	r3
    }
   b6ae4:	b002      	add	sp, #8
   b6ae6:	bd10      	pop	{r4, pc}

000b6ae8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b6ae8:	b508      	push	{r3, lr}
  return write(str);
   b6aea:	f7ff ffeb 	bl	b6ac4 <_ZN5Print5writeEPKc>
}
   b6aee:	bd08      	pop	{r3, pc}

000b6af0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b6af0:	6803      	ldr	r3, [r0, #0]
   b6af2:	689b      	ldr	r3, [r3, #8]
   b6af4:	4718      	bx	r3

000b6af6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6af6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6af8:	210d      	movs	r1, #13
{
   b6afa:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6afc:	f7ff fff8 	bl	b6af0 <_ZN5Print5printEc>
  n += print('\n');
   b6b00:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6b02:	4604      	mov	r4, r0
  n += print('\n');
   b6b04:	4628      	mov	r0, r5
   b6b06:	f7ff fff3 	bl	b6af0 <_ZN5Print5printEc>
  return n;
}
   b6b0a:	4420      	add	r0, r4
   b6b0c:	bd38      	pop	{r3, r4, r5, pc}

000b6b0e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b6b0e:	b538      	push	{r3, r4, r5, lr}
   b6b10:	4605      	mov	r5, r0
  return write(str);
   b6b12:	f7ff ffd7 	bl	b6ac4 <_ZN5Print5writeEPKc>
   b6b16:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6b18:	4628      	mov	r0, r5
   b6b1a:	f7ff ffec 	bl	b6af6 <_ZN5Print7printlnEv>
  return n;
}
   b6b1e:	4420      	add	r0, r4
   b6b20:	bd38      	pop	{r3, r4, r5, pc}

000b6b22 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6b22:	b530      	push	{r4, r5, lr}
   b6b24:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6b26:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6b28:	2a01      	cmp	r2, #1
  *str = '\0';
   b6b2a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6b2e:	bf98      	it	ls
   b6b30:	220a      	movls	r2, #10
   b6b32:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6b34:	460d      	mov	r5, r1
   b6b36:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6b3a:	fb01 5312 	mls	r3, r1, r2, r5
   b6b3e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6b42:	2b09      	cmp	r3, #9
   b6b44:	bf94      	ite	ls
   b6b46:	3330      	addls	r3, #48	; 0x30
   b6b48:	3337      	addhi	r3, #55	; 0x37
   b6b4a:	b2db      	uxtb	r3, r3
  } while(n);
   b6b4c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6b4e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6b52:	d9ef      	bls.n	b6b34 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6b54:	4621      	mov	r1, r4
   b6b56:	f7ff ffb5 	bl	b6ac4 <_ZN5Print5writeEPKc>
}
   b6b5a:	b00b      	add	sp, #44	; 0x2c
   b6b5c:	bd30      	pop	{r4, r5, pc}

000b6b5e <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   b6b5e:	b510      	push	{r4, lr}
   b6b60:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
   b6b62:	f7ff f94d 	bl	b5e00 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
   b6b66:	4284      	cmp	r4, r0
   b6b68:	d008      	beq.n	b6b7c <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   b6b6a:	b11c      	cbz	r4, b6b74 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   b6b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
   b6b70:	f7ff b936 	b.w	b5de0 <LED_Signaling_Start>
}
   b6b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
   b6b78:	f7ff b93a 	b.w	b5df0 <LED_Signaling_Stop>
}
   b6b7c:	bd10      	pop	{r4, pc}

000b6b7e <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   b6b7e:	b570      	push	{r4, r5, r6, lr}
   b6b80:	4605      	mov	r5, r0
   b6b82:	460e      	mov	r6, r1
   b6b84:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
   b6b86:	f7ff f93b 	bl	b5e00 <LED_RGB_IsOverRidden>
    if (!controlled()) {
   b6b8a:	b150      	cbz	r0, b6ba2 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   b6b8c:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
   b6b90:	ea44 4005 	orr.w	r0, r4, r5, lsl #16
   b6b94:	f7ff f91c 	bl	b5dd0 <LED_SetSignalingColor>
    LED_On(PARTICLE_LED_RGB);
}
   b6b98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(PARTICLE_LED_RGB);
   b6b9c:	20e7      	movs	r0, #231	; 0xe7
   b6b9e:	f7ff b937 	b.w	b5e10 <LED_On>
}
   b6ba2:	bd70      	pop	{r4, r5, r6, pc}

000b6ba4 <_ZN8RGBClass5colorEm>:
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
   b6ba4:	b2c2      	uxtb	r2, r0
   b6ba6:	f3c0 2107 	ubfx	r1, r0, #8, #8
   b6baa:	f3c0 4007 	ubfx	r0, r0, #16, #8
   b6bae:	f7ff bfe6 	b.w	b6b7e <_ZN8RGBClass5colorEiii>
	...

000b6bb4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b6bb4:	4b01      	ldr	r3, [pc, #4]	; (b6bbc <_GLOBAL__sub_I_RGB+0x8>)
   b6bb6:	2200      	movs	r2, #0
   b6bb8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6bba:	4770      	bx	lr
   b6bbc:	2003e6a4 	.word	0x2003e6a4

000b6bc0 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b6bc0:	b510      	push	{r4, lr}
   b6bc2:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6bc4:	f7ff f80c 	bl	b5be0 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b6bc8:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b6bca:	6823      	ldr	r3, [r4, #0]
   b6bcc:	4620      	mov	r0, r4
   b6bce:	695b      	ldr	r3, [r3, #20]
   b6bd0:	4798      	blx	r3
    if (c >= 0) return c;
   b6bd2:	2800      	cmp	r0, #0
   b6bd4:	da08      	bge.n	b6be8 <_ZN6Stream9timedReadEv+0x28>
   b6bd6:	f7ff f803 	bl	b5be0 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b6bda:	68e3      	ldr	r3, [r4, #12]
   b6bdc:	1ac0      	subs	r0, r0, r3
   b6bde:	68a3      	ldr	r3, [r4, #8]
   b6be0:	4298      	cmp	r0, r3
   b6be2:	d3f2      	bcc.n	b6bca <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b6be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b6be8:	bd10      	pop	{r4, pc}

000b6bea <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b6bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6bee:	4607      	mov	r7, r0
   b6bf0:	460c      	mov	r4, r1
   b6bf2:	188e      	adds	r6, r1, r2
   b6bf4:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b6bf6:	42b5      	cmp	r5, r6
   b6bf8:	eba5 0804 	sub.w	r8, r5, r4
   b6bfc:	d007      	beq.n	b6c0e <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b6bfe:	4638      	mov	r0, r7
   b6c00:	f7ff ffde 	bl	b6bc0 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b6c04:	1e03      	subs	r3, r0, #0
   b6c06:	db02      	blt.n	b6c0e <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b6c08:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b6c0c:	e7f3      	b.n	b6bf6 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b6c0e:	4640      	mov	r0, r8
   b6c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6c14 <_Z4dtoadhPc>:
using namespace particle;

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   b6c14:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6c18:	ec57 6b10 	vmov	r6, r7, d0
   b6c1c:	4680      	mov	r8, r0
   b6c1e:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   b6c20:	ee10 0a10 	vmov	r0, s0
   b6c24:	2200      	movs	r2, #0
   b6c26:	2300      	movs	r3, #0
   b6c28:	4639      	mov	r1, r7
   b6c2a:	f7fd fe27 	bl	b487c <__aeabi_dcmplt>
   b6c2e:	b128      	cbz	r0, b6c3c <_Z4dtoadhPc+0x28>
        val = -val;
   b6c30:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b6c34:	461f      	mov	r7, r3
        *sout++ = '-';
   b6c36:	232d      	movs	r3, #45	; 0x2d
   b6c38:	f804 3b01 	strb.w	r3, [r4], #1
   b6c3c:	2300      	movs	r3, #0
    }
    long scale = 1;
   b6c3e:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   b6c42:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   b6c44:	b2d9      	uxtb	r1, r3
   b6c46:	4588      	cmp	r8, r1
   b6c48:	d903      	bls.n	b6c52 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   b6c4a:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   b6c4e:	3301      	adds	r3, #1
   b6c50:	e7f8      	b.n	b6c44 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   b6c52:	4648      	mov	r0, r9
   b6c54:	f7fd fb36 	bl	b42c4 <__aeabi_i2d>
   b6c58:	4632      	mov	r2, r6
   b6c5a:	463b      	mov	r3, r7
   b6c5c:	f7fd fb9c 	bl	b4398 <__aeabi_dmul>
   b6c60:	4606      	mov	r6, r0
   b6c62:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   b6c64:	f7fd ff2c 	bl	b4ac0 <__aeabi_d2ulz>
   b6c68:	468a      	mov	sl, r1
   b6c6a:	4605      	mov	r5, r0
   b6c6c:	468b      	mov	fp, r1
    if ((val-fixed)>=0.5)    // round last digit
   b6c6e:	f7fd fb5d 	bl	b432c <__aeabi_ul2d>
   b6c72:	4602      	mov	r2, r0
   b6c74:	460b      	mov	r3, r1
   b6c76:	4630      	mov	r0, r6
   b6c78:	4639      	mov	r1, r7
   b6c7a:	f7fd f9d5 	bl	b4028 <__aeabi_dsub>
   b6c7e:	4b14      	ldr	r3, [pc, #80]	; (b6cd0 <_Z4dtoadhPc+0xbc>)
   b6c80:	2200      	movs	r2, #0
   b6c82:	f7fd fe0f 	bl	b48a4 <__aeabi_dcmpge>
   b6c86:	b110      	cbz	r0, b6c8e <_Z4dtoadhPc+0x7a>
        fixed++;
   b6c88:	3501      	adds	r5, #1
   b6c8a:	f14a 0b00 	adc.w	fp, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   b6c8e:	464a      	mov	r2, r9
   b6c90:	4628      	mov	r0, r5
   b6c92:	17d3      	asrs	r3, r2, #31
   b6c94:	4659      	mov	r1, fp
   b6c96:	f7fd fec7 	bl	b4a28 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   b6c9a:	2301      	movs	r3, #1
   b6c9c:	4615      	mov	r5, r2
   b6c9e:	4621      	mov	r1, r4
   b6ca0:	220a      	movs	r2, #10
   b6ca2:	f000 fa70 	bl	b7186 <ultoa>
    if (prec) {
   b6ca6:	f1b8 0f00 	cmp.w	r8, #0
   b6caa:	d00e      	beq.n	b6cca <_Z4dtoadhPc+0xb6>
        sout += strlen(sout);
   b6cac:	4620      	mov	r0, r4
   b6cae:	f7fe f88f 	bl	b4dd0 <strlen>
        *sout++ = '.';
   b6cb2:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   b6cb4:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   b6cb6:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   b6cb8:	220a      	movs	r2, #10
   b6cba:	4643      	mov	r3, r8
   b6cbc:	3101      	adds	r1, #1
   b6cbe:	4628      	mov	r0, r5
    }
}
   b6cc0:	b001      	add	sp, #4
   b6cc2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ultoa(second, sout, 10, prec);
   b6cc6:	f000 ba5e 	b.w	b7186 <ultoa>
}
   b6cca:	b001      	add	sp, #4
   b6ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6cd0:	3fe00000 	.word	0x3fe00000

000b6cd4 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
   b6cd4:	b510      	push	{r4, lr}
   b6cd6:	4604      	mov	r4, r0
{
    free(buffer);
   b6cd8:	6800      	ldr	r0, [r0, #0]
   b6cda:	f7ff f9a5 	bl	b6028 <free>
}
   b6cde:	4620      	mov	r0, r4
   b6ce0:	bd10      	pop	{r4, pc}

000b6ce2 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
   b6ce2:	b510      	push	{r4, lr}
   b6ce4:	4604      	mov	r4, r0
    if (buffer) {
   b6ce6:	6800      	ldr	r0, [r0, #0]
   b6ce8:	b108      	cbz	r0, b6cee <_ZN6String10invalidateEv+0xc>
        free(buffer);
   b6cea:	f7ff f99d 	bl	b6028 <free>
    }
    buffer = nullptr;
   b6cee:	2300      	movs	r3, #0
    capacity_ = len = 0;
   b6cf0:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
   b6cf4:	6023      	str	r3, [r4, #0]
}
   b6cf6:	bd10      	pop	{r4, pc}

000b6cf8 <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6cf8:	b538      	push	{r3, r4, r5, lr}
   b6cfa:	4604      	mov	r4, r0
   b6cfc:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6cfe:	6800      	ldr	r0, [r0, #0]
   b6d00:	3101      	adds	r1, #1
   b6d02:	f7ff f999 	bl	b6038 <realloc>
    if (newbuffer) {
   b6d06:	b110      	cbz	r0, b6d0e <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
   b6d08:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
   b6d0c:	2001      	movs	r0, #1
    }
    return 0;
}
   b6d0e:	bd38      	pop	{r3, r4, r5, pc}

000b6d10 <_ZN6String7reserveEj>:
{
   b6d10:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
   b6d12:	6803      	ldr	r3, [r0, #0]
{
   b6d14:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
   b6d16:	b123      	cbz	r3, b6d22 <_ZN6String7reserveEj+0x12>
   b6d18:	6843      	ldr	r3, [r0, #4]
   b6d1a:	428b      	cmp	r3, r1
   b6d1c:	d301      	bcc.n	b6d22 <_ZN6String7reserveEj+0x12>
   b6d1e:	2001      	movs	r0, #1
}
   b6d20:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
   b6d22:	4620      	mov	r0, r4
   b6d24:	f7ff ffe8 	bl	b6cf8 <_ZN6String12changeBufferEj>
   b6d28:	2800      	cmp	r0, #0
   b6d2a:	d0f9      	beq.n	b6d20 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
   b6d2c:	68a3      	ldr	r3, [r4, #8]
   b6d2e:	2b00      	cmp	r3, #0
   b6d30:	d1f5      	bne.n	b6d1e <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
   b6d32:	6822      	ldr	r2, [r4, #0]
   b6d34:	7013      	strb	r3, [r2, #0]
   b6d36:	e7f2      	b.n	b6d1e <_ZN6String7reserveEj+0xe>

000b6d38 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6d38:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6d3a:	460d      	mov	r5, r1
    if (!reserve(length)) {
   b6d3c:	4611      	mov	r1, r2
   b6d3e:	9201      	str	r2, [sp, #4]
{
   b6d40:	4604      	mov	r4, r0
    if (!reserve(length)) {
   b6d42:	f7ff ffe5 	bl	b6d10 <_ZN6String7reserveEj>
   b6d46:	9a01      	ldr	r2, [sp, #4]
   b6d48:	b928      	cbnz	r0, b6d56 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
   b6d4a:	4620      	mov	r0, r4
   b6d4c:	f7ff ffc9 	bl	b6ce2 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
   b6d50:	4620      	mov	r0, r4
   b6d52:	b003      	add	sp, #12
   b6d54:	bd30      	pop	{r4, r5, pc}
    len = length;
   b6d56:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
   b6d58:	4629      	mov	r1, r5
   b6d5a:	6820      	ldr	r0, [r4, #0]
   b6d5c:	f000 fb62 	bl	b7424 <memcpy>
    buffer[len] = 0;
   b6d60:	6822      	ldr	r2, [r4, #0]
   b6d62:	68a3      	ldr	r3, [r4, #8]
   b6d64:	2100      	movs	r1, #0
   b6d66:	54d1      	strb	r1, [r2, r3]
    return *this;
   b6d68:	e7f2      	b.n	b6d50 <_ZN6String4copyEPKcj+0x18>

000b6d6a <_ZN6StringaSEPKc>:
    return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b6d6a:	b513      	push	{r0, r1, r4, lr}
   b6d6c:	4604      	mov	r4, r0
    if (cstr) {
   b6d6e:	b159      	cbz	r1, b6d88 <_ZN6StringaSEPKc+0x1e>
        copy(cstr, strlen(cstr));
   b6d70:	4608      	mov	r0, r1
   b6d72:	9101      	str	r1, [sp, #4]
   b6d74:	f7fe f82c 	bl	b4dd0 <strlen>
   b6d78:	9901      	ldr	r1, [sp, #4]
   b6d7a:	4602      	mov	r2, r0
   b6d7c:	4620      	mov	r0, r4
   b6d7e:	f7ff ffdb 	bl	b6d38 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   b6d82:	4620      	mov	r0, r4
   b6d84:	b002      	add	sp, #8
   b6d86:	bd10      	pop	{r4, pc}
        invalidate();
   b6d88:	f7ff ffab 	bl	b6ce2 <_ZN6String10invalidateEv>
   b6d8c:	e7f9      	b.n	b6d82 <_ZN6StringaSEPKc+0x18>

000b6d8e <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   b6d8e:	b570      	push	{r4, r5, r6, lr}
   b6d90:	ee10 6a10 	vmov	r6, s0
   b6d94:	b08a      	sub	sp, #40	; 0x28
   b6d96:	460d      	mov	r5, r1
    buffer = nullptr;
   b6d98:	2100      	movs	r1, #0
    char buf[33] = {};
   b6d9a:	221d      	movs	r2, #29
String::String(float value, int decimalPlaces)
   b6d9c:	4604      	mov	r4, r0
    capacity_ = 0;
   b6d9e:	e9c0 1100 	strd	r1, r1, [r0]
    len = 0;
   b6da2:	6081      	str	r1, [r0, #8]
    flags = 0;
   b6da4:	7301      	strb	r1, [r0, #12]
    char buf[33] = {};
   b6da6:	a802      	add	r0, sp, #8
   b6da8:	9101      	str	r1, [sp, #4]
   b6daa:	f000 fb63 	bl	b7474 <memset>
    dtoa(value, decimalPlaces, buf);
   b6dae:	4630      	mov	r0, r6
   b6db0:	f7fd fa9a 	bl	b42e8 <__aeabi_f2d>
   b6db4:	b2ed      	uxtb	r5, r5
   b6db6:	ec41 0b10 	vmov	d0, r0, r1
   b6dba:	a901      	add	r1, sp, #4
   b6dbc:	4628      	mov	r0, r5
   b6dbe:	f7ff ff29 	bl	b6c14 <_Z4dtoadhPc>
  *this = buf;
   b6dc2:	a901      	add	r1, sp, #4
   b6dc4:	4620      	mov	r0, r4
   b6dc6:	f7ff ffd0 	bl	b6d6a <_ZN6StringaSEPKc>
}
   b6dca:	4620      	mov	r0, r4
   b6dcc:	b00a      	add	sp, #40	; 0x28
   b6dce:	bd70      	pop	{r4, r5, r6, pc}

000b6dd0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6dd0:	4b05      	ldr	r3, [pc, #20]	; (b6de8 <_GLOBAL__sub_I_System+0x18>)
   b6dd2:	2202      	movs	r2, #2
   b6dd4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6dd6:	4b05      	ldr	r3, [pc, #20]	; (b6dec <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6dd8:	4a05      	ldr	r2, [pc, #20]	; (b6df0 <_GLOBAL__sub_I_System+0x20>)
   b6dda:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6ddc:	2000      	movs	r0, #0
   b6dde:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6de2:	f7ff b825 	b.w	b5e30 <set_system_mode>
   b6de6:	bf00      	nop
   b6de8:	2003e6c0 	.word	0x2003e6c0
   b6dec:	2003e6b4 	.word	0x2003e6b4
   b6df0:	ffff0000 	.word	0xffff0000

000b6df4 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b6df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b6df8:	4a15      	ldr	r2, [pc, #84]	; (b6e50 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b6dfa:	f8df 8060 	ldr.w	r8, [pc, #96]	; b6e5c <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b6dfe:	e9d2 6300 	ldrd	r6, r3, [r2]
   b6e02:	1980      	adds	r0, r0, r6
   b6e04:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b6e08:	4b12      	ldr	r3, [pc, #72]	; (b6e54 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b6e0a:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b6e0e:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b6e12:	1986      	adds	r6, r0, r6
   b6e14:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b6e18:	42bb      	cmp	r3, r7
   b6e1a:	bf08      	it	eq
   b6e1c:	42b2      	cmpeq	r2, r6
{
   b6e1e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b6e20:	d013      	beq.n	b6e4a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b6e22:	a903      	add	r1, sp, #12
   b6e24:	4668      	mov	r0, sp
   b6e26:	e9cd 6700 	strd	r6, r7, [sp]
   b6e2a:	f7ff f92d 	bl	b6088 <localtime_r>
	calendar_time.tm_year += 1900;
   b6e2e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b6e30:	4d09      	ldr	r5, [pc, #36]	; (b6e58 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b6e32:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b6e36:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b6e38:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b6e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b6e42:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b6e46:	6823      	ldr	r3, [r4, #0]
   b6e48:	602b      	str	r3, [r5, #0]
    }
}
   b6e4a:	b00c      	add	sp, #48	; 0x30
   b6e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6e50:	2003e6f8 	.word	0x2003e6f8
   b6e54:	2003e6f0 	.word	0x2003e6f0
   b6e58:	2003e6c8 	.word	0x2003e6c8
   b6e5c:	2003e700 	.word	0x2003e700

000b6e60 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b6e60:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b6e62:	2000      	movs	r0, #0
   b6e64:	f7ff f850 	bl	b5f08 <spark_sync_time_pending>
   b6e68:	b128      	cbz	r0, b6e76 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6e6a:	f7ff f82d 	bl	b5ec8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b6e6e:	f080 0001 	eor.w	r0, r0, #1
   b6e72:	b2c0      	uxtb	r0, r0
    }
   b6e74:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b6e76:	2001      	movs	r0, #1
   b6e78:	e7fc      	b.n	b6e74 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b6e7c <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b6e7c:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   b6e80:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b6e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b6e88:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b6e8a:	d411      	bmi.n	b6eb0 <_ZN9TimeClass4zoneEf+0x34>
   b6e8c:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   b6e90:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b6e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6e98:	dc0a      	bgt.n	b6eb0 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   b6e9a:	eddf 7a06 	vldr	s15, [pc, #24]	; b6eb4 <_ZN9TimeClass4zoneEf+0x38>
   b6e9e:	ee60 7a27 	vmul.f32	s15, s0, s15
   b6ea2:	ee17 0a90 	vmov	r0, s15
   b6ea6:	f7fd fdd7 	bl	b4a58 <__aeabi_f2lz>
   b6eaa:	4b03      	ldr	r3, [pc, #12]	; (b6eb8 <_ZN9TimeClass4zoneEf+0x3c>)
   b6eac:	e9c3 0100 	strd	r0, r1, [r3]
}
   b6eb0:	bd08      	pop	{r3, pc}
   b6eb2:	bf00      	nop
   b6eb4:	45610000 	.word	0x45610000
   b6eb8:	2003e6f8 	.word	0x2003e6f8

000b6ebc <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b6ebc:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b6ebe:	2000      	movs	r0, #0
   b6ec0:	f7fe fe96 	bl	b5bf0 <hal_rtc_time_is_valid>
    if (rtcstate)
   b6ec4:	4604      	mov	r4, r0
   b6ec6:	b9a0      	cbnz	r0, b6ef2 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b6ec8:	f7fe ffaa 	bl	b5e20 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b6ecc:	2801      	cmp	r0, #1
   b6ece:	d110      	bne.n	b6ef2 <_ZN9TimeClass7isValidEv+0x36>
   b6ed0:	4620      	mov	r0, r4
   b6ed2:	f7fe ffcd 	bl	b5e70 <system_thread_get_state>
   b6ed6:	b960      	cbnz	r0, b6ef2 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b6ed8:	f7ff ffc2 	bl	b6e60 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b6edc:	b910      	cbnz	r0, b6ee4 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b6ede:	f7fe ffe3 	bl	b5ea8 <spark_process>
        while (_while() && !_condition()) {
   b6ee2:	e7f9      	b.n	b6ed8 <_ZN9TimeClass7isValidEv+0x1c>
   b6ee4:	f7ff ffbc 	bl	b6e60 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b6ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b6eec:	2000      	movs	r0, #0
   b6eee:	f7fe be7f 	b.w	b5bf0 <hal_rtc_time_is_valid>
}
   b6ef2:	4620      	mov	r0, r4
   b6ef4:	bd10      	pop	{r4, pc}

000b6ef6 <_ZN9TimeClass3nowEv>:
{
   b6ef6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b6ef8:	f7ff ffe0 	bl	b6ebc <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b6efc:	2210      	movs	r2, #16
   b6efe:	2100      	movs	r1, #0
   b6f00:	4668      	mov	r0, sp
   b6f02:	f000 fab7 	bl	b7474 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b6f06:	2100      	movs	r1, #0
   b6f08:	4668      	mov	r0, sp
   b6f0a:	f7fe fe79 	bl	b5c00 <hal_rtc_get_time>
}
   b6f0e:	9800      	ldr	r0, [sp, #0]
   b6f10:	b005      	add	sp, #20
   b6f12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6f18 <_ZN9TimeClass4hourEv>:
{
   b6f18:	b508      	push	{r3, lr}
	return hour(now());
   b6f1a:	f7ff ffec 	bl	b6ef6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b6f1e:	17c1      	asrs	r1, r0, #31
   b6f20:	f7ff ff68 	bl	b6df4 <_ZL22Refresh_UnixTime_Cachex>
}
   b6f24:	4b01      	ldr	r3, [pc, #4]	; (b6f2c <_ZN9TimeClass4hourEv+0x14>)
   b6f26:	6898      	ldr	r0, [r3, #8]
   b6f28:	bd08      	pop	{r3, pc}
   b6f2a:	bf00      	nop
   b6f2c:	2003e6c8 	.word	0x2003e6c8

000b6f30 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6f30:	4b02      	ldr	r3, [pc, #8]	; (b6f3c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6f32:	681a      	ldr	r2, [r3, #0]
   b6f34:	4b02      	ldr	r3, [pc, #8]	; (b6f40 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6f36:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6f38:	4770      	bx	lr
   b6f3a:	bf00      	nop
   b6f3c:	2003e5bc 	.word	0x2003e5bc
   b6f40:	2003e6c4 	.word	0x2003e6c4

000b6f44 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6f44:	4770      	bx	lr

000b6f46 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6f46:	7441      	strb	r1, [r0, #17]
}
   b6f48:	4770      	bx	lr

000b6f4a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6f4a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6f4c:	7c00      	ldrb	r0, [r0, #16]
   b6f4e:	f7fe fef7 	bl	b5d40 <hal_usart_available_data_for_write>
}
   b6f52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6f56:	bd08      	pop	{r3, pc}

000b6f58 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6f58:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6f5a:	7c00      	ldrb	r0, [r0, #16]
   b6f5c:	f7fe fed0 	bl	b5d00 <hal_usart_available>
}
   b6f60:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6f64:	bd08      	pop	{r3, pc}

000b6f66 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6f66:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6f68:	7c00      	ldrb	r0, [r0, #16]
   b6f6a:	f7fe fed9 	bl	b5d20 <hal_usart_peek>
}
   b6f6e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6f72:	bd08      	pop	{r3, pc}

000b6f74 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6f74:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6f76:	7c00      	ldrb	r0, [r0, #16]
   b6f78:	f7fe feca 	bl	b5d10 <hal_usart_read>
}
   b6f7c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6f80:	bd08      	pop	{r3, pc}

000b6f82 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6f82:	7c00      	ldrb	r0, [r0, #16]
   b6f84:	f7fe bed4 	b.w	b5d30 <hal_usart_flush>

000b6f88 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6f88:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6f8a:	7c45      	ldrb	r5, [r0, #17]
{
   b6f8c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6f8e:	b12d      	cbz	r5, b6f9c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6f90:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6f92:	b003      	add	sp, #12
   b6f94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6f98:	f7fe beaa 	b.w	b5cf0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6f9c:	7c00      	ldrb	r0, [r0, #16]
   b6f9e:	9101      	str	r1, [sp, #4]
   b6fa0:	f7fe fece 	bl	b5d40 <hal_usart_available_data_for_write>
   b6fa4:	2800      	cmp	r0, #0
   b6fa6:	9901      	ldr	r1, [sp, #4]
   b6fa8:	dcf2      	bgt.n	b6f90 <_ZN11USARTSerial5writeEh+0x8>
}
   b6faa:	4628      	mov	r0, r5
   b6fac:	b003      	add	sp, #12
   b6fae:	bd30      	pop	{r4, r5, pc}

000b6fb0 <_ZN11USARTSerialD0Ev>:
   b6fb0:	b510      	push	{r4, lr}
   b6fb2:	2114      	movs	r1, #20
   b6fb4:	4604      	mov	r4, r0
   b6fb6:	f7fd ff52 	bl	b4e5e <_ZdlPvj>
   b6fba:	4620      	mov	r0, r4
   b6fbc:	bd10      	pop	{r4, pc}
	...

000b6fc0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6fc0:	b510      	push	{r4, lr}
   b6fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6fc6:	4604      	mov	r4, r0
   b6fc8:	4608      	mov	r0, r1
   b6fca:	4611      	mov	r1, r2
   b6fcc:	2200      	movs	r2, #0
   b6fce:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6fd2:	4b04      	ldr	r3, [pc, #16]	; (b6fe4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6fd4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6fd6:	2301      	movs	r3, #1
  _serial = serial;
   b6fd8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6fda:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6fdc:	f7fe feb8 	bl	b5d50 <hal_usart_init_ex>
}
   b6fe0:	4620      	mov	r0, r4
   b6fe2:	bd10      	pop	{r4, pc}
   b6fe4:	000b7940 	.word	0x000b7940

000b6fe8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6fe8:	7441      	strb	r1, [r0, #17]
}
   b6fea:	4770      	bx	lr

000b6fec <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6fec:	4770      	bx	lr

000b6fee <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6fee:	4770      	bx	lr

000b6ff0 <_ZN9USBSerial4readEv>:
{
   b6ff0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6ff2:	2100      	movs	r1, #0
   b6ff4:	7c00      	ldrb	r0, [r0, #16]
   b6ff6:	f7fe fed3 	bl	b5da0 <HAL_USB_USART_Receive_Data>
}
   b6ffa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6ffe:	bd08      	pop	{r3, pc}

000b7000 <_ZN9USBSerial4peekEv>:
{
   b7000:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7002:	2101      	movs	r1, #1
   b7004:	7c00      	ldrb	r0, [r0, #16]
   b7006:	f7fe fecb 	bl	b5da0 <HAL_USB_USART_Receive_Data>
}
   b700a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b700e:	bd08      	pop	{r3, pc}

000b7010 <_ZN9USBSerial17availableForWriteEv>:
{
   b7010:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7012:	7c00      	ldrb	r0, [r0, #16]
   b7014:	f7fe febc 	bl	b5d90 <HAL_USB_USART_Available_Data_For_Write>
}
   b7018:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b701c:	bd08      	pop	{r3, pc}

000b701e <_ZN9USBSerial9availableEv>:
{
   b701e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7020:	7c00      	ldrb	r0, [r0, #16]
   b7022:	f7fe fead 	bl	b5d80 <HAL_USB_USART_Available_Data>
}
   b7026:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b702a:	bd08      	pop	{r3, pc}

000b702c <_ZN9USBSerial5writeEh>:
{
   b702c:	b513      	push	{r0, r1, r4, lr}
   b702e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7030:	7c00      	ldrb	r0, [r0, #16]
{
   b7032:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7034:	f7fe feac 	bl	b5d90 <HAL_USB_USART_Available_Data_For_Write>
   b7038:	2800      	cmp	r0, #0
   b703a:	9901      	ldr	r1, [sp, #4]
   b703c:	dc01      	bgt.n	b7042 <_ZN9USBSerial5writeEh+0x16>
   b703e:	7c60      	ldrb	r0, [r4, #17]
   b7040:	b120      	cbz	r0, b704c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7042:	7c20      	ldrb	r0, [r4, #16]
   b7044:	f7fe feb4 	bl	b5db0 <HAL_USB_USART_Send_Data>
   b7048:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b704c:	b002      	add	sp, #8
   b704e:	bd10      	pop	{r4, pc}

000b7050 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7050:	7c00      	ldrb	r0, [r0, #16]
   b7052:	f7fe beb5 	b.w	b5dc0 <HAL_USB_USART_Flush_Data>

000b7056 <_ZN9USBSerialD0Ev>:
   b7056:	b510      	push	{r4, lr}
   b7058:	2114      	movs	r1, #20
   b705a:	4604      	mov	r4, r0
   b705c:	f7fd feff 	bl	b4e5e <_ZdlPvj>
   b7060:	4620      	mov	r0, r4
   b7062:	bd10      	pop	{r4, pc}

000b7064 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7064:	b510      	push	{r4, lr}
   b7066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b706a:	4604      	mov	r4, r0
   b706c:	4608      	mov	r0, r1
   b706e:	2100      	movs	r1, #0
   b7070:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7074:	4b04      	ldr	r3, [pc, #16]	; (b7088 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7076:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7078:	2301      	movs	r3, #1
  _serial = serial;
   b707a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b707c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b707e:	4611      	mov	r1, r2
   b7080:	f7fe fe6e 	bl	b5d60 <HAL_USB_USART_Init>
}
   b7084:	4620      	mov	r0, r4
   b7086:	bd10      	pop	{r4, pc}
   b7088:	000b7974 	.word	0x000b7974

000b708c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b708c:	7c00      	ldrb	r0, [r0, #16]
   b708e:	2200      	movs	r2, #0
   b7090:	f7fe be6e 	b.w	b5d70 <HAL_USB_USART_Begin>

000b7094 <_Z19acquireSerialBufferv>:
{
   b7094:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7096:	2214      	movs	r2, #20
{
   b7098:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b709a:	2100      	movs	r1, #0
   b709c:	f000 f9ea 	bl	b7474 <memset>
}
   b70a0:	4620      	mov	r0, r4
   b70a2:	bd10      	pop	{r4, pc}

000b70a4 <_Z16_fetch_usbserialv>:
{
   b70a4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b70a6:	4c0f      	ldr	r4, [pc, #60]	; (b70e4 <_Z16_fetch_usbserialv+0x40>)
{
   b70a8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b70aa:	a803      	add	r0, sp, #12
   b70ac:	f7ff fff2 	bl	b7094 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b70b0:	7821      	ldrb	r1, [r4, #0]
   b70b2:	f3bf 8f5b 	dmb	ish
   b70b6:	f011 0101 	ands.w	r1, r1, #1
   b70ba:	d10f      	bne.n	b70dc <_Z16_fetch_usbserialv+0x38>
   b70bc:	4620      	mov	r0, r4
   b70be:	9101      	str	r1, [sp, #4]
   b70c0:	f7fd fecf 	bl	b4e62 <__cxa_guard_acquire>
   b70c4:	9901      	ldr	r1, [sp, #4]
   b70c6:	b148      	cbz	r0, b70dc <_Z16_fetch_usbserialv+0x38>
   b70c8:	aa03      	add	r2, sp, #12
   b70ca:	4807      	ldr	r0, [pc, #28]	; (b70e8 <_Z16_fetch_usbserialv+0x44>)
   b70cc:	f7ff ffca 	bl	b7064 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b70d0:	4620      	mov	r0, r4
   b70d2:	f7fd fecb 	bl	b4e6c <__cxa_guard_release>
   b70d6:	4805      	ldr	r0, [pc, #20]	; (b70ec <_Z16_fetch_usbserialv+0x48>)
   b70d8:	f000 f99e 	bl	b7418 <atexit>
	return _usbserial;
}
   b70dc:	4802      	ldr	r0, [pc, #8]	; (b70e8 <_Z16_fetch_usbserialv+0x44>)
   b70de:	b008      	add	sp, #32
   b70e0:	bd10      	pop	{r4, pc}
   b70e2:	bf00      	nop
   b70e4:	2003e708 	.word	0x2003e708
   b70e8:	2003e70c 	.word	0x2003e70c
   b70ec:	000b6fed 	.word	0x000b6fed

000b70f0 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b70f0:	2200      	movs	r2, #0
   b70f2:	6840      	ldr	r0, [r0, #4]
   b70f4:	4611      	mov	r1, r2
   b70f6:	f7fe bf57 	b.w	b5fa8 <network_listening>

000b70fa <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b70fa:	2200      	movs	r2, #0
   b70fc:	6840      	ldr	r0, [r0, #4]
   b70fe:	4611      	mov	r1, r2
   b7100:	f7fe bf62 	b.w	b5fc8 <network_get_listen_timeout>

000b7104 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7104:	6840      	ldr	r0, [r0, #4]
   b7106:	2200      	movs	r2, #0
   b7108:	f7fe bf56 	b.w	b5fb8 <network_set_listen_timeout>

000b710c <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b710c:	6840      	ldr	r0, [r0, #4]
   b710e:	2200      	movs	r2, #0
   b7110:	f081 0101 	eor.w	r1, r1, #1
   b7114:	f7fe bf40 	b.w	b5f98 <network_listen>

000b7118 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7118:	2300      	movs	r3, #0
   b711a:	6840      	ldr	r0, [r0, #4]
   b711c:	461a      	mov	r2, r3
   b711e:	4619      	mov	r1, r3
   b7120:	f7fe bf32 	b.w	b5f88 <network_off>

000b7124 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7124:	2300      	movs	r3, #0
   b7126:	6840      	ldr	r0, [r0, #4]
   b7128:	461a      	mov	r2, r3
   b712a:	4619      	mov	r1, r3
   b712c:	f7fe bf24 	b.w	b5f78 <network_on>

000b7130 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7130:	2200      	movs	r2, #0
   b7132:	6840      	ldr	r0, [r0, #4]
   b7134:	4611      	mov	r1, r2
   b7136:	f7fe bf07 	b.w	b5f48 <network_connecting>

000b713a <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b713a:	6840      	ldr	r0, [r0, #4]
   b713c:	2200      	movs	r2, #0
   b713e:	2102      	movs	r1, #2
   b7140:	f7fe bf0a 	b.w	b5f58 <network_disconnect>

000b7144 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7144:	2300      	movs	r3, #0
   b7146:	6840      	ldr	r0, [r0, #4]
   b7148:	461a      	mov	r2, r3
   b714a:	f7fe bef5 	b.w	b5f38 <network_connect>
	...

000b7150 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7150:	4b02      	ldr	r3, [pc, #8]	; (b715c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7152:	2204      	movs	r2, #4
   b7154:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7156:	4a02      	ldr	r2, [pc, #8]	; (b7160 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7158:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b715a:	4770      	bx	lr
   b715c:	2003e720 	.word	0x2003e720
   b7160:	000b79a8 	.word	0x000b79a8

000b7164 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b7164:	b510      	push	{r4, lr}
   b7166:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b7168:	f7fd fe32 	bl	b4dd0 <strlen>
   b716c:	3801      	subs	r0, #1
   b716e:	1823      	adds	r3, r4, r0
   b7170:	4620      	mov	r0, r4
	while(i<j){
   b7172:	4283      	cmp	r3, r0
   b7174:	d906      	bls.n	b7184 <_Z11str_reversePc+0x20>
		c = *i;
   b7176:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b7178:	7819      	ldrb	r1, [r3, #0]
   b717a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b717e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b7182:	e7f6      	b.n	b7172 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b7184:	bd10      	pop	{r4, pc}

000b7186 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b7186:	b570      	push	{r4, r5, r6, lr}
   b7188:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b718a:	1e91      	subs	r1, r2, #2
   b718c:	2922      	cmp	r1, #34	; 0x22
   b718e:	d81d      	bhi.n	b71cc <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b7190:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b7192:	b930      	cbnz	r0, b71a2 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b7194:	4423      	add	r3, r4
            *ptr++ = '0';
   b7196:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b7198:	429d      	cmp	r5, r3
   b719a:	d210      	bcs.n	b71be <ultoa+0x38>
            *ptr++ = '0';
   b719c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b71a0:	e7fa      	b.n	b7198 <ultoa+0x12>
            result.quot = a/radix;
   b71a2:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b71a6:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b71aa:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b71ac:	2809      	cmp	r0, #9
                *ptr += '0';
   b71ae:	bf94      	ite	ls
   b71b0:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b71b2:	3157      	addhi	r1, #87	; 0x57
   b71b4:	b2c9      	uxtb	r1, r1
   b71b6:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b71ba:	4630      	mov	r0, r6
	while(a){
   b71bc:	e7e9      	b.n	b7192 <ultoa+0xc>

	*ptr = '\0';
   b71be:	2300      	movs	r3, #0
	str_reverse(buffer);
   b71c0:	4620      	mov	r0, r4
	*ptr = '\0';
   b71c2:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b71c4:	f7ff ffce 	bl	b7164 <_Z11str_reversePc>
	return buffer;
   b71c8:	4620      	mov	r0, r4
}
   b71ca:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b71cc:	2000      	movs	r0, #0
   b71ce:	e7fc      	b.n	b71ca <ultoa+0x44>

000b71d0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b71d0:	4b01      	ldr	r3, [pc, #4]	; (b71d8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b71d2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b71d4:	4770      	bx	lr
   b71d6:	bf00      	nop
   b71d8:	2003e5c0 	.word	0x2003e5c0

000b71dc <serialEventRun>:
{
   b71dc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b71de:	4b0b      	ldr	r3, [pc, #44]	; (b720c <serialEventRun+0x30>)
   b71e0:	b143      	cbz	r3, b71f4 <serialEventRun+0x18>
   b71e2:	f7ff ff5f 	bl	b70a4 <_Z16_fetch_usbserialv>
   b71e6:	6803      	ldr	r3, [r0, #0]
   b71e8:	691b      	ldr	r3, [r3, #16]
   b71ea:	4798      	blx	r3
   b71ec:	2800      	cmp	r0, #0
   b71ee:	dd01      	ble.n	b71f4 <serialEventRun+0x18>
        serialEvent();
   b71f0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b71f4:	4b06      	ldr	r3, [pc, #24]	; (b7210 <serialEventRun+0x34>)
   b71f6:	b143      	cbz	r3, b720a <serialEventRun+0x2e>
   b71f8:	f000 f8e2 	bl	b73c0 <_Z22__fetch_global_Serial1v>
   b71fc:	6803      	ldr	r3, [r0, #0]
   b71fe:	691b      	ldr	r3, [r3, #16]
   b7200:	4798      	blx	r3
   b7202:	2800      	cmp	r0, #0
   b7204:	dd01      	ble.n	b720a <serialEventRun+0x2e>
        serialEvent1();
   b7206:	f3af 8000 	nop.w
}
   b720a:	bd08      	pop	{r3, pc}
	...

000b7214 <_post_loop>:
{
   b7214:	b508      	push	{r3, lr}
	serialEventRun();
   b7216:	f7ff ffe1 	bl	b71dc <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b721a:	f7fe fce1 	bl	b5be0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b721e:	4b01      	ldr	r3, [pc, #4]	; (b7224 <_post_loop+0x10>)
   b7220:	6018      	str	r0, [r3, #0]
}
   b7222:	bd08      	pop	{r3, pc}
   b7224:	2003e730 	.word	0x2003e730

000b7228 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7228:	4805      	ldr	r0, [pc, #20]	; (b7240 <_Z33system_initialize_user_backup_ramv+0x18>)
   b722a:	4a06      	ldr	r2, [pc, #24]	; (b7244 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b722c:	4906      	ldr	r1, [pc, #24]	; (b7248 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b722e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7230:	1a12      	subs	r2, r2, r0
   b7232:	f000 f8f7 	bl	b7424 <memcpy>
    __backup_sram_signature = signature;
   b7236:	4b05      	ldr	r3, [pc, #20]	; (b724c <_Z33system_initialize_user_backup_ramv+0x24>)
   b7238:	4a05      	ldr	r2, [pc, #20]	; (b7250 <_Z33system_initialize_user_backup_ramv+0x28>)
   b723a:	601a      	str	r2, [r3, #0]
}
   b723c:	bd08      	pop	{r3, pc}
   b723e:	bf00      	nop
   b7240:	2003f400 	.word	0x2003f400
   b7244:	2003f404 	.word	0x2003f404
   b7248:	000b7b20 	.word	0x000b7b20
   b724c:	2003f400 	.word	0x2003f400
   b7250:	9a271c1e 	.word	0x9a271c1e

000b7254 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7254:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7256:	2300      	movs	r3, #0
   b7258:	9300      	str	r3, [sp, #0]
   b725a:	461a      	mov	r2, r3
   b725c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7260:	f7fe fe18 	bl	b5e94 <system_ctrl_set_result>
}
   b7264:	b003      	add	sp, #12
   b7266:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b726c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b726c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b726e:	8843      	ldrh	r3, [r0, #2]
   b7270:	2b0a      	cmp	r3, #10
   b7272:	d008      	beq.n	b7286 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7274:	2b50      	cmp	r3, #80	; 0x50
   b7276:	d10b      	bne.n	b7290 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7278:	4b09      	ldr	r3, [pc, #36]	; (b72a0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b727a:	681b      	ldr	r3, [r3, #0]
   b727c:	b14b      	cbz	r3, b7292 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b727e:	b003      	add	sp, #12
   b7280:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7284:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7286:	f7ff ffe5 	bl	b7254 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b728a:	b003      	add	sp, #12
   b728c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7290:	2300      	movs	r3, #0
   b7292:	9300      	str	r3, [sp, #0]
   b7294:	461a      	mov	r2, r3
   b7296:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b729a:	f7fe fdfb 	bl	b5e94 <system_ctrl_set_result>
}
   b729e:	e7f4      	b.n	b728a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b72a0:	2003e72c 	.word	0x2003e72c

000b72a4 <module_user_init_hook>:
{
   b72a4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b72a6:	4812      	ldr	r0, [pc, #72]	; (b72f0 <module_user_init_hook+0x4c>)
   b72a8:	2100      	movs	r1, #0
   b72aa:	f7fe fee5 	bl	b6078 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b72ae:	4b11      	ldr	r3, [pc, #68]	; (b72f4 <module_user_init_hook+0x50>)
   b72b0:	681a      	ldr	r2, [r3, #0]
   b72b2:	4b11      	ldr	r3, [pc, #68]	; (b72f8 <module_user_init_hook+0x54>)
   b72b4:	429a      	cmp	r2, r3
   b72b6:	4b11      	ldr	r3, [pc, #68]	; (b72fc <module_user_init_hook+0x58>)
   b72b8:	bf0c      	ite	eq
   b72ba:	2201      	moveq	r2, #1
   b72bc:	2200      	movne	r2, #0
   b72be:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b72c0:	d001      	beq.n	b72c6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b72c2:	f7ff ffb1 	bl	b7228 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b72c6:	f7fe fc83 	bl	b5bd0 <HAL_RNG_GetRandomNumber>
   b72ca:	4604      	mov	r4, r0
    srand(seed);
   b72cc:	f000 f8da 	bl	b7484 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b72d0:	4b0b      	ldr	r3, [pc, #44]	; (b7300 <module_user_init_hook+0x5c>)
   b72d2:	b113      	cbz	r3, b72da <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b72d4:	4620      	mov	r0, r4
   b72d6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b72da:	2100      	movs	r1, #0
   b72dc:	4808      	ldr	r0, [pc, #32]	; (b7300 <module_user_init_hook+0x5c>)
   b72de:	f7fe fe23 	bl	b5f28 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b72e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b72e6:	4807      	ldr	r0, [pc, #28]	; (b7304 <module_user_init_hook+0x60>)
   b72e8:	2100      	movs	r1, #0
   b72ea:	f7fe bdc9 	b.w	b5e80 <system_ctrl_set_app_request_handler>
   b72ee:	bf00      	nop
   b72f0:	000b71d1 	.word	0x000b71d1
   b72f4:	2003f400 	.word	0x2003f400
   b72f8:	9a271c1e 	.word	0x9a271c1e
   b72fc:	2003e728 	.word	0x2003e728
   b7300:	00000000 	.word	0x00000000
   b7304:	000b726d 	.word	0x000b726d

000b7308 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7308:	4770      	bx	lr
	...

000b730c <_Z17acquireWireBufferv>:
{
   b730c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b730e:	4b0a      	ldr	r3, [pc, #40]	; (b7338 <_Z17acquireWireBufferv+0x2c>)
   b7310:	6003      	str	r3, [r0, #0]
   b7312:	2301      	movs	r3, #1
{
   b7314:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7316:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7318:	4908      	ldr	r1, [pc, #32]	; (b733c <_Z17acquireWireBufferv+0x30>)
   b731a:	2020      	movs	r0, #32
   b731c:	f000 f874 	bl	b7408 <_ZnajRKSt9nothrow_t>
	};
   b7320:	2520      	movs	r5, #32
   b7322:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7324:	4905      	ldr	r1, [pc, #20]	; (b733c <_Z17acquireWireBufferv+0x30>)
	};
   b7326:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7328:	4628      	mov	r0, r5
   b732a:	f000 f86d 	bl	b7408 <_ZnajRKSt9nothrow_t>
	};
   b732e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b7332:	4620      	mov	r0, r4
   b7334:	bd38      	pop	{r3, r4, r5, pc}
   b7336:	bf00      	nop
   b7338:	00010018 	.word	0x00010018
   b733c:	000b79e4 	.word	0x000b79e4

000b7340 <_Z19__fetch_global_Wirev>:
{
   b7340:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7342:	4d0e      	ldr	r5, [pc, #56]	; (b737c <_Z19__fetch_global_Wirev+0x3c>)
   b7344:	7829      	ldrb	r1, [r5, #0]
   b7346:	f3bf 8f5b 	dmb	ish
   b734a:	f011 0401 	ands.w	r4, r1, #1
{
   b734e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7350:	d111      	bne.n	b7376 <_Z19__fetch_global_Wirev+0x36>
   b7352:	4628      	mov	r0, r5
   b7354:	f7fd fd85 	bl	b4e62 <__cxa_guard_acquire>
   b7358:	b168      	cbz	r0, b7376 <_Z19__fetch_global_Wirev+0x36>
   b735a:	4668      	mov	r0, sp
   b735c:	f7ff ffd6 	bl	b730c <_Z17acquireWireBufferv>
   b7360:	466a      	mov	r2, sp
   b7362:	4621      	mov	r1, r4
   b7364:	4806      	ldr	r0, [pc, #24]	; (b7380 <_Z19__fetch_global_Wirev+0x40>)
   b7366:	f7ff f9e9 	bl	b673c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b736a:	4628      	mov	r0, r5
   b736c:	f7fd fd7e 	bl	b4e6c <__cxa_guard_release>
   b7370:	4804      	ldr	r0, [pc, #16]	; (b7384 <_Z19__fetch_global_Wirev+0x44>)
   b7372:	f000 f851 	bl	b7418 <atexit>
	return wire;
}
   b7376:	4802      	ldr	r0, [pc, #8]	; (b7380 <_Z19__fetch_global_Wirev+0x40>)
   b7378:	b007      	add	sp, #28
   b737a:	bd30      	pop	{r4, r5, pc}
   b737c:	2003e734 	.word	0x2003e734
   b7380:	2003e738 	.word	0x2003e738
   b7384:	000b7309 	.word	0x000b7309

000b7388 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7388:	4770      	bx	lr
	...

000b738c <_Z20acquireSerial1Bufferv>:
{
   b738c:	b538      	push	{r3, r4, r5, lr}
   b738e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7390:	2514      	movs	r5, #20
   b7392:	462a      	mov	r2, r5
   b7394:	2100      	movs	r1, #0
   b7396:	f000 f86d 	bl	b7474 <memset>
   b739a:	8025      	strh	r5, [r4, #0]
   b739c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b739e:	4907      	ldr	r1, [pc, #28]	; (b73bc <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b73a0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b73a2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b73a4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b73a6:	f000 f82f 	bl	b7408 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b73aa:	4904      	ldr	r1, [pc, #16]	; (b73bc <_Z20acquireSerial1Bufferv+0x30>)
    };
   b73ac:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b73ae:	4628      	mov	r0, r5
   b73b0:	f000 f82a 	bl	b7408 <_ZnajRKSt9nothrow_t>
    };
   b73b4:	60e0      	str	r0, [r4, #12]
}
   b73b6:	4620      	mov	r0, r4
   b73b8:	bd38      	pop	{r3, r4, r5, pc}
   b73ba:	bf00      	nop
   b73bc:	000b79e4 	.word	0x000b79e4

000b73c0 <_Z22__fetch_global_Serial1v>:
{
   b73c0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b73c2:	4d0e      	ldr	r5, [pc, #56]	; (b73fc <_Z22__fetch_global_Serial1v+0x3c>)
   b73c4:	7829      	ldrb	r1, [r5, #0]
   b73c6:	f3bf 8f5b 	dmb	ish
   b73ca:	f011 0401 	ands.w	r4, r1, #1
{
   b73ce:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b73d0:	d111      	bne.n	b73f6 <_Z22__fetch_global_Serial1v+0x36>
   b73d2:	4628      	mov	r0, r5
   b73d4:	f7fd fd45 	bl	b4e62 <__cxa_guard_acquire>
   b73d8:	b168      	cbz	r0, b73f6 <_Z22__fetch_global_Serial1v+0x36>
   b73da:	a801      	add	r0, sp, #4
   b73dc:	f7ff ffd6 	bl	b738c <_Z20acquireSerial1Bufferv>
   b73e0:	aa01      	add	r2, sp, #4
   b73e2:	4621      	mov	r1, r4
   b73e4:	4806      	ldr	r0, [pc, #24]	; (b7400 <_Z22__fetch_global_Serial1v+0x40>)
   b73e6:	f7ff fdeb 	bl	b6fc0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b73ea:	4628      	mov	r0, r5
   b73ec:	f7fd fd3e 	bl	b4e6c <__cxa_guard_release>
   b73f0:	4804      	ldr	r0, [pc, #16]	; (b7404 <_Z22__fetch_global_Serial1v+0x44>)
   b73f2:	f000 f811 	bl	b7418 <atexit>
    return serial1;
}
   b73f6:	4802      	ldr	r0, [pc, #8]	; (b7400 <_Z22__fetch_global_Serial1v+0x40>)
   b73f8:	b007      	add	sp, #28
   b73fa:	bd30      	pop	{r4, r5, pc}
   b73fc:	2003e74c 	.word	0x2003e74c
   b7400:	2003e750 	.word	0x2003e750
   b7404:	000b7389 	.word	0x000b7389

000b7408 <_ZnajRKSt9nothrow_t>:
   b7408:	f7fd bd27 	b.w	b4e5a <_Znaj>

000b740c <_ZSt20__throw_length_errorPKc>:
   b740c:	b508      	push	{r3, lr}
   b740e:	f7fe fe1b 	bl	b6048 <abort>

000b7412 <_ZSt25__throw_bad_function_callv>:
   b7412:	b508      	push	{r3, lr}
   b7414:	f7fe fe18 	bl	b6048 <abort>

000b7418 <atexit>:
   b7418:	2300      	movs	r3, #0
   b741a:	4601      	mov	r1, r0
   b741c:	461a      	mov	r2, r3
   b741e:	4618      	mov	r0, r3
   b7420:	f000 b87c 	b.w	b751c <__register_exitproc>

000b7424 <memcpy>:
   b7424:	440a      	add	r2, r1
   b7426:	4291      	cmp	r1, r2
   b7428:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b742c:	d100      	bne.n	b7430 <memcpy+0xc>
   b742e:	4770      	bx	lr
   b7430:	b510      	push	{r4, lr}
   b7432:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7436:	f803 4f01 	strb.w	r4, [r3, #1]!
   b743a:	4291      	cmp	r1, r2
   b743c:	d1f9      	bne.n	b7432 <memcpy+0xe>
   b743e:	bd10      	pop	{r4, pc}

000b7440 <memmove>:
   b7440:	4288      	cmp	r0, r1
   b7442:	b510      	push	{r4, lr}
   b7444:	eb01 0402 	add.w	r4, r1, r2
   b7448:	d902      	bls.n	b7450 <memmove+0x10>
   b744a:	4284      	cmp	r4, r0
   b744c:	4623      	mov	r3, r4
   b744e:	d807      	bhi.n	b7460 <memmove+0x20>
   b7450:	1e43      	subs	r3, r0, #1
   b7452:	42a1      	cmp	r1, r4
   b7454:	d008      	beq.n	b7468 <memmove+0x28>
   b7456:	f811 2b01 	ldrb.w	r2, [r1], #1
   b745a:	f803 2f01 	strb.w	r2, [r3, #1]!
   b745e:	e7f8      	b.n	b7452 <memmove+0x12>
   b7460:	4402      	add	r2, r0
   b7462:	4601      	mov	r1, r0
   b7464:	428a      	cmp	r2, r1
   b7466:	d100      	bne.n	b746a <memmove+0x2a>
   b7468:	bd10      	pop	{r4, pc}
   b746a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b746e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b7472:	e7f7      	b.n	b7464 <memmove+0x24>

000b7474 <memset>:
   b7474:	4402      	add	r2, r0
   b7476:	4603      	mov	r3, r0
   b7478:	4293      	cmp	r3, r2
   b747a:	d100      	bne.n	b747e <memset+0xa>
   b747c:	4770      	bx	lr
   b747e:	f803 1b01 	strb.w	r1, [r3], #1
   b7482:	e7f9      	b.n	b7478 <memset+0x4>

000b7484 <srand>:
   b7484:	b538      	push	{r3, r4, r5, lr}
   b7486:	4b10      	ldr	r3, [pc, #64]	; (b74c8 <srand+0x44>)
   b7488:	681d      	ldr	r5, [r3, #0]
   b748a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b748c:	4604      	mov	r4, r0
   b748e:	b9b3      	cbnz	r3, b74be <srand+0x3a>
   b7490:	2018      	movs	r0, #24
   b7492:	f7fe fdc1 	bl	b6018 <malloc>
   b7496:	4602      	mov	r2, r0
   b7498:	63a8      	str	r0, [r5, #56]	; 0x38
   b749a:	b920      	cbnz	r0, b74a6 <srand+0x22>
   b749c:	4b0b      	ldr	r3, [pc, #44]	; (b74cc <srand+0x48>)
   b749e:	480c      	ldr	r0, [pc, #48]	; (b74d0 <srand+0x4c>)
   b74a0:	2142      	movs	r1, #66	; 0x42
   b74a2:	f7fe fde1 	bl	b6068 <__assert_func>
   b74a6:	490b      	ldr	r1, [pc, #44]	; (b74d4 <srand+0x50>)
   b74a8:	4b0b      	ldr	r3, [pc, #44]	; (b74d8 <srand+0x54>)
   b74aa:	e9c0 1300 	strd	r1, r3, [r0]
   b74ae:	4b0b      	ldr	r3, [pc, #44]	; (b74dc <srand+0x58>)
   b74b0:	6083      	str	r3, [r0, #8]
   b74b2:	230b      	movs	r3, #11
   b74b4:	8183      	strh	r3, [r0, #12]
   b74b6:	2100      	movs	r1, #0
   b74b8:	2001      	movs	r0, #1
   b74ba:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b74be:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b74c0:	2200      	movs	r2, #0
   b74c2:	611c      	str	r4, [r3, #16]
   b74c4:	615a      	str	r2, [r3, #20]
   b74c6:	bd38      	pop	{r3, r4, r5, pc}
   b74c8:	2003e5c0 	.word	0x2003e5c0
   b74cc:	000b79e5 	.word	0x000b79e5
   b74d0:	000b79fc 	.word	0x000b79fc
   b74d4:	abcd330e 	.word	0xabcd330e
   b74d8:	e66d1234 	.word	0xe66d1234
   b74dc:	0005deec 	.word	0x0005deec

000b74e0 <strdup>:
   b74e0:	4b02      	ldr	r3, [pc, #8]	; (b74ec <strdup+0xc>)
   b74e2:	4601      	mov	r1, r0
   b74e4:	6818      	ldr	r0, [r3, #0]
   b74e6:	f000 b803 	b.w	b74f0 <_strdup_r>
   b74ea:	bf00      	nop
   b74ec:	2003e5c0 	.word	0x2003e5c0

000b74f0 <_strdup_r>:
   b74f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b74f2:	4604      	mov	r4, r0
   b74f4:	4608      	mov	r0, r1
   b74f6:	460d      	mov	r5, r1
   b74f8:	f7fd fc6a 	bl	b4dd0 <strlen>
   b74fc:	1c42      	adds	r2, r0, #1
   b74fe:	4611      	mov	r1, r2
   b7500:	4620      	mov	r0, r4
   b7502:	9201      	str	r2, [sp, #4]
   b7504:	f7fe fda8 	bl	b6058 <_malloc_r>
   b7508:	4604      	mov	r4, r0
   b750a:	b118      	cbz	r0, b7514 <_strdup_r+0x24>
   b750c:	9a01      	ldr	r2, [sp, #4]
   b750e:	4629      	mov	r1, r5
   b7510:	f7ff ff88 	bl	b7424 <memcpy>
   b7514:	4620      	mov	r0, r4
   b7516:	b003      	add	sp, #12
   b7518:	bd30      	pop	{r4, r5, pc}
	...

000b751c <__register_exitproc>:
   b751c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7520:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b75dc <__register_exitproc+0xc0>
   b7524:	4606      	mov	r6, r0
   b7526:	f8d8 0000 	ldr.w	r0, [r8]
   b752a:	461f      	mov	r7, r3
   b752c:	460d      	mov	r5, r1
   b752e:	4691      	mov	r9, r2
   b7530:	f000 f856 	bl	b75e0 <__retarget_lock_acquire_recursive>
   b7534:	4b25      	ldr	r3, [pc, #148]	; (b75cc <__register_exitproc+0xb0>)
   b7536:	681c      	ldr	r4, [r3, #0]
   b7538:	b934      	cbnz	r4, b7548 <__register_exitproc+0x2c>
   b753a:	4c25      	ldr	r4, [pc, #148]	; (b75d0 <__register_exitproc+0xb4>)
   b753c:	601c      	str	r4, [r3, #0]
   b753e:	4b25      	ldr	r3, [pc, #148]	; (b75d4 <__register_exitproc+0xb8>)
   b7540:	b113      	cbz	r3, b7548 <__register_exitproc+0x2c>
   b7542:	681b      	ldr	r3, [r3, #0]
   b7544:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7548:	6863      	ldr	r3, [r4, #4]
   b754a:	2b1f      	cmp	r3, #31
   b754c:	dd07      	ble.n	b755e <__register_exitproc+0x42>
   b754e:	f8d8 0000 	ldr.w	r0, [r8]
   b7552:	f000 f847 	bl	b75e4 <__retarget_lock_release_recursive>
   b7556:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b755a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b755e:	b34e      	cbz	r6, b75b4 <__register_exitproc+0x98>
   b7560:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7564:	b988      	cbnz	r0, b758a <__register_exitproc+0x6e>
   b7566:	4b1c      	ldr	r3, [pc, #112]	; (b75d8 <__register_exitproc+0xbc>)
   b7568:	b923      	cbnz	r3, b7574 <__register_exitproc+0x58>
   b756a:	f8d8 0000 	ldr.w	r0, [r8]
   b756e:	f000 f838 	bl	b75e2 <__retarget_lock_release>
   b7572:	e7f0      	b.n	b7556 <__register_exitproc+0x3a>
   b7574:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7578:	f7fe fd4e 	bl	b6018 <malloc>
   b757c:	2800      	cmp	r0, #0
   b757e:	d0f4      	beq.n	b756a <__register_exitproc+0x4e>
   b7580:	2300      	movs	r3, #0
   b7582:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7586:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b758a:	6863      	ldr	r3, [r4, #4]
   b758c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7590:	2201      	movs	r2, #1
   b7592:	409a      	lsls	r2, r3
   b7594:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7598:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b759c:	4313      	orrs	r3, r2
   b759e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b75a2:	2e02      	cmp	r6, #2
   b75a4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b75a8:	bf02      	ittt	eq
   b75aa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b75ae:	4313      	orreq	r3, r2
   b75b0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b75b4:	6863      	ldr	r3, [r4, #4]
   b75b6:	f8d8 0000 	ldr.w	r0, [r8]
   b75ba:	1c5a      	adds	r2, r3, #1
   b75bc:	3302      	adds	r3, #2
   b75be:	6062      	str	r2, [r4, #4]
   b75c0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b75c4:	f000 f80e 	bl	b75e4 <__retarget_lock_release_recursive>
   b75c8:	2000      	movs	r0, #0
   b75ca:	e7c6      	b.n	b755a <__register_exitproc+0x3e>
   b75cc:	2003e7f0 	.word	0x2003e7f0
   b75d0:	2003e764 	.word	0x2003e764
   b75d4:	00000000 	.word	0x00000000
   b75d8:	000b6019 	.word	0x000b6019
   b75dc:	2003e624 	.word	0x2003e624

000b75e0 <__retarget_lock_acquire_recursive>:
   b75e0:	4770      	bx	lr

000b75e2 <__retarget_lock_release>:
   b75e2:	4770      	bx	lr

000b75e4 <__retarget_lock_release_recursive>:
   b75e4:	4770      	bx	lr

000b75e6 <link_code_end>:
	...

000b75e8 <dynalib_user>:
   b75e8:	4de1 000b 4e1d 000b 4e45 000b 4e49 000b     .M...N..EN..IN..
   b75f8:	0000 0000 6e49 7469 6169 696c 697a 676e     ....Initializing
   b7608:	2e2e 002e 6957 462d 2069 6f63 6e6e 6365     ....Wi-Fi connec
   b7618:	6574 2e64 5700 2d69 6946 6320 6e6f 656e     ted..Wi-Fi conne
   b7628:	7463 6f69 206e 6166 6c69 6465 202e 704f     ction failed. Op
   b7638:	7265 7461 6e69 2067 666f 6c66 6e69 2e65     erating offline.
   b7648:	5000 7261 6974 6c63 2065 6c43 756f 2064     .Particle Cloud 
   b7658:	6f63 6e6e 6365 6574 2e64 5000 7261 6974     connected..Parti
   b7668:	6c63 2065 6c43 756f 2064 6f63 6e6e 6365     cle Cloud connec
   b7678:	6974 6e6f 6620 6961 656c 2e64 4f20 6570     tion failed. Ope
   b7688:	6172 6974 676e 6f20 6666 696c 656e 002e     rating offline..
   b7698:	6f68 6b6f 722d 7365 6f70 736e 2f65 6574     hook-response/te
   b76a8:	7473 6144 6174 4d00 5841 3033 3031 2035     stData.MAX30105 
   b76b8:	6177 2073 6f6e 2074 6f66 6e75 2e64 5020     was not found. P
   b76c8:	656c 7361 2065 6863 6365 206b 6977 6972     lease check wiri
   b76d8:	676e 702f 776f 7265 002e 6954 656d 6620     ng/power..Time f
   b76e8:	726f 6e20 7765 6d20 6165 7573 6572 656d     or new measureme
   b76f8:	746e 002e 6552 7571 7365 6974 676e 6d20     nt..Requesting m
   b7708:	6165 7573 6572 656d 746e 2e2e 202e 6c46     easurement... Fl
   b7718:	7361 6968 676e 6220 756c 2065 454c 2e44     ashing blue LED.
   b7728:	5600 6c61 6469 4220 4d50 203a 6e00 6e61     .Valid BPM: .nan
   b7738:	6900 666e 6f00 6676 4d00 6165 7573 6572     .inf.ovf.Measure
   b7748:	656d 746e 7420 6d69 6f65 7475 202e 6552     ment timeout. Re
   b7758:	7574 6e72 6e69 2067 6f74 4920 4c44 2e45     turning to IDLE.
   b7768:	7600 6365 6f74 3a72 5f3a 5f4d 6572 6c61     .vector::_M_real
   b7778:	6f6c 5f63 6e69 6573 7472 4400 7461 2061     loc_insert.Data 
   b7788:	7473 726f 6465 6c20 636f 6c61 796c 2820     stored locally (
   b7798:	666f 6c66 6e69 2965 2e2e 202e 6c46 7361     offline)... Flas
   b77a8:	6968 676e 7920 6c65 6f6c 2077 454c 0044     hing yellow LED.
   b77b8:	6553 646e 6e69 2067 6164 6174 7420 206f     Sending data to 
   b77c8:	6573 7672 7265 2e2e 002e 6144 6174 7320     server....Data s
   b77d8:	6e65 2074 7573 6363 7365 6673 6c75 796c     ent successfully
   b77e8:	2e2e 202e 6c46 7361 6968 676e 6720 6572     ... Flashing gre
   b77f8:	6e65 4c20 4445 002e 6146 6c69 6465 7420     en LED..Failed t
   b7808:	206f 6573 646e 6420 7461 2e61 5320 6f74     o send data. Sto
   b7818:	6972 676e 6c20 636f 6c61 796c 002e 0000     ring locally....

000b7828 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7830:	6139 000b 613f 000b 617d 000b 614d 000b     9a..?a..}a..Ma..
   b7840:	613b 000b                                   ;a..

000b7844 <_ZTVN5spark13EthernetClassE>:
	...
   b784c:	66c7 000b 66bd 000b 66b3 000b 66a9 000b     .f...f...f...f..
   b785c:	669d 000b 6691 000b 6941 000b 6949 000b     .f...f..Ai..Ii..
   b786c:	6685 000b 667d 000b 6673 000b 6669 000b     .f..}f..sf..if..
   b787c:	6a71 000b 6979 000b 6981 000b               qj..yi...i..

000b7888 <_ZTV7TwoWire>:
	...
   b7890:	66e5 000b 672f 000b 6707 000b 66e7 000b     .f../g...g...f..
   b78a0:	670f 000b 6717 000b 671f 000b 6727 000b     .g...g...g..'g..
   b78b0:	6beb 000b                                   .k..

000b78b4 <_ZTV9IPAddress>:
	...
   b78bc:	6811 000b 6801 000b 6803 000b 7061 0070     .h...h...h..app.

000b78cc <CSWTCH.109>:
   b78cc:	e690 2003 e720 2003 e69c 2003               ...  .. ... 

000b78d8 <_ZTVN5spark12NetworkClassE>:
	...
   b78e0:	6901 000b 690b 000b 6915 000b 691f 000b     .i...i...i...i..
   b78f0:	6929 000b 6935 000b 6941 000b 6949 000b     )i..5i..Ai..Ii..
   b7900:	6951 000b 695d 000b 6965 000b 696f 000b     Qi..]i..ei..oi..
   b7910:	6a71 000b 6979 000b 6981 000b 5925 252d     qj..yi...i..%Y-%
   b7920:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   b7930:	7361 7463 6d69 0065                         asctime.

000b7938 <_ZTV11USARTSerial>:
	...
   b7940:	6f45 000b 6fb1 000b 6f89 000b 6a99 000b     Eo...o...o...j..
   b7950:	6f59 000b 6f75 000b 6f67 000b 6f83 000b     Yo..uo..go...o..
   b7960:	6beb 000b 6f47 000b 6f4b 000b               .k..Go..Ko..

000b796c <_ZTV9USBSerial>:
	...
   b7974:	6fef 000b 7057 000b 702d 000b 6a99 000b     .o..Wp..-p...j..
   b7984:	701f 000b 6ff1 000b 7001 000b 7051 000b     .p...o...p..Qp..
   b7994:	6beb 000b 7011 000b 6fe9 000b               .k...p...o..

000b79a0 <_ZTVN5spark9WiFiClassE>:
	...
   b79a8:	7145 000b 713b 000b 7131 000b 4e75 000b     Eq..;q..1q..uN..
   b79b8:	7125 000b 7119 000b 6941 000b 6949 000b     %q...q..Ai..Ii..
   b79c8:	710d 000b 7105 000b 70fb 000b 70f1 000b     .q...q...p...p..
   b79d8:	6a71 000b 6979 000b 6981 000b               qj..yi...i..

000b79e4 <_ZSt7nothrow>:
   b79e4:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b79f4:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b7a04:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b7a14:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b7a24:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b7a34:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b7a44:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b7a55 <link_const_data_end>:
   b7a55:	00          	.byte	0x00
	...

000b7a58 <link_constructors_location>:
   b7a58:	000b56b5 	.word	0x000b56b5
   b7a5c:	000b6129 	.word	0x000b6129
   b7a60:	000b66d1 	.word	0x000b66d1
   b7a64:	000b68f1 	.word	0x000b68f1
   b7a68:	000b6a85 	.word	0x000b6a85
   b7a6c:	000b6bb5 	.word	0x000b6bb5
   b7a70:	000b6dd1 	.word	0x000b6dd1
   b7a74:	000b6f31 	.word	0x000b6f31
   b7a78:	000b7151 	.word	0x000b7151
